bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	189	None	replace
2	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
3	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	189	None	replace
4	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	189	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
6	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
7	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null);	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
9	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
10	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	33	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
12	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
13	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  class);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
14	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    c);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	182	None	replace
15	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Unsafe.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Unsafe.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Unsafe.class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    c);    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
16	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  UnsafeAllocator.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  UnsafeAllocator.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  UnsafeAllocator.class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    c);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	182	None	replace
17	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	174	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
19	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
20	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	174	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
22	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
24	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
25	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
26	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    	non-compiled	[CE]  <identifier>  expected	104	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	104	1	replace
28	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	104	1	replace
29	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	125	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
31	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
32	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	125	None	replace
33	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	125	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
35	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
37	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
38	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass,  c.getSuperclass();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass,  c.getSuperclass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass,  c.getSuperclass();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  ';'  expected	42	None	replace
39	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getSimpleName();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getSimpleName();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getSimpleName();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  incompatible  types	42	None	replace
40	[BUG]  [BUGGY]  Class  <?>  f  =  safeClass.getSuperclass();  [CE]  cannot  find  symbol  safeClass  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  safeClass.getSuperclass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  safeClass.getSuperclass();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  safeClass	42	None	replace
41	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getFunction();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getFunction();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getFunction();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
42	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getName();  [CE]  incompatible  types  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getName();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getName();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  incompatible  types	42	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	179	1	replace
44	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	179	1	replace
45	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Field  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Field  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    Field  f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
46	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Class  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Class  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    Class  f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
47	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
48	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
49	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  incompatible  types	65	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
51	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
53	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
54	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  <identifier>  expected	65	None	replace
55	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)unsafeClass.create();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)unsafeClass.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)unsafeClass.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
56	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)safeClass.create();  [CE]  cannot  find  symbol  safeClass  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)safeClass.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)safeClass.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  safeClass	212	None	replace
57	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)null.create();  [CE]  <null>  cannot  be  dereferenced  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)null.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)null.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	212	None	replace
58	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)hudson.create();  [CE]  cannot  find  symbol  hudson  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)hudson.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)hudson.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  hudson	212	None	replace
59	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)in.create();  [CE]  cannot  find  symbol  in  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)in.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)in.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  in	212	None	replace
60	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	75	None	add
61	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	75	None	add
62	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	75	None	add
63	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	75	None	add
64	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	140	None	replace
65	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  true);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	140	None	replace
66	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	140	None	replace
67	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	140	None	replace
68	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	140	None	replace
69	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null, ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null, ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null, ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	140	None	replace
70	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
71	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  incompatible  types	22	None	replace
72	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	120	None	replace
73	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	120	None	replace
74	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".getRawClass(),  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".getRawClass(),  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".getRawClass(),  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
75	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	120	None	replace
76	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	120	None	replace
77	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	85	None	add
78	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	85	None	add
79	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe "));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe "));  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe "));	  	non-compiled	[CE]  	85	None	add
80	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	85	None	add
81	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ",  null);	  final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	95	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
83	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
85	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
87	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
89	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe-class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Object ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Object ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
91	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Object ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Object ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Object ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
93	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
94	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass());	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
95	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	111	None	replace
96	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getName());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getName());	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
97	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	116	None	replace
98	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	116	None	replace
99	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	116	None	replace
100	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	116	None	replace
101	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ",  unsafeClass);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  f  =  unsafeClass.getDeclaredField( "null ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	116	None	replace
102	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	116	None	replace
103	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	30	None	add
104	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".org.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".org.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	30	None	add
105	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	30	None	add
106	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	30	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	131	1	replace
108	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	131	1	replace
109	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  incompatible  types	131	None	replace
110	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  <identifier>  expected	131	None	replace
111	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
112	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
113	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
114	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	32	None	add
115	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  Class.class);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  Class.class);	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
117	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
118	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	164	None	replace
119	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ")+  unsafeClass.getName();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ")+  unsafeClass.getName();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ")+  unsafeClass.getName();	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	non-compiled	[CE]  incompatible  types	164	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
121	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe_class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
122	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	29	None	replace
123	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".sun.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
124	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	9	None	replace
125	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	9	None	replace
126	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	9	None	replace
127	[BUG]  [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	String  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	9	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	86	1	replace
129	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	86	1	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	86	1	replace
131	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	86	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "none. ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
133	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none. ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
134	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  incompatible  types	108	None	replace
135	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ".getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ".getName());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none ".getName());	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
136	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ".getClass());  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ".getClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none ".getClass());	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	108	None	replace
137	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   ".none   ");    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
138	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   ".none   ");    	non-compiled	[CE]  incompatible  types	107	None	replace
139	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   ".none   ");    	non-compiled	[CE]  incompatible  types	107	None	replace
140	[BUG]  [BUGGY]  Constructor  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   ".none   ");    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	147	1	replace
142	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	147	1	replace
143	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
144	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
145	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  incompatible  types	113	None	replace
146	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	113	None	replace
147	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
148	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
149	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	192	None	replace
150	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
151	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
152	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  Class.class,  c);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  Class.class,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  Class.class,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	192	None	replace
153	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  c);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	15	None	replace
154	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	15	None	replace
155	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  type);  [CE]  cannot  find  symbol  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  type);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  type);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  type	15	None	replace
156	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  class);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
157	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
158	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  true);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
159	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	1	None	replace
160	[BUG]  [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	String  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	1	None	replace
161	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getFunctionType();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getFunctionType();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getFunctionType();	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
162	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getRawType();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getRawType();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getRawType();	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
163	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getInstanceType();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getInstanceType();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getInstanceType();	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
165	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
167	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
168	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
169	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  incompatible  types	67	None	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
171	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declareInstance. ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
173	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance. ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declareInstance, ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
175	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance, ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance, ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
176	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	172	None	replace
177	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  incompatible  types	129	None	replace
178	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
179	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
180	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  true);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
181	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	48	None	replace
182	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
183	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	162	None	replace
184	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".getRawClass(),  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".getRawClass(),  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".getRawClass(),  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
185	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	162	None	replace
186	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe   ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe   ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	162	None	replace
187	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId(),  unsafeClass.getRawClass();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId(),  unsafeClass.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId(),  unsafeClass.getRawClass();	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  ';'  expected	210	None	replace
188	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().withUTC().getRawClass();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().withUTC().getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().withUTC().getRawClass();	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
189	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().instance().getRawClass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().instance().getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().instance().getRawClass();	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
190	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().getClass();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().getClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().getClass();	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
191	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().newInstance();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().newInstance();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().newInstance();	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
192	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
193	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
194	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
195	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe-class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe-class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
196	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
198	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
200	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
201	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "safeclass ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "safeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.safeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
203	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.safeclass ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.safeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
204	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  incompatible  types	217	None	replace
205	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  incompatible  types	217	None	replace
206	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	217	None	replace
207	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
208	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
209	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
210	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
211	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
212	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
213	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ".);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ".);	  	non-compiled	[CE]  <identifier>  expected	203	None	add
214	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
215	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Class  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Class  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    Class  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
216	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
217	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
218	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Object  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Object  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    Object  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
219	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	92	None	replace
220	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	92	None	replace
221	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	92	None	replace
222	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null ",  null);	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	96	None	replace
223	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null. ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null. ");	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
224	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	96	None	replace
225	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null ",  false);	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	96	None	replace
226	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ".class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null ".class);	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  <identifier>  expected	96	None	replace
227	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
228	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
229	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
230	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
231	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
232	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
233	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
234	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	79	None	replace
235	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class ",  null);	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	79	None	replace
236	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class ",  c);	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol  c	79	None	replace
237	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class. ");	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
238	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class ",  false);	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	79	None	replace
239	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class, ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class, ");	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
240	[BUG]  [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	String  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  incompatible  types	105	None	replace
241	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	add
242	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	add
243	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	add
244	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	add
245	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	add
246	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  f  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol  f	169	None	replace
247	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  incompatible  types	169	None	replace
248	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  incompatible  types	169	None	replace
249	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  incompatible  types	169	None	replace
250	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	205	None	add
251	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe.class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	205	None	add
252	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe.class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	205	None	add
253	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	205	None	add
254	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	56	None	add
255	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	56	None	add
256	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	56	None	add
257	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	56	None	add
258	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	56	None	add
259	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
260	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
261	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
262	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
263	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	23	None	add
264	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
265	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	47	None	replace
266	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	47	None	replace
267	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	47	None	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	191	1	replace
269	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	191	1	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	191	1	replace
271	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	191	1	replace
272	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
273	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
274	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
275	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
276	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
277	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
278	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	206	1	replace
280	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	206	1	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "Unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	206	1	replace
282	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "Unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	206	1	replace
283	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	206	None	replace
284	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	206	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	206	1	replace
286	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	206	1	replace
287	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    Field  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
288	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Class  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Class  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    Class  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
289	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
290	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
291	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Object  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Object  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    Object  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
292	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	35	None	add
293	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	35	None	add
294	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	35	None	add
295	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	35	None	add
296	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	123	None	replace
297	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	123	None	replace
298	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	123	None	replace
299	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  true);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	123	None	replace
300	[BUG]  [BUGGY]  Object  f  =  getConstructorId(null,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(null,  unsafeClass);	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
301	[BUG]  [BUGGY]  Object  f  =  getConstructorId(c);  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(c);	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol  c	155	None	replace
302	[BUG]  [BUGGY]  Object  f  =  getConstructorId(unsafeClass);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(unsafeClass);	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
303	[BUG]  [BUGGY]  Object  f  =  getConstructorId(constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(constructorId);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(constructorId);	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol  constructorId	155	None	replace
304	[BUG]  [BUGGY]  Object  f  =  getConstructorId(null,  unsafeClass.getName());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(null,  unsafeClass.getName());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(null,  unsafeClass.getName());	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
305	[BUG]  [BUGGY]  Object  f  =  getConstructorId(safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(safeClass);	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	155	None	replace
306	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	81	None	add
307	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	81	None	add
308	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	81	None	add
309	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	81	None	add
310	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	52	None	add
311	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Class  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Class  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    Class  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	52	None	add
312	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	52	None	add
313	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Object  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Object  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    Object  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	52	None	add
314	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(null,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(null,  unsafeClass);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
315	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(unsafeClass,  c);  [CE]  cannot  find  symbol  c  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(unsafeClass,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(unsafeClass,  c);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol  c	211	None	replace
316	[BUG]  [BUGGY]  Object  c  =  getConstructorId().invoke(null,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  c  =  getConstructorId().invoke(null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  c  =  getConstructorId().invoke(null,  unsafeClass);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
317	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(c,  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(c,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(c,  unsafeClass);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol  c	211	None	replace
318	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(null,  UnsafeAllocator.class);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(null,  UnsafeAllocator.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(null,  UnsafeAllocator.class);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
319	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(null,  safeClass);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol  safeClass	211	None	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
321	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
322	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	124	None	add
323	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".declareUnsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	124	None	add
324	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	124	None	add
325	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ".);	  	non-compiled	[CE]  <identifier>  expected	124	None	add
326	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Field  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Field  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    Field  f  =  unsafeClass.getDeclaredField( "safeclass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	183	None	add
327	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Class  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Class  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    Class  f  =  unsafeClass.getDeclaredField( "safeclass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	183	None	add
328	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  final  Field  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  final  Field  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    final  Field  f  =  unsafeClass.getDeclaredField( "safeclass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	183	None	add
329	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "safeclass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	183	None	add
330	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Object  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  Object  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    Object  f  =  unsafeClass.getDeclaredField( "safeclass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	183	None	add
331	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(unsafeClass);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(unsafeClass);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
332	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(null,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(null,  unsafeClass);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
333	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(c);  [CE]  cannot  find  symbol  c  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(c);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol  c	159	None	replace
334	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(constructorId);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(constructorId);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol  constructorId	159	None	replace
335	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(safeClass);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	159	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
337	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
338	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
339	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	21	None	replace
340	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ".);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	141	None	replace
341	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  if(f  ==  null)  {  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  if(f  ==  null)  {  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  if(f  ==  null)  {  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ".);    	non-compiled	[CE]  'catch'  without  'try'	141	None	replace
342	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
343	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
344	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
345	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
346	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
347	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
349	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
350	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
351	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	53	None	replace
352	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ".class);	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
353	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ").getRawClass();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ").getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ").getRawClass();	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
354	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)unsafeClass;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)unsafeClass;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)unsafeClass;	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
355	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)safeClass;  [CE]  cannot  find  symbol  safeClass  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)safeClass;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)safeClass;	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  cannot  find  symbol  safeClass	43	None	replace
356	[BUG]  [BUGGY]  final  Class  <?>  f  =(Class  <?>)null;  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Class  <?>  f  =(Class  <?>)null;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Class  <?>  f  =(Class  <?>)null;	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
357	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)null.class;  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)null.class;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)null.class;	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
358	[BUG]  [BUGGY]  Class  <?>  f  =(class  <?>)null;  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(class  <?>)null;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(class  <?>)null;	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
359	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)c;  [CE]  cannot  find  symbol  c  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)c;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)c;	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  cannot  find  symbol  c	43	None	replace
360	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  incompatible  types	59	None	replace
361	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
362	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Class  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Class  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    Class  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
363	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
364	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
365	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Object  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Object  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    Object  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
366	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
367	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId(null);	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
368	[BUG]  [BUGGY]  Class  <?>  f  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getFunctionId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getFunctionId();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
369	[BUG]  [BUGGY]  Class  <?>  f  =  this.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  this.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  this.getConstructorId();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	154	None	replace
370	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().getSuperclass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().getSuperclass();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
371	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorFunction();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorFunction();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorFunction();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
372	[BUG]  [BUGGY]  Class  <?>  f  =  getFactory();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getFactory();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getFactory();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
374	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
375	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
376	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
377	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    Class  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
378	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    Object  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
379	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
380	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
381	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	180	None	replace
382	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	180	None	replace
383	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  type);  [CE]  cannot  find  symbol  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  type);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  type);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  type	180	None	replace
384	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	180	None	replace
385	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  class);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class,  class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
386	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	180	None	replace
387	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
388	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class);	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
389	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
390	[BUG]  [BUGGY]  Object  f  =  safeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  safeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  safeClass.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	101	None	replace
391	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
392	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  <identifier>  expected	62	None	replace
393	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	62	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	76	1	replace
395	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	76	1	replace
396	[BUG]  [BUGGY]  c.setAccessible(true);  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  c.setAccessible(true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	c.setAccessible(true);	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  c	39	None	replace
397	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  f  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
398	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  [CE]  cannot  find  symbol  f  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(true);  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
399	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [CE]  cannot  find  symbol  f  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(true);  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
400	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  f  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
401	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  f  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
402	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  c,  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  c,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  c,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	150	None	replace
403	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getName(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getName(),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getName(),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
404	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	150	None	replace
405	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	150	None	replace
406	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	150	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
408	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
410	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "createUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "createUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
412	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "createUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "createUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "createUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
413	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	99	None	replace
414	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	99	None	replace
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "null. ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	compilable	  [FE]  AssertionFailedError  	117	1	replace
416	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null. ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	compilable	  [FE]  AssertionFailedError  	117	1	replace
417	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ".getRawClass());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ".getRawClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ".getRawClass());	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	compilable	  [FE]  AssertionFailedError  	117	1	replace
419	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	compilable	  [FE]  AssertionFailedError  	117	1	replace
420	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ".getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ".getName());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ".getName());	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
421	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	97	None	replace
422	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	97	None	replace
423	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ".getRawClass(),  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ".getRawClass(),  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ".getRawClass(),  null);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
424	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	97	None	replace
425	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	97	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
427	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
429	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
431	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
432	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	142	None	add
433	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".java.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".java.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".java.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	142	None	add
434	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	142	None	add
435	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(java.misc.unsafe   ");  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(java.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField(java.misc.unsafe   ");	  	non-compiled	[CE]  unclosed  string  literal	142	None	add
436	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  incompatible  types	64	None	replace
437	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	5	None	replace
438	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	133	None	add
439	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	133	None	add
440	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	133	None	add
441	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	133	None	add
442	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe "));  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe "));	  	non-compiled	[CE]  	133	None	add
443	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	209	None	replace
444	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	209	None	replace
445	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ");  final  Object  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	119	None	replace
446	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  final  Object  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	119	None	replace
447	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	119	None	replace
448	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  incompatible  types	213	None	replace
449	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  <identifier>  expected	213	None	replace
450	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	213	None	replace
451	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	36	None	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "Unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
453	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe_class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "Unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
454	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	36	None	replace
455	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
456	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	36	None	replace
457	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	163	None	add
458	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	163	None	add
459	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ".);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ".);	  	non-compiled	[CE]  <identifier>  expected	163	None	add
460	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	163	None	add
461	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	163	None	add
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "Sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "Sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
463	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "Sun.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "Sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "Sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
465	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
467	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
469	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
470	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
471	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Class  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
472	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
473	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Object  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
474	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
475	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "this.unsafe.. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
476	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ".);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ".);	  	non-compiled	[CE]  <identifier>  expected	190	None	add
477	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
478	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	122	None	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
480	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.none ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
482	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.none ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
484	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
485	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	57	None	replace
486	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	57	None	replace
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	204	1	replace
488	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	204	1	replace
489	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	204	None	replace
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	26	1	replace
491	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	26	1	replace
492	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
493	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	26	None	replace
494	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	26	None	replace
495	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	34	None	replace
496	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	34	None	replace
497	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	135	None	add
498	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	135	None	add
499	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	135	None	add
500	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	135	None	add
501	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getConstructorId(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorId(null);	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
502	[BUG]  [BUGGY]  final  Field  f  =  getConstructorFunction();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getConstructorFunction();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorFunction();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
503	[BUG]  [BUGGY]  final  Field  f  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getFunctionId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getFunctionId();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
504	[BUG]  [BUGGY]  final  Field  f  =  this.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  this.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  this.getConstructorId();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	156	None	replace
505	[BUG]  [BUGGY]  final  Field  f  =  getFunctionConstructorId();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getFunctionConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getFunctionConstructorId();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
506	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  cannot  find  symbol  f  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  f	177	None	replace
507	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	add
508	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".com.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".com.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".com.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	add
509	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	add
510	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	add
511	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ".class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	149	None	replace
512	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  incompatible  types	128	None	replace
513	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Class.class,  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Class.class,  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Class.class,  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	14	None	replace
514	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  c);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	14	None	replace
515	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null,  unsafeClass  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null,  unsafeClass  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null,  unsafeClass  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	14	None	replace
516	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	14	None	replace
517	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	49	None	replace
518	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
519	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	49	None	replace
520	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe, ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe, ");	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
521	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
523	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
524	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
525	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "none. ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "none. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "none. ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Class    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  incompatible  types	106	None	replace
526	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  c);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	185	None	replace
527	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	185	None	replace
528	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  true);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	185	None	replace
529	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	185	None	replace
530	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	185	None	replace
531	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none "),  Class.class);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none "),  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none "),  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  	185	None	replace
532	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	89	None	replace
533	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	89	None	replace
534	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	89	None	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	134	1	replace
536	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	134	1	replace
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	134	1	replace
538	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	134	1	replace
539	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	94	None	add
540	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	94	None	add
541	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ".);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField( "null ".);	  	non-compiled	[CE]  <identifier>  expected	94	None	add
542	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField( "null. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	94	None	add
543	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField( ",null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	94	None	add
544	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	130	None	replace
545	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  incompatible  types	130	None	replace
546	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	121	None	add
547	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Class  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Class  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    Class  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	121	None	add
548	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	121	None	add
549	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	121	None	add
550	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    Object  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	121	None	add
551	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	160	None	add
552	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".com.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".com.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	160	None	add
553	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	160	None	add
554	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	160	None	add
555	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	160	None	add
556	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	102	None	replace
557	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	102	None	replace
558	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	102	None	replace
559	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  true);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	102	None	replace
560	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c,  false);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  c	102	None	replace
561	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  unsafeClass,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  unsafeClass,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  unsafeClass,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    c,    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	16	None	replace
562	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  safeClass,  null);  [CE]  cannot  find  symbol  safeClass  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  safeClass,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  safeClass,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    c,    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	16	None	replace
563	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  class,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    c,    null);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
565	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "Unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
567	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe-class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "Unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "Unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
568	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
569	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	152	None	replace
570	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	152	None	replace
571	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	66	1	replace
572	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	66	1	replace
573	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	27	None	replace
574	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	27	None	replace
575	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	27	None	replace
576	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	27	None	replace
577	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  UnsafeAllocator.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  UnsafeAllocator.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  UnsafeAllocator.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    newInstance);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	167	None	replace
578	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  this.unsafeClass);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  this.unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  this.unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    newInstance);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	167	None	replace
579	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    newInstance);    	non-compiled	[CE]  cannot  find  symbol  safeClass	167	None	replace
580	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	add
581	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	add
582	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	add
583	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	45	None	add
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	compilable	  [FE]  AssertionFailedError  	200	1	replace
585	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	compilable	  [FE]  AssertionFailedError  	200	1	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	compilable	  [FE]  AssertionFailedError  	200	1	replace
587	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance_ ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	compilable	  [FE]  AssertionFailedError  	200	1	replace
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeInstance_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "UnsafeInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	compilable	  [FE]  AssertionFailedError  	200	1	replace
589	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeInstance_ ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeInstance_ ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	compilable	  [FE]  AssertionFailedError  	200	1	replace
590	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	200	None	replace
591	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  UnsafeAllocator.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  UnsafeAllocator.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  UnsafeAllocator.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    c);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	165	None	replace
592	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    c);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	165	None	replace
593	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  unsafe);  [CE]  cannot  find  symbol  unsafe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  unsafe);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  unsafe);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    c);    	non-compiled	[CE]  cannot  find  symbol  unsafe	165	None	replace
594	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass,  getConstructorId().getRawClass();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass,  getConstructorId().getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass,  getConstructorId().getRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  ';'  expected	38	None	replace
595	[BUG]  [BUGGY]  Class  <?>  f  =  safeClass.getRawClass();  [CE]  cannot  find  symbol  safeClass  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  safeClass.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  safeClass.getRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  safeClass	38	None	replace
596	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
597	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass().isAssignableFrom(c);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass().isAssignableFrom(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass().isAssignableFrom(c);	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
598	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.newInstance();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.newInstance();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.newInstance();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  incompatible  types	38	None	replace
599	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass().isAssignableFrom(unsafeClass);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass().isAssignableFrom(unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass().isAssignableFrom(unsafeClass);	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
600	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Unsafe.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Unsafe.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Unsafe.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    c);    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
601	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  class);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    c);    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
602	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	8	None	replace
603	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	8	None	replace
604	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	add
605	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	add
606	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	add
607	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe "));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe "));  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe "));	  	non-compiled	[CE]  	98	None	add
608	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ".);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	98	None	add
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	13	1	replace
610	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	13	1	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	13	1	replace
612	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	13	1	replace
613	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
614	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	77	None	add
615	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	77	None	add
616	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "class "));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "class "));  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "class "));	  	non-compiled	[CE]  	77	None	add
617	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  unsafeClass.getDeclaredField( ",class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	77	None	add
618	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	46	None	replace
619	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);	  final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	46	None	replace
620	[BUG]  [BUGGY]  Object  f  =  unsafeClass.get(unsafeClass);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.get(unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.get(unsafeClass);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
621	[BUG]  [BUGGY]  Object  f  =  unsafeClass.get(c);  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.get(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.get(c);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol  c	41	None	replace
622	[BUG]  [BUGGY]  Object  f  =  safeClass.get(null);  [CE]  cannot  find  symbol  safeClass  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  safeClass.get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  safeClass.get(null);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	41	None	replace
623	[BUG]  [BUGGY]  Object  f  =  this.unsafeClass.get(null);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  this.unsafeClass.get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  this.unsafeClass.get(null);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	41	None	replace
624	[BUG]  [BUGGY]  Object  f  =  unsafeClass.get(safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.get(safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.get(safeClass);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	41	None	replace
625	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	25	None	add
626	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".java.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".java.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".java.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	25	None	add
627	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(java.misc.Unsafe   ");  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(java.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField(java.misc.Unsafe   ");	  	non-compiled	[CE]  unclosed  string  literal	25	None	add
628	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	25	None	add
629	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	25	None	add
630	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	69	None	replace
631	[BUG]  [BUGGY]  c.setAccessible(false);  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  c.setAccessible(false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	c.setAccessible(false);	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  c	157	None	replace
632	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [CE]  cannot  find  symbol  f  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
633	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  }  [CE]  cannot  find  symbol  f  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
634	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  f  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
635	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  f  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
636	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
637	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    new    Class[]    {    null    }    );    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
638	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    new    Class[]    {    null    }    );    	non-compiled	[CE]  cannot  find  symbol  safeClass	17	None	replace
639	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
640	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
641	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
642	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "newInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "newInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
644	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "newInstance ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "newInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "newInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
645	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeInstance ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	139	None	replace
646	[BUG]  [BUGGY]  Object  f  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getFunctionId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getFunctionId();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
647	[BUG]  [BUGGY]  Object  f  =  this.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  this.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  this.getConstructorId();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	153	None	replace
648	[BUG]  [BUGGY]  Object  f  =  getConstructorFunction();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorFunction();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorFunction();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
649	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	2	None	replace
650	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Field  f  =  unsafeClass.getDeclaredField( ".class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Field  f  =  unsafeClass.getDeclaredField( ".class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    Field  f  =  unsafeClass.getDeclaredField( ".class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	83	None	add
651	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Class  f  =  unsafeClass.getDeclaredField( ".class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Class  f  =  unsafeClass.getDeclaredField( ".class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    Class  f  =  unsafeClass.getDeclaredField( ".class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	83	None	add
652	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
653	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
654	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
655	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	201	None	add
656	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
657	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
658	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
659	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
660	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	136	1	replace
661	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	136	1	replace
662	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	136	None	replace
663	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	144	None	add
664	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".org.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".org.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	144	None	add
665	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	144	None	add
666	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	144	None	add
667	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
668	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Class  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Class  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    Class  f  =  unsafeClass.getDeclaredField( "noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
669	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
670	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    final  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
671	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Field  f  =  unsafeClass.getDeclaredField( ".noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Field  f  =  unsafeClass.getDeclaredField( ".noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    Field  f  =  unsafeClass.getDeclaredField( ".noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
672	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	100	None	replace
673	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	100	None	replace
674	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	100	None	replace
675	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	100	None	replace
676	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "isUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "isUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "isUnsafe ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	197	None	replace
677	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  incompatible  types	197	None	replace
678	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	173	None	replace
679	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	173	None	replace
680	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  true);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	173	None	replace
681	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	28	None	add
682	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	28	None	add
683	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	28	None	add
684	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	28	None	add
685	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	28	None	add
686	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass(),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass(),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
687	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	188	None	replace
688	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getName(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getName(),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getName(),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
689	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe "),  unsafeClass);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe "),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe "),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  	188	None	replace
690	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	188	None	replace
691	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  cannot  find  symbol  f  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol  f	175	None	replace
692	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField(null);	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Field    f    =    unsafeClass.getDeclaredField(null       ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
693	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(null);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField(null);	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Field    f    =    unsafeClass.getDeclaredField(null       ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
694	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    final  Field  f  =  unsafeClass.getDeclaredField( "none   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	50	None	add
695	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	50	None	add
696	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none ".);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    final  Field  f  =  unsafeClass.getDeclaredField( "none ".);	  	non-compiled	[CE]  <identifier>  expected	50	None	add
697	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none "));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none "));  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    final  Field  f  =  unsafeClass.getDeclaredField( "none "));	  	non-compiled	[CE]  	50	None	add
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	202	1	replace
699	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	202	1	replace
700	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
701	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	202	None	replace
702	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	202	None	replace
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".class ");	  Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	84	1	replace
704	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".class ");	  Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	84	1	replace
705	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.class ");	  Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	84	1	replace
706	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator.class ");	  Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	84	1	replace
707	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	118	None	replace
708	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	118	None	replace
709	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null. ");  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "null. ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	118	None	replace
710	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	193	None	replace
711	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	193	None	replace
712	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "class. ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "class. ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  incompatible  types	193	None	replace
713	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class. ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	193	None	replace
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class, ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	187	1	replace
715	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class, ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class, ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	187	1	replace
716	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  incompatible  types	110	None	replace
717	[BUG]  [BUGGY]  Constructor  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Field    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
718	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ".class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	11	None	replace
719	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ".class);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ".class);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ".class);  }	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
720	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  Class.class);  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  Class.class);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  Class.class);  }	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ".class);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	replace
721	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	215	None	replace
722	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	215	None	replace
723	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  true);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	215	None	replace
724	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null, ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null, ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null, ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	215	None	replace
725	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f!=  null)  {  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f!=  null)  {  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f!=  null)  {  f  =  unsafeClass.getDeclaredField( "unsafe ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  'catch'  without  'try'	148	None	replace
726	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f!=  null)  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  'catch'  without  'try'	148	None	replace
727	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f  ==  null)  {  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f  ==  null)  {  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f  ==  null)  {  f  =  unsafeClass.getDeclaredField( "unsafe ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  'catch'  without  'try'	148	None	replace
728	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  if(f  ==  null)  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  'catch'  without  'try'	148	None	replace
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	208	1	replace
730	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	208	1	replace
731	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	208	1	replace
732	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe-class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	208	1	replace
733	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
734	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	208	None	replace
735	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "class. ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "class       ");    	compilable	  [FE]  AssertionFailedError  	70	1	replace
736	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class. ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "class       ");    	compilable	  [FE]  AssertionFailedError  	70	1	replace
737	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ".getRawClass());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ".getRawClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ".getRawClass());	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
738	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "declareInstance   ",  null,  unsafeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "declareInstance   ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "declareInstance   ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    safeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	166	None	replace
739	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	143	1	replace
740	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	143	1	replace
741	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
742	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	143	None	replace
743	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	143	None	replace
744	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafeClass.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
745	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	51	None	replace
746	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	80	None	replace
747	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	80	None	replace
748	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class, ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class, ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class, ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	80	None	replace
749	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  true);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	80	None	replace
750	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	80	None	replace
751	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  type);  [CE]  cannot  find  symbol  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  type);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  type);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  type	80	None	replace
752	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  Object.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  Object.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  Object.class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	80	None	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "UnsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	88	1	replace
754	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	88	1	replace
755	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
756	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".getRawClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".getRawClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".getRawClass());	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
757	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".getName());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".getName());	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
758	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	137	None	replace
759	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	137	None	replace
760	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	137	None	replace
761	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	137	None	replace
762	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	137	None	replace
763	[BUG]  [BUGGY]  Object  f  =  unsafeClass,  getConstructorId();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass,  getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass,  getConstructorId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  ';'  expected	40	None	replace
764	[BUG]  [BUGGY]  Object  f  =  safeClass.getConstructorId();  [CE]  cannot  find  symbol  safeClass  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  safeClass.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  safeClass.getConstructorId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  safeClass	40	None	replace
765	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getFunctionId();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getFunctionId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getFunctionId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
766	[BUG]  [BUGGY]  Object  f  =  c.getConstructorId();  [CE]  cannot  find  symbol  c  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  c.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  c.getConstructorId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  c	40	None	replace
767	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getImplicitPrototype();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getImplicitPrototype();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getImplicitPrototype();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
768	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "isUnsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe.   ");    	compilable	  [FE]  AssertionFailedError  	198	1	replace
769	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe.class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "isUnsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe.   ");    	compilable	  [FE]  AssertionFailedError  	198	1	replace
770	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe.   ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "isUnsafe.   ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
771	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	170	None	replace
772	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  new  Class[]  {  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	170	None	replace
773	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	170	None	replace
774	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	170	None	replace
775	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	170	None	replace
776	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	78	None	replace
777	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ".getName());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ".getName());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ".getName());	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
778	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  incompatible  types	20	None	replace
779	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  incompatible  types	20	None	replace
780	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    c);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	178	None	replace
781	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    c);    	non-compiled	[CE]  cannot  find  symbol  safeClass	178	None	replace
782	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Unsafe.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Unsafe.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Unsafe.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    c);    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
783	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
784	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	55	None	replace
785	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	55	1	replace
786	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	55	1	replace
787	[BUG]  [BUGGY]  final  Object  f  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getConstructorId(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorId(null);	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
788	[BUG]  [BUGGY]  final  Object  f  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getFunctionId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getFunctionId();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
789	[BUG]  [BUGGY]  final  Object  f  =  this.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  this.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  this.getConstructorId();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	158	None	replace
790	[BUG]  [BUGGY]  final  Object  f  =  getConstructorFunction();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getConstructorFunction();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorFunction();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
791	[BUG]  [BUGGY]  final  Object  f  =  getConstructorId(c);  [CE]  cannot  find  symbol  c  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getConstructorId(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorId(c);	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  c	158	None	replace
792	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	37	None	replace
793	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  false,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  false,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  false,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	37	None	replace
794	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	37	None	replace
795	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  true);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  true);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  true);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	37	None	replace
796	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	37	None	replace
797	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	37	None	replace
798	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  this);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  this);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    this,    null);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	168	None	replace
799	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    this,    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	168	None	replace
800	[BUG]  [BUGGY]  Class  <?>  f  =  c.getSuperclass();  [CE]  cannot  find  symbol  c  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  c.getSuperclass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  c.getSuperclass();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
801	[BUG]  [BUGGY]  Class  <?>  f  =  this.unsafeClass.getSuperclass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  this.unsafeClass.getSuperclass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  this.unsafeClass.getSuperclass();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	42	None	replace
802	[BUG]  [BUGGY]  Class  <?>  f  =  this.safeClass.getSuperclass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  this.safeClass.getSuperclass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  this.safeClass.getSuperclass();	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	42	None	replace
803	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.findSuperclass(null);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.findSuperclass(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.findSuperclass(null);	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
804	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ",  null,  unsafeClass);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	34	None	replace
805	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	34	None	replace
806	[BUG]  [BUGGY]  final  Object  f  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getFactoryId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getFactoryId();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
807	[BUG]  [BUGGY]  final  Object  f  =  getConstructorId().get(null);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getConstructorId().get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorId().get(null);	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
808	[BUG]  [BUGGY]  final  Object  f  =  getConstructorId().getObject();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getConstructorId().getObject();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorId().getObject();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
809	[BUG]  [BUGGY]  Class  <?>  f  =  c.getRawClass();  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  c.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  c.getRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  c	38	None	replace
810	[BUG]  [BUGGY]  Class  <?>  f  =  this.unsafeClass.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  this.unsafeClass.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  this.unsafeClass.getRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	38	None	replace
811	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.toArray(new  Class[unsafeClass.size()  ]);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.toArray(new  Class[unsafeClass.size()  ]);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.toArray(new  Class[unsafeClass.size()  ]);	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
812	[BUG]  [BUGGY]  Class  <?>  f  =  this.safeClass.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  this.safeClass.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  this.safeClass.getRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	38	None	replace
813	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	206	None	replace
814	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class,  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	15	None	replace
815	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
816	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance,  Class.class);  [CE]  cannot  find  symbol  newInstance  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance,  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance,  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	15	None	replace
817	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe-class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe-class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	104	1	replace
818	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe-class. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe-class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe-class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	104	1	replace
819	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	208	None	replace
820	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	208	None	replace
821	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	208	None	replace
822	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
823	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeInstance ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeInstance ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.UnsafeInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
824	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-Class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-Class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
825	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-Class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-Class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-Class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
826	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "sun.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "sun.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Field  f  =  safeClass.getDeclaredField( "sun.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
827	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    Method  f  =  unsafeClass.getDeclaredField( "sun.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	203	None	add
828	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "java.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	142	None	add
829	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
830	[BUG]  [BUGGY]  Object  f  =  this.unsafeClass.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  this.unsafeClass.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  this.unsafeClass.getConstructorId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	40	None	replace
831	[BUG]  [BUGGY]  Object  f  =  this.safeClass.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  this.safeClass.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  this.safeClass.getConstructorId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	40	None	replace
832	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Object    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
833	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "none. ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "none. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "none. ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Object    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
834	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "this.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  safeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	62	None	replace
835	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  c);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  null,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	170	None	replace
836	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  newInstance,  null);  [CE]  cannot  find  symbol  newInstance  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  newInstance,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  newInstance,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	170	None	replace
837	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	170	None	replace
838	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  this,  null);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  this,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  this,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    null);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	170	None	replace
839	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	135	None	add
840	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	147	1	replace
841	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	147	1	replace
842	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	47	None	replace
843	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	47	None	replace
844	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	47	None	replace
845	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  newInstance.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  newInstance.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  newInstance.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ".class);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
846	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  Unsafe.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  Unsafe.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  Unsafe.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ".class);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
847	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  incompatible  types	18	None	replace
848	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(org.misc.unsafe   ");  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(org.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField(org.misc.unsafe   ");	  	non-compiled	[CE]  unclosed  string  literal	144	None	add
849	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	52	None	add
850	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ".class);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ".class);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ".class);  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
851	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ".class);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ".class);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ".class);  }  else  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
852	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)null.getRawClass();  [CE]  <null>  cannot  be  dereferenced  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)null.getRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)null.getRawClass();	  Class    <?>    f    =(Class    <?>)null;    	non-compiled	[CE]  <null>  cannot  be  dereferenced	43	None	replace
853	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",none   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",none   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    final  Field  f  =  unsafeClass.getDeclaredField( ",none   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	50	None	add
854	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none ".class);	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  <identifier>  expected	108	None	replace
855	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
856	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
857	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  deprecated);  [CE]  cannot  find  symbol  deprecated  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  deprecated);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  deprecated);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    safeClass);    	non-compiled	[CE]  cannot  find  symbol  deprecated	166	None	replace
858	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  incompatible  types	109	None	replace
859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "null.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
860	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null.misc.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
861	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
862	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  c);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	100	None	replace
863	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Unsafe.class,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Unsafe.class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Unsafe.class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    c,    null);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
864	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  newInstance,  null);  [CE]  cannot  find  symbol  newInstance  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  newInstance,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  newInstance,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    c,    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	16	None	replace
865	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  Unsafe.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  Unsafe.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  Unsafe.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    c);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
866	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  this);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  null,  this);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    c);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	165	None	replace
867	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "sun.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  safeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	21	None	replace
868	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	88	1	replace
869	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	88	1	replace
870	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ".class);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
871	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
872	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
873	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
874	[BUG]  [BUGGY]  Object  f  =  safeClass.getDeclaredField( "sun.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  safeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  safeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	22	None	replace
875	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Field  f  =  unsafeClass.getDeclaredField(. ".class   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Field  f  =  unsafeClass.getDeclaredField(. ".class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    Field  f  =  unsafeClass.getDeclaredField(. ".class   ");	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
876	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    f  =  unsafeClass.getDeclaredField( "noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
877	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Object  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "noneInstance   ");  Object  f  =  unsafeClass.getDeclaredField( "noneInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    Object  f  =  unsafeClass.getDeclaredField( "noneInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	138	None	add
878	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
879	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
880	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
881	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "safeclass   ");  f  =  unsafeClass.getDeclaredField( "safeclass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    f  =  unsafeClass.getDeclaredField( "safeclass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	183	None	add
882	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
883	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  c	99	None	replace
884	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	99	None	replace
885	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    final  Field  f  =  safeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	124	None	add
886	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  constructorId);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  constructorId);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  constructorId	14	None	replace
887	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance,  null,  unsafeClass);  [CE]  cannot  find  symbol  newInstance  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance,  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance,  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  newInstance	14	None	replace
888	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c,  null,  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c,  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c,  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	14	None	replace
889	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_allocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe_allocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
890	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_allocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_allocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_allocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
891	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	74	None	replace
892	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	133	None	add
893	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "sun.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  safeClass.getDeclaredField( "sun.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	133	None	add
894	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  f  =  unsafeClass.getDeclaredField( "null ");  }  [CE]  cannot  find  symbol  f  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  f  =  unsafeClass.getDeclaredField( "null ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  f  =  unsafeClass.getDeclaredField( "null ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  f	177	None	replace
895	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  f  =  unsafeClass.getDeclaredField( "null ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  f  =  unsafeClass.getDeclaredField( "null ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  f  =  unsafeClass.getDeclaredField( "null ");  }  else  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	177	None	replace
896	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Method  f  =  unsafeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
897	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe.   ");    Field  f  =  safeClass.getDeclaredField( "declaration.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	103	None	add
898	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ".class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    	non-compiled	[CE]  <identifier>  expected	172	None	replace
899	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ",  null);	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	78	None	replace
900	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "superclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "superclass ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	78	1	replace
901	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "superclass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "superclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "superclass ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	78	1	replace
902	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  [CE]  cannot  find  symbol  f  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
903	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
904	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "class ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  incompatible  types	193	None	replace
905	[BUG]  [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  <?>  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   ".none   ");    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
906	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	202	None	replace
907	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "safe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	202	1	replace
908	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	202	1	replace
909	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Object.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Object.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  Object.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	180	None	replace
910	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  c,  Class.class);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  c,  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  c,  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	180	None	replace
911	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null,  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	180	None	replace
912	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none ",  null);	  final    Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	51	None	replace
913	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	97	None	replace
914	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	97	None	replace
915	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	76	None	replace
916	[BUG]  [BUGGY]  final  Field  f  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getFactoryId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getFactoryId();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
917	[BUG]  [BUGGY]  final  Field  f  =  getConstructorFactory();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getConstructorFactory();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorFactory();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
918	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "java.misc.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "java.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "java.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	143	None	replace
919	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(unsafe);  [CE]  cannot  find  symbol  unsafe  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(unsafe);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(unsafe);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol  unsafe	159	None	replace
920	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_   ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	164	None	replace
921	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	117	None	replace
922	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ",  null);  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ",  null);  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "null ",  null);  final  Field  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	117	None	replace
923	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "unsafe ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
924	[BUG]  [BUGGY]  Object  f  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getFactoryId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getFactoryId();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
925	[BUG]  [BUGGY]  Object  f  =  getConstructorId().getObject();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().getObject();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().getObject();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
926	[BUG]  [BUGGY]  Object  f  =  getFactory();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getFactory();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getFactory();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
927	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
928	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	185	None	replace
929	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  unsafeClass);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	27	None	replace
930	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	27	None	replace
931	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField(null   ");  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField(null   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField(null   ");	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
932	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  newInstance	150	None	replace
933	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "class ");  f  =  unsafeClass.getDeclaredField( "class ");  }  [CE]  cannot  find  symbol  f  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "class ");  f  =  unsafeClass.getDeclaredField( "class ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "class ");  f  =  unsafeClass.getDeclaredField( "class ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol  f	169	None	replace
934	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "class ");  f  =  unsafeClass.getDeclaredField( "class ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "class ");  f  =  unsafeClass.getDeclaredField( "class ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "class ");  f  =  unsafeClass.getDeclaredField( "class ");  }  else  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	169	None	replace
935	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  System.identityHashCode(c));  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  System.identityHashCode(c));  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  System.identityHashCode(c));	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    c);    	non-compiled	[CE]  cannot  find  symbol  c	216	None	replace
936	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
937	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	152	None	replace
938	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ".class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ".class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    	non-compiled	[CE]  <identifier>  expected	152	None	replace
939	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
940	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
941	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	85	None	add
942	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	85	None	add
943	[BUG]  [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  <?>  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Field    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
944	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null,  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null,  null  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null,  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    new    Class[]    {    null    }    );    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
945	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  },  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    new    Class[]    {    null    }    );    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
946	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
947	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
948	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  c,  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  c,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  c,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	188	None	replace
949	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  c);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	120	None	replace
950	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	120	None	replace
951	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  newInstance,  null);  [CE]  cannot  find  symbol  newInstance  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  newInstance,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  newInstance,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	120	None	replace
952	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	148	None	replace
953	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	95	None	replace
954	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ",  false);	  final    Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	95	None	replace
955	[BUG]  [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	UnsafeAllocator  f  =  unsafeClass.getDeclaredField( "null ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  incompatible  types	118	None	replace
956	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".);	  	non-compiled	[CE]  <identifier>  expected	75	None	add
957	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.misc.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	81	None	add
958	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ".);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
959	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ".);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
960	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ".);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ".);  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ".);  }	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ".);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
961	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(unsafe,  c);  [CE]  cannot  find  symbol  unsafe  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(unsafe,  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(unsafe,  c);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol  unsafe	211	None	replace
962	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	28	None	add
963	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	28	None	add
964	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
965	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
966	[BUG]  [BUGGY]  final  String  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  String  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  String  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	174	None	replace
967	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	4	None	replace
968	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	32	None	add
969	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
970	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	add
971	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c,  false);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ",  c,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  c	123	None	replace
972	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Method  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance     ");  Method  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    Method  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	add
973	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(org.misc.Unsafe   ");  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(org.misc.Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField(org.misc.Unsafe   ");	  	non-compiled	[CE]  unclosed  string  literal	30	None	add
974	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	add
975	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "java.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	26	1	replace
976	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	26	1	replace
977	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "java.misc.Unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "java.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	26	None	replace
978	[BUG]  [BUGGY]  Object  f  =  f.getDeclaredField( "null ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  f.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  f.getDeclaredField( "null ");	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
979	[BUG]  [BUGGY]  Object  f  =  c.getDeclaredField( "null ");  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  c.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  c.getDeclaredField( "null ");	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol  c	96	None	replace
980	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none "),  null;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none "),  null;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none "),  null;	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  <identifier>  expected	137	None	replace
981	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  safeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  safeClass.getDeclaredField( "class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  safeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	77	None	add
982	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField('class   ");  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField('class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  unsafeClass.getDeclaredField('class   ");	  	non-compiled	[CE]  unclosed  character  literal	77	None	add
983	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
984	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
985	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
986	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  safeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	add
987	[BUG]  [BUGGY]  Object  f  =  declaration.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  declaration  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  declaration.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  declaration.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  declaration	101	None	replace
988	[BUG]  [BUGGY]  Object  f  =  declaredInstance.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  declaredInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  declaredInstance.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  declaredInstance.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  declaredInstance	101	None	replace
989	[BUG]  [BUGGY]  Object  f  =  f.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  f.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  f.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
990	[BUG]  [BUGGY]  Object  f  =  definition.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  definition  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  definition.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  definition.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  definition	101	None	replace
991	[BUG]  [BUGGY]  Object  f  =  declaredClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  declaredClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  declaredClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  declaredClass.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  declaredClass	101	None	replace
992	[BUG]  [BUGGY]  Object  f  =  f.get(null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  f.get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  f.get(null);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
993	[BUG]  [BUGGY]  Object  f  =  this.safeClass.get(null);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  this.safeClass.get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  this.safeClass.get(null);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	41	None	replace
994	[BUG]  [BUGGY]  Object  f  =  null.get(unsafeClass);  [CE]  <null>  cannot  be  dereferenced  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  null.get(unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  null.get(unsafeClass);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	41	None	replace
995	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	8	None	replace
996	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Method  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  Method  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    Method  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
997	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafeClass   ");  f  =  unsafeClass.getDeclaredField( "unsafeClass   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    f  =  unsafeClass.getDeclaredField( "unsafeClass   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	87	None	add
998	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Object    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
999	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "superclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "superclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
1001	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "superclass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "superclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "superclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
1002	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeclass ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeclass ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safeclass ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	184	None	replace
1003	[BUG]  [BUGGY]  Object  f  =  f.getDeclaredField( "this.unsafe ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  f.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  f.getDeclaredField( "this.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
1004	[BUG]  [BUGGY]  Object  f  =  this.unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  this.unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  this.unsafeClass.getDeclaredField( "this.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	49	None	replace
1005	[BUG]  [BUGGY]  Object  f  =  c.getDeclaredField( "this.unsafe ");  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  c.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  c.getDeclaredField( "this.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  c	49	None	replace
1006	[BUG]  [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  String  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	String  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Field    f    =    unsafeClass.getDeclaredField(   ".class       ");    	non-compiled	[CE]  incompatible  types	71	None	replace
1007	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	122	None	replace
1008	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	122	None	replace
1009	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	121	None	add
1010	[BUG]  [BUGGY]  Class  <?>  f  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getFactoryId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getFactoryId();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1011	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId()  +  unsafeClass.getName();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId()  +  unsafeClass.getName();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId()  +  unsafeClass.getName();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1012	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	125	None	replace
1013	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	125	None	replace
1014	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	80	None	replace
1015	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  newInstance);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	140	None	replace
1016	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  Object.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  Object.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  Object.class);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	140	None	replace
1017	[BUG]  [BUGGY]  Object  f  =  f.getDeclaredField( "class ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  f.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  f.getDeclaredField( "class ");	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1018	[BUG]  [BUGGY]  Object  f  =  c.getDeclaredField( "class ");  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  c.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  c.getDeclaredField( "class ");	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol  c	79	None	replace
1019	[BUG]  [BUGGY]  Object  f  =  safeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  safeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  safeClass.getDeclaredField( "class ");	  Object    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	79	None	replace
1020	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	163	None	add
1021	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_   ");  f  =  unsafeClass.getDeclaredField( "unsafe_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_   ");    f  =  unsafeClass.getDeclaredField( "unsafe_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	163	None	add
1022	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeFunction ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeFunction ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
1023	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeFunction ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeFunction ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeFunction ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
1024	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "isUnsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  safeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	65	None	replace
1025	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Method  f  =  unsafeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
1026	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.   ");    Field  f  =  safeClass.getDeclaredField( "unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	186	None	add
1027	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	162	None	replace
1028	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe   ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe   ",  c,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe   ",  c,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	162	None	replace
1029	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
1030	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Method  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Method  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    Method  f  =  unsafeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
1031	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Field  f  =  safeClass.getDeclaredField( "declareInstance_   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstance_   ");  Field  f  =  safeClass.getDeclaredField( "declareInstance_   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    Field  f  =  safeClass.getDeclaredField( "declareInstance_   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	199	None	add
1032	[BUG]  [BUGGY]  Field  f  =  this.safeClass.getDeclaredField( "declaration.unsafe ");  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  this.safeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  this.safeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	179	None	replace
1033	[BUG]  [BUGGY]  Field  f  =  sanitationClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  sanitationClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  sanitationClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  sanitationClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  sanitationClass	179	None	replace
1034	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	205	None	add
1035	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "safe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
1036	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
1037	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)hibernate.create();  [CE]  cannot  find  symbol  hibernate  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)hibernate.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)hibernate.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  hibernate	212	None	replace
1038	[BUG]  [BUGGY]  final  Field  f  =  this.unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  this.unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  this.unsafeClass.getDeclaredField( "this.unsafe ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	46	None	replace
1039	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  c,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  c,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	89	None	replace
1040	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	53	None	replace
1041	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "UnsafeAllocator ");  [CE]  cannot  find  symbol  safeClass  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	53	None	replace
1042	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	53	None	replace
1043	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  false,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	215	None	replace
1044	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Method  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Method  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
1045	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  safeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Field  f  =  safeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
1046	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
1047	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
1048	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ".);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	201	None	add
1049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	86	1	replace
1050	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafeclass ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	86	1	replace
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "com.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1052	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.UnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1053	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe   ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe   ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	161	None	replace
1054	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	139	None	replace
1055	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	139	None	replace
1056	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "noneInstance ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	139	None	replace
1057	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	160	None	add
1058	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
1059	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
1060	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
1061	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  Class.class);	  final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	134	None	replace
1062	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().loadClass(null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().loadClass(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().loadClass(null);	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
1063	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().invoke(null,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().invoke(null,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().invoke(null,  unsafeClass);	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
1064	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().findClass(null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().findClass(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().findClass(null);	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
1065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	204	1	replace
1066	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class. ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	204	1	replace
1067	[BUG]  [BUGGY]  Class  <?>  f  =  c.getReturnType();  [CE]  cannot  find  symbol  c  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  c.getReturnType();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  c.getReturnType();	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol  c	44	None	replace
1068	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getReturnType(null);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getReturnType(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getReturnType(null);	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
1069	[BUG]  [BUGGY]  Class  <?>  f  =  safeClass.getReturnType();  [CE]  cannot  find  symbol  safeClass  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  safeClass.getReturnType();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  safeClass.getReturnType();	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol  safeClass	44	None	replace
1070	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getFullName();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getFullName();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getFullName();	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
1071	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  Field  f  =  unsafeClass.getDeclaredField(null ");  }  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  Field  f  =  unsafeClass.getDeclaredField(null ");  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  Field  f  =  unsafeClass.getDeclaredField(null ");  }	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Field    f    =    unsafeClass.getDeclaredField(null       ");    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
1072	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  Field  f  =  unsafeClass.getDeclaredField(null ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  Field  f  =  unsafeClass.getDeclaredField(null ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "null ");  Field  f  =  unsafeClass.getDeclaredField(null ");  }  else  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Field    f    =    unsafeClass.getDeclaredField(null       ");    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
1073	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Method  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe-class   ");  Method  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe-class   ");    Method  f  =  unsafeClass.getDeclaredField( "unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	add
1074	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  safeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
1075	[BUG]  [BUGGY]  Unsafe  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Unsafe  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Unsafe  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
1076	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	31	None	replace
1077	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe_Class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe_Class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
1078	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe_Class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe_Class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
1079	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
1080	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
1081	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(null,  Unsafe.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().invoke(null,  Unsafe.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(null,  Unsafe.class);	  Object    f    =    getConstructorId().invoke(null,    c);    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
1082	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	185	None	replace
1083	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none, ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none, ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none, ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	185	None	replace
1084	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
1085	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  Class.class),  unsafeClass);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  Class.class),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  Class.class),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ",    Class.class);    	non-compiled	[CE]  	180	None	replace
1086	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c,  false);  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    false);    	non-compiled	[CE]  cannot  find  symbol  c	173	None	replace
1087	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	173	None	replace
1088	[BUG]  [BUGGY]  final  String  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  String  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  String  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  incompatible  types	131	None	replace
1089	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ".class);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	replace
1090	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "safeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
1091	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	74	1	replace
1092	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafeAllocator   ");    Field  f  =  unsafeClass.getDeclaredField( ".isUnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	73	None	add
1093	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1094	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "declareUnsafeAllocator ");  [CE]  cannot  find  symbol  safeClass  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "declareUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "declareUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	122	None	replace
1095	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "deserializeUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "deserializeUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
1096	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "deserializeUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "deserializeUnsafeAllocator ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "deserializeUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
1097	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	89	None	replace
1098	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe. ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	89	None	replace
1099	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance());  [CE]  method  newInstance  in  class  UnsafeAllocator  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  newInstance());	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ");    	non-compiled	[CE]  method  newInstance  in  class  UnsafeAllocator  cannot  be  applied  to  given  types;	127	None	replace
1100	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	161	None	replace
1101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1102	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe_class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	161	1	replace
1103	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ",  Class.class);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ",  Class.class);	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	81	None	add
1104	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null),  unsafeClass);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    null);    	non-compiled	[CE]  	34	None	replace
1105	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	195	None	replace
1106	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getClass());  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".getClass());	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    final    Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	111	None	replace
1107	[BUG]  [BUGGY]  Object  f  =  safeClass.getDeclaredField( "isUnsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  safeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  safeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "isUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	67	None	replace
1108	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.class   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	135	None	add
1109	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ".class);    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
1110	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	144	None	add
1111	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  incompatible  types	2	None	replace
1112	[BUG]  [BUGGY]  Field  f  =  c.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  c.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  c.getDeclaredField( "declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  c	179	None	replace
1113	[BUG]  [BUGGY]  Field  f  =  declaredInstance.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  declaredInstance  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  declaredInstance.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  declaredInstance.getDeclaredField( "declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  declaredInstance	179	None	replace
1114	[BUG]  [BUGGY]  Field  f  =  declaration.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  declaration  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  declaration.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  declaration.getDeclaredField( "declaration.unsafe ");	  Field    f    =    safeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  declaration	179	None	replace
1115	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	80	None	replace
1116	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  class);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class,  class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1117	[BUG]  [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Field    f    =    unsafeClass.getDeclaredField(   ".null   ");    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1118	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance_   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	200	None	replace
1119	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  f	157	None	replace
1120	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Object.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Object.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Object.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance       ",    c);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	216	None	replace
1121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "Unsafe   ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	76	1	replace
1122	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "Unsafe   ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "Unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "Unsafe   ");	  final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	76	1	replace
1123	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  f  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  getConstructorId();  return  new  UnsafeAllocator();  }	  f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol  f	39	None	replace
1124	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null, ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null, ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null, ");	  Object    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1125	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".getDeclaredField( "isUnsafe ");  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".getDeclaredField( "isUnsafe ");	  	non-compiled	[CE]  	75	None	add
1126	[BUG]  [BUGGY]  Object  f  =  createConstructorId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  createConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  createConstructorId();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1127	[BUG]  [BUGGY]  Object  f  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  findConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  findConstructorId();	  Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1128	[BUG]  [BUGGY]  Class  <  T>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <  T>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <  T>  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Class    f    =    unsafeClass.getDeclaredField(   "class       ");    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1129	[BUG]  [BUGGY]  Object  f  =  unsafeClass!=  null?  unsafeClass.getConstructorId()  :  Integer.valueOf(unsafeClass.getConstructorId());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass!=  null?  unsafeClass.getConstructorId()  :  Integer.valueOf(unsafeClass.getConstructorId());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass!=  null?  unsafeClass.getConstructorId()  :  Integer.valueOf(unsafeClass.getConstructorId());	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1130	[BUG]  [BUGGY]  Object  f  =  unsafeClass!=  null?  unsafeClass.getConstructorId()  :  unsafeClass.getConstructorId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass!=  null?  unsafeClass.getConstructorId()  :  unsafeClass.getConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass!=  null?  unsafeClass.getConstructorId()  :  unsafeClass.getConstructorId();	  Object    f    =    unsafeClass.getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1131	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  incompatible  types	129	None	replace
1132	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	92	None	replace
1133	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  incompatible  types	92	None	replace
1134	[BUG]  [BUGGY]  Class  <  T>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <  T>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <  T>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "java.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1136	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.class   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
1137	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	208	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "safeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	88	1	replace
1139	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	88	1	replace
1140	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "unsafeClass ");  [CE]  cannot  find  symbol  safeClass  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	88	None	replace
1141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "safe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
1142	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "safeclass   ");    	compilable	  [FE]  AssertionFailedError  	184	1	replace
1143	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Object  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Object  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    Object  f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
1144	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Method  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareInstances   ");  Method  f  =  unsafeClass.getDeclaredField( "declareInstances   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareInstances   ");    Method  f  =  unsafeClass.getDeclaredField( "declareInstances   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	add
1145	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "java.util.ArrayList ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "java.util.ArrayList ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "java.util.ArrayList ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1146	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	130	None	replace
1147	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "misc.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	29	None	replace
1148	[BUG]  [BUGGY]  Object  f  =  c.get(null);  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  c.get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  c.get(null);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol  c	41	None	replace
1149	[BUG]  [BUGGY]  Object  f  =  fs.get(null);  [CE]  cannot  find  symbol  fs  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  fs.get(null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  fs.get(null);	  Object    f    =    unsafeClass.get(null);    	non-compiled	[CE]  cannot  find  symbol  fs	41	None	replace
1150	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
1151	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
1152	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "UnsafeAllocator   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "UnsafeAllocator   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	52	None	add
1153	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	147	1	replace
1155	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	147	1	replace
1156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "noneInstance. ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
1157	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "noneInstance. ");	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
1158	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "noneInstance   ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "noneInstance   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	139	None	replace
1159	[BUG]  [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declaration.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".declaration.unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
1160	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
1161	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe.   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe.   ");  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe.   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe.   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	190	None	add
1162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "class. ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Field    f    =    unsafeClass.getDeclaredField(   ".class       ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
1163	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class. ");	  Field    f    =    unsafeClass.getDeclaredField(       "class       ");    Field    f    =    unsafeClass.getDeclaredField(   ".class       ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
1164	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null),  unsafeClass);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  	100	None	replace
1165	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	100	None	replace
1166	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass);	  final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	46	None	replace
1167	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Object.class,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Object.class,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  Object.class,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    c,    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	16	None	replace
1168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.js ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.js ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	204	1	replace
1169	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.js ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.js ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.js ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	204	1	replace
1170	[BUG]  [BUGGY]  Class  <  T>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <  T>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <  T>  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(       "null       ");    Class    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1171	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  Class.class);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe.class   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  Class.class);	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	205	None	add
1172	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false);	  final    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	125	None	replace
1173	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId().getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getConstructorId().getDeclaredFields();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorId().getDeclaredFields();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1174	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId().getDeclaredField( "foo ");  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getConstructorId().getDeclaredField( "foo ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorId().getDeclaredField( "foo ");	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1175	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId().getFunction();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  getConstructorId().getFunction();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorId().getFunction();	  final    Field    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1176	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().computeClass(c);  [CE]  cannot  find  symbol  c  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().computeClass(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().computeClass(c);	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol  c	210	None	replace
1177	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().withUTC();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().withUTC();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().withUTC();	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
1178	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().loadClass(c);  [CE]  cannot  find  symbol  c  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getConstructorId().loadClass(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().loadClass(c);	  Class    <?>    f    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol  c	210	None	replace
1179	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass()!=  null;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass()!=  null;  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getRawClass()  ||  unsafeClass.getRawClass()!=  null;	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1180	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.findRawClass();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.findRawClass();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.findRawClass();	  Class    <?>    f    =    unsafeClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1181	[BUG]  [BUGGY]  Constructor  <  T>  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Constructor  <  T>  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Constructor  <  T>  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Field    f    =    unsafeClass.getDeclaredField(   "none       ");    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1182	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe, ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe, ",  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe, ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe       ",    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	188	None	replace
1183	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe, ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
1184	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c,  false);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  c,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ",    false);    	non-compiled	[CE]  cannot  find  symbol  c	48	None	replace
1185	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  incompatible  types	20	None	replace
1186	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe, ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	102	None	replace
1187	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	162	None	replace
1188	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	162	None	replace
1189	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1190	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	112	None	replace
1191	[BUG]  [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafeClass  =  unsafeClass.getDeclaredField( "unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafeClass  =  unsafeClass.getDeclaredField( "unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	112	None	replace
1192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe.   ");    	compilable	  [FE]  AssertionFailedError  	198	1	replace
1193	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe.   ");    	compilable	  [FE]  AssertionFailedError  	198	1	replace
1194	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  c);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ",  c);	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol  c	78	None	replace
1195	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  new  Class[]  {  c  }  );  [CE]  cannot  find  symbol  c  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ",  new  Class[]  {  c  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ",  new  Class[]  {  c  }  );	  final    Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol  c	78	None	replace
1196	[BUG]  [BUGGY]  Object  f  =  getConstructorId(UnsafeClass.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId(UnsafeClass.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(UnsafeClass.class);	  Object    f    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaredInstance.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declaredInstance.class ");	  Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	84	1	replace
1198	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaredInstance.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaredInstance.class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaredInstance.class ");	  Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	84	1	replace
1199	[BUG]  [BUGGY]  Object  unsafe  =  unsafeClass.getDeclaredField( "isUnsafe ");  [CE]  cannot  find  symbol  f  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafe  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafe  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "isUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ".);    	non-compiled	[CE]  cannot  find  symbol  f	141	None	replace
1200	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "none ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "none ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "none ",  null);	  Field    f    =    unsafeClass.getDeclaredField(       "none       ");    Object    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	181	None	replace
1201	[BUG]  [BUGGY]  Node  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Node  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Node  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1202	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	57	None	replace
1203	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	194	None	replace
1204	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getRawClass(),  unsafeClass);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getRawClass(),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getRawClass(),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1205	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  new  Class[]  {  unsafeClass  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  new  Class[]  {  unsafeClass  }  );  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  new  Class[]  {  unsafeClass  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe       ",    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	150	None	replace
1206	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafeClass   ");    	non-compiled	[CE]  incompatible  types	196	None	replace
1207	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe_class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	35	None	add
1208	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe_class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe_class   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe_class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe_class   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe_class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	35	None	add
1209	[BUG]  [BUGGY]  final  Object  f  =  getConstructorId(unsafeClass);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  getConstructorId(unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorId(unsafeClass);	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1210	[BUG]  [BUGGY]  final  Object  f  =  createConstructorId();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  createConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  createConstructorId();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1211	[BUG]  [BUGGY]  final  Object  f  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Object  f  =  findConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  findConstructorId();	  final    Object    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1212	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	add
1213	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
1214	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( ",this.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	151	None	add
1215	[BUG]  [BUGGY]  Object  f  =  c.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  c.getDeclaredField( "declaration.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  c.getDeclaredField( "declaration.unsafe ");	  Object    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  c	101	None	replace
1216	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)c.create();  [CE]  cannot  find  symbol  c  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =(Class  <?>)c.create();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)c.create();	  Class    <?>    f    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  c	212	None	replace
1217	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	if(unsafeClass!=  null)  {  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  }  else  {  return  new  UnsafeAllocator();  }	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	148	None	replace
1218	[BUG]  [BUGGY]  Object  unsafe  =  unsafeClass.getDeclaredField( "unsafe ");  [CE]  cannot  find  symbol  f  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  unsafe  =  unsafeClass.getDeclaredField( "unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  unsafe  =  unsafeClass.getDeclaredField( "unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ".);    	non-compiled	[CE]  cannot  find  symbol  f	148	None	replace
1219	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	123	None	replace
1220	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ",    false);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	37	None	replace
1221	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
1222	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ",  null);	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	201	None	add
1223	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "org.misc.Unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	30	None	add
1224	[BUG]  [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "sun.misc.Unsafe       ");    Class    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  incompatible  types	8	None	replace
1225	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  incompatible  types	213	None	replace
1226	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe ".getRawClass());	  Field    f    =    unsafeClass.getDeclaredField(       "unsafe       ");    Class    <?>    f    =    unsafeClass.getDeclaredField(   "unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
1227	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	14	None	replace
1228	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  builder);  [CE]  cannot  find  symbol  builder  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  builder);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  builder);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  builder	14	None	replace
1229	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass,  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null,    unsafeClass);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	14	None	replace
1230	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null),  unsafeClass);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null),  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null),  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ",    null);    	non-compiled	[CE]  	27	None	replace
1231	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getRawClass());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getRawClass());  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".getRawClass());	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1232	[BUG]  [BUGGY]  Class  <?>  f  =  getCurrentConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  getCurrentConstructorId();  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getCurrentConstructorId();	  Class    <?>    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1233	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(null,  safeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(null,  safeClass);	  Object    f    =    getConstructorId().get(null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	159	None	replace
1234	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  Class.class);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  Class.class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final    Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  Class.class);	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	133	None	add
1235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
1236	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe.Class ");	  Field    f    =    unsafeClass.getDeclaredField(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	145	1	replace
1237	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.findSuperclass( "sun.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.findSuperclass( "sun.misc.Unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.findSuperclass( "sun.misc.Unsafe ");	  Class    <?>    f    =    unsafeClass.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1238	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe, ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe, ",  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe, ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	120	None	replace
1239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
1240	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe_class ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
1241	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  false);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe.class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	206	None	replace
1242	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getReturnType(c);  [CE]  cannot  find  symbol  c  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getReturnType(c);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getReturnType(c);	  Class    <?>    f    =    unsafeClass.getReturnType();    	non-compiled	[CE]  cannot  find  symbol  c	44	None	replace
1243	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  unsafeClass);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	140	None	replace
1244	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  class);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  class);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class,  class);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
1245	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
1246	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe-class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe-class   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	207	None	add
1247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".this.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	60	1	replace
1248	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.this.unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.this.unsafe ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(       "this.unsafe       ");    Field    f    =    unsafeClass.getDeclaredField(   ".this.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	60	1	replace
1249	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none "),  null);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none "),  null);  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none "),  null);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ",    null);    	non-compiled	[CE]  <identifier>  expected	137	None	replace
1250	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(       "declareUnsafe       ");    Object    f    =    unsafeClass.getDeclaredField(   "declareUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1251	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Object  f  =  unsafeClass.getDeclaredField( ".class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   ".class   ");  Object  f  =  unsafeClass.getDeclaredField( ".class   ");  [BUGGY]      f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   ".class   ");    Object  f  =  unsafeClass.getDeclaredField( ".class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	83	None	add
