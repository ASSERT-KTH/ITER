bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
2	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
3	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
4	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
5	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
6	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
7	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
8	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
9	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".sun.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
10	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
11	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ".class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
12	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
13	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
14	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
15	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
16	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  c,  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  c,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
17	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  }  );  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  }  );  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  new  Class[]  {  null  }  );	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
18	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
19	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
20	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
21	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
22	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	23	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
24	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
26	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
27	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	2	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
29	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
31	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
33	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
34	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	6	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
36	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
37	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	6	None	replace
38	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =  unsafeClass.getRawClass();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
39	[BUG]  [BUGGY]  f.setAccessible(true);  [CE]  cannot  find  symbol  f  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  f.setAccessible(true);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	f.setAccessible(true);	      	non-compiled	[CE]  cannot  find  symbol  f	13	None	replace
40	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getConstructorId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  unsafeClass.getConstructorId();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
41	[BUG]  [BUGGY]  Object  f  =  unsafeClass.get(null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  unsafeClass.get(null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.get(null);	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
42	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getSuperclass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =  unsafeClass.getSuperclass();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getSuperclass();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
43	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)null;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =(Class  <?>)null;  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)null;	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getReturnType();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =  unsafeClass.getReturnType();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  unsafeClass.getReturnType();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	22	1	replace
46	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	22	1	replace
47	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	22	None	replace
48	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	22	None	replace
49	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "this.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
51	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "none ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
53	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "UnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
55	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
57	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.none ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
58	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	add
59	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	add
60	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	add
61	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	add
62	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	add
63	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
64	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
65	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
66	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".isUnsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
67	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
68	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Field  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Field  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    Field  f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
69	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Class  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Class  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    Class  f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
70	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  final  Field  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    final  Field  f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
71	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Field  f  =  unsafeClass.getDeclaredField( ".class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Field  f  =  unsafeClass.getDeclaredField( ".class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    Field  f  =  unsafeClass.getDeclaredField( ".class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
72	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Object  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Object  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    Object  f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
74	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "isUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
76	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
78	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
79	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
80	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	4	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
82	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.misc.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( ".class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
84	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( ".class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( ".class ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
86	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
88	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
89	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	8	None	replace
90	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	19	None	add
91	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	19	None	add
92	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	19	None	add
93	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	19	None	add
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
95	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
96	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "null ");	  Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
97	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	20	1	replace
99	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	20	1	replace
100	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	20	None	replace
101	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
102	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	20	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	20	1	replace
104	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	20	1	replace
105	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Field  f  =  unsafeClass.getDeclaredField( "none   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Field  f  =  unsafeClass.getDeclaredField( "none   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "none   ");    Field  f  =  unsafeClass.getDeclaredField( "none   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	14	None	add
106	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Class  f  =  unsafeClass.getDeclaredField( "none   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Class  f  =  unsafeClass.getDeclaredField( "none   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "none   ");    Class  f  =  unsafeClass.getDeclaredField( "none   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	14	None	add
107	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Field  f  =  unsafeClass.getDeclaredField( ".none ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "none   ");    Field  f  =  unsafeClass.getDeclaredField( ".none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	14	None	add
108	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  final  Field  f  =  unsafeClass.getDeclaredField( "none   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "none   ");    final  Field  f  =  unsafeClass.getDeclaredField( "none   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	14	None	add
109	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	7	None	add
110	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	7	None	add
111	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	7	None	add
112	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	7	None	add
113	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	7	None	add
114	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Field  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    Field  f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
115	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Field  f  =  unsafeClass.getDeclaredField( ".null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    Field  f  =  unsafeClass.getDeclaredField( ".null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
116	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Class  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Class  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    Class  f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
117	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  final  Field  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    final  Field  f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
118	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
119	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Object  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Object  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    Object  f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
120	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
122	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafeAllocator ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
123	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
125	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
127	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
128	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	16	None	add
129	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Class  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    Class  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	16	None	add
130	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	16	None	add
131	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	16	None	add
132	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    Object  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	16	None	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
134	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
136	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
137	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
139	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "noneInstance ");	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
140	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
141	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "isUnsafe ".);	  	non-compiled	[CE]  <identifier>  expected	9	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
143	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "java.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
145	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "org.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
147	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
148	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafe ".);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	7	None	add
149	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ".class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
150	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe   ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	22	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	22	1	replace
152	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	22	1	replace
153	[BUG]  [BUGGY]  Object  f  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  getConstructorId();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
154	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =  getConstructorId();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
155	[BUG]  [BUGGY]  Object  f  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  getConstructorId(null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId(null);	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
156	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Field  f  =  getConstructorId();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Field  f  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
157	[BUG]  [BUGGY]  f.setAccessible(false);  [CE]  cannot  find  symbol  f  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  f.setAccessible(false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	f.setAccessible(false);	      	non-compiled	[CE]  cannot  find  symbol  f	13	None	replace
158	[BUG]  [BUGGY]  final  Object  f  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  final  Object  f  =  getConstructorId();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	final  Object  f  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
159	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(null);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  getConstructorId().get(null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().get(null);	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
161	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "com.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
162	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	24	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
164	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
165	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  c);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
166	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  safeClass);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null,  safeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	18	None	replace
167	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  newInstance);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  newInstance);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	18	None	replace
168	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  this,  null);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  this,  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  this,  null);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	18	None	replace
169	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
170	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  null);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  null);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	4	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
172	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstances ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
173	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
174	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    final  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	19	None	add
175	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declareUnsafe   ");  f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    f  =  unsafeClass.getDeclaredField( "declareUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	16	None	add
176	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Field  f  =  unsafeClass.getDeclaredField(null   ");  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  Field  f  =  unsafeClass.getDeclaredField(null   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    Field  f  =  unsafeClass.getDeclaredField(null   ");	  	non-compiled	[CE]  unclosed  string  literal	11	None	add
177	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "null   ");  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "null   ");    f  =  unsafeClass.getDeclaredField( "null ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
178	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  c	20	None	replace
179	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  safeClass.getDeclaredField( "declaration.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  safeClass.getDeclaredField( "declaration.unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	20	None	replace
180	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  Class.class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declaration.unsafe   ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	20	None	replace
181	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Object  f  =  unsafeClass.getDeclaredField( "none ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "none   ");  Object  f  =  unsafeClass.getDeclaredField( "none ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "none   ");    Object  f  =  unsafeClass.getDeclaredField( "none ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	14	None	add
182	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  c);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "class ",  c);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "class ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	non-compiled	[CE]  cannot  find  symbol  c	4	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
184	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "safeclass ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "safeclass ");	  Field    f    =    unsafeClass.getDeclaredField(   "class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
185	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "none ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "none   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	15	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
187	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
188	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  unsafeClass);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  unsafeClass);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe   ",  unsafeClass);	  Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	8	None	replace
189	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.unsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	5	None	add
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	22	1	replace
191	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	22	1	replace
192	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "this.unsafe ",  Class.class);	  Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	22	None	replace
193	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "class   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "class   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "class   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "class   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	3	None	add
194	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "org.misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
195	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "misc.Unsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
196	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "unsafeClass ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
197	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "isUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
198	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "isUnsafe   ");  Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "isUnsafe   ");    Field  f  =  unsafeClass.getDeclaredField( "isUnsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
200	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance_ ");	  Field    f    =    unsafeClass.getDeclaredField(   "declareUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
202	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "unsafe.misc.Unsafe ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
204	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe. ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
206	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe.class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	add	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
208	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "sun.unsafe-class ");	  Field    f    =    unsafeClass.getDeclaredField(   "sun.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	24	1	replace
209	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "declaration.unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "declaration.unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".declaration.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	19	None	add
210	[BUG]  [BUGGY]  Class  <?>  f  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =  getConstructorId().getRawClass();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =  getConstructorId().getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
211	[BUG]  [BUGGY]  Object  f  =  getConstructorId().invoke(null,  c);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Object  f  =  getConstructorId().invoke(null,  c);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Object  f  =  getConstructorId().invoke(null,  c);	      	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
212	[BUG]  [BUGGY]  Class  <?>  f  =(Class  <?>)super.create();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Class  <?>  f  =(Class  <?>)super.create();  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Class  <?>  f  =(Class  <?>)super.create();	      	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	13	None	replace
213	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	7	None	add
214	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "unsafe   ");  Field  f  =  unsafeClass.getDeclaredField( ".unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "unsafe   ");    Field  f  =  unsafeClass.getDeclaredField( ".unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	7	None	add
215	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "null ",  false);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "null ",  false);	  Field    f    =    unsafeClass.getDeclaredField(   "null   ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	12	None	replace
216	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c);  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field  f  =  unsafeClass.getDeclaredField( "declareInstance   ",  c);	  Field    f    =    unsafeClass.getDeclaredField(   "declareInstance   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	18	None	replace
217	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField(   "this.unsafe   ");  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]    f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	40	40	2	replace	Field    f    =    unsafeClass.getDeclaredField(   "this.unsafe   ");    Class  <?>  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	add
