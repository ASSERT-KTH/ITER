bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe;	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator()  :  unsafe;	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "))  {  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "))  {	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  cannot  find  symbol	12	None	replace
6	[BUG]  [BUGGY]  return  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator();  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator();	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]    [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	  	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	return  new  UnsafeAllocator()  {  	compilable	  [FE]  AssertionFailedError  	12	2	replace
9	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	return  new  UnsafeAllocator()  {  	compilable	  [FE]  AssertionFailedError  	12	2	replace
10	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "));  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null "));	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator(f);  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f);	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId());  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getConstructorId());	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator(unsafe);  [BUGGY]  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe);	return  new  UnsafeAllocator()  {  	non-compiled	[CE]  illegal  start  of  type	12	None	replace
