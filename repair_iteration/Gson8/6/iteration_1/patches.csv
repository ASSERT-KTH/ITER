bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  return(safe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(safe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  safe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  safe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  safe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  return(null  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(null  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
15	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  assignInstance  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	5	None	replace
16	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe)  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
17	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   "))  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
18	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafeClass)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafeClass)  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafeClass)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe))  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
20	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe,  f);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(assignInstance);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafeClass);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(assignInstance.getConstructorId());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getConstructorId());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getConstructorId());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe.getConstructorId());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getConstructorId());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getConstructorId());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getConstructorId());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getConstructorId());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  final  String  constructorId  =  f.getConstructorId();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  String  constructorId  =  f.getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getConstructorId();	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getConstructorId();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Object  unsafe  =  f.getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getConstructorId();	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  final  Field  f  =  f.getConstructorId();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Field  f  =  f.getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  f.getConstructorId();	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  allocateInstance);	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
33	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe);	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	9	3	replace
39	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	9	3	replace
40	[BUG]  [BUGGY]  return(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignmentInstance  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignmentInstance	9	None	replace
41	[BUG]  [BUGGY]  return(assignInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignInstance  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(assignInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignInstance  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	9	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
43	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
44	[BUG]  [BUGGY]  return(assigned  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assigned  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(assigned  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assigned  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assigned	9	None	replace
45	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
51	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe  ==  null)?  null  :  new  UnsafeAllocator());	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
52	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
53	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
54	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
55	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  <identifier>  expected	8	None	add
56	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  <identifier>  expected	8	None	add
57	[BUG]  [BUGGY]  return(safe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(safe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe!=  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator()  :  safe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator()  :  safe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator()  :  safe;	  return(unsafe!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  return(null!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(null!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null!=  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "null ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "null ");  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "null ");	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "null ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "null ");  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "null ");	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  c);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  c);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(null,  f);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(assignmentInstance);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance);	  return    new    UnsafeAllocator(f);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
72	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getConstructorId());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getConstructorId());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
75	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getImplicitPrototype());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getImplicitPrototype());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getImplicitPrototype());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe "))  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe "))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
78	[BUG]  [BUGGY]  return(limit  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(limit  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(limit  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class  <?>  unsafe  =  getConstructorId();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
80	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Class  <?>  unsafe  =  getConstructorId();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
81	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator  <  T>  unsafe  =  getConstructorId();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
82	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe  =  getConstructorId(null);	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
83	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe  =  getConstructorId();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
84	[BUG]  [BUGGY]  return  new  UnsafeAllocator  <  T>();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator  <  T>();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator  <  T>();	  return    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this "));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance "));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(null  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	9	3	replace
90	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	9	3	replace
91	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  if(assignmentInstance!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  final  Object  unsafe  =  f.get(null);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(null);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  c);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
97	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
98	[BUG]  [BUGGY]  return(inferred  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(inferred  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(inferred  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c))  {  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c))  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol  c	5	None	replace
100	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
101	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
102	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  ';'  expected	8	None	add
104	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
105	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class  <?>  unsafe  =  getConstructorId().getRawClass();	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
106	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getComponentType());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getComponentType());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getComponentType());	  return    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
107	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getModule());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getModule());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getModule());	  return    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
108	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe);	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
109	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getMethod());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getMethod());  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getMethod());	  return    new    UnsafeAllocator(f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
112	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  c);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  c);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
113	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  allocateInstance);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  allocateInstance);  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null "),  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe));  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
116	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);    [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]    @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
