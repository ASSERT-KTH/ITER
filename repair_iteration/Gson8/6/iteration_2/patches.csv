bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "allocateInstance "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "allocateInstance "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "allocateInstance "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
2	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "allocateInstance "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "allocateInstance "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "allocateInstance "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
3	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance "),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
4	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafeClass));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafeClass));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafeClass));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
5	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "allocateInstance ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "allocateInstance ");	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
6	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
7	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
8	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
9	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
10	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
11	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
12	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(f,  unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
13	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
14	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator(0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator(0);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator(0);	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
15	[BUG]  [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f!=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
16	[BUG]  [BUGGY]  return(assigned!=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assigned!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assigned!=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
17	[BUG]  [BUGGY]  return(null!=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null!=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
18	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe_ "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe_ "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe_ "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
19	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe_ "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe_ "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe_ "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
20	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe_ "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe_ "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe_ "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
21	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe_ "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe_ "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe_ "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
22	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_class "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_class "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_class "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
23	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
24	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
25	[BUG]  [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  not  a  statement	104	None	replace
26	[BUG]  [BUGGY]  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
27	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
28	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
29	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
30	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
31	[BUG]  [BUGGY]  return(limits  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(limits  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(limits  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(f    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  return(hudson  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(hudson  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(hudson  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(f    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "null "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
34	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "null "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
35	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "null "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
36	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "null "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
37	[BUG]  [BUGGY]  final  String  constructorId  =  f.getConstructorId()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getConstructorId()  +  1;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getConstructorId()  +  1;	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
38	[BUG]  [BUGGY]  final  int  constructorId  =  f.getConstructorId();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  int  constructorId  =  f.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  int  constructorId  =  f.getConstructorId();	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
39	[BUG]  [BUGGY]  final  Object  constructorId  =  f.getConstructorId();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  constructorId  =  f.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  constructorId  =  f.getConstructorId();	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
40	[BUG]  [BUGGY]  final  String  constructorId  =  c.getConstructorId();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  c.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  c.getConstructorId();	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
41	[BUG]  [BUGGY]  final  String  constructorId  =  f.getName();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getName();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getName();	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
42	[BUG]  [BUGGY]  final  String  constructorId  =  f.getConstructorId()  +  2;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getConstructorId()  +  2;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getConstructorId()  +  2;	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   ",  unsafe))  {  [CE]  cannot  find  symbol  assignInstance  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   ",  unsafe))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   ",  unsafe))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	19	None	replace
44	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   ",  unsafe))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   ",  unsafe))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   ",  unsafe))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
45	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   ",  unsafe))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   ",  unsafe))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   ",  unsafe))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
46	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   ",  unsafe))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   ",  unsafe))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   ",  unsafe))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
47	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  unsafe))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  unsafe))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  unsafe))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
48	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  unsafe),  allocateInstance)  {  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  unsafe),  allocateInstance)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  unsafe),  allocateInstance)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
49	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
50	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
51	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
52	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
53	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
54	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
55	[BUG]  [BUGGY]  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
56	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "sun.misc.Unsafe ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  f.getDeclaredField( "sun.misc.Unsafe ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
57	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
58	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
59	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getImplicitPrototype(),  unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getImplicitPrototype(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getImplicitPrototype(),  unsafe);	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
60	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getImplicitPrototype());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getImplicitPrototype());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getImplicitPrototype());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
61	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getImplicitPrototype());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getImplicitPrototype());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getImplicitPrototype());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
62	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getImplicitPrototype();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getImplicitPrototype();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getImplicitPrototype();	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
63	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getImplicitPrototype());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getImplicitPrototype());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getImplicitPrototype());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
64	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getImplicitPrototype());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getImplicitPrototype());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getImplicitPrototype());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
65	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  allocateInstance);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
66	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(f);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
67	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(assignInstance);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(assignInstance);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
68	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  unsafe);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
69	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  assignInstance);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  assignInstance);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
70	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe.getClass());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe.getClass());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe.getClass());	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
71	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(f,  unsafe);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
72	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    c);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
73	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   "),  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    c);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
74	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "),  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    c);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
75	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "theUnsafe   "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "theUnsafe   "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "theUnsafe   "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
76	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
77	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
78	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe "),  unsafe);	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
79	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe ",  unsafe));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theUnsafe ",  unsafe));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
80	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass.getDeclaredField( "theUnsafe   "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass.getDeclaredField( "theUnsafe   "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafeClass.getDeclaredField( "theUnsafe   "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
81	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    (unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
82	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    (unsafe!=  null)?  null  :  new  UnsafeAllocator());	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
83	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
84	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    (unsafe!=  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
85	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
86	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  <identifier>  expected	38	None	add
87	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  <identifier>  expected	38	None	add
88	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  assignInstance  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  assignInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f,    f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	77	None	replace
89	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  c.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  c.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  c.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f,    f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol  c	77	None	replace
90	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "))  {	  return    new    UnsafeAllocator(f,    f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
91	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafeClass,  allocateInstance);	  return    new    UnsafeAllocator(f,    unsafeClass);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
92	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  c);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafeClass,  c);	  return    new    UnsafeAllocator(f,    unsafeClass);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
93	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  assignInstance);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafeClass,  assignInstance);	  return    new    UnsafeAllocator(f,    unsafeClass);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
94	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  allocateInstance);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
95	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField(),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField(),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
96	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  assignInstance);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  assignInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
97	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField(),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField(),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
98	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField(),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField(),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
99	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField(),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField(),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
100	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField(),  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField(),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
101	[BUG]  [BUGGY]  return(null  ==  unsafe)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  unsafe)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  unsafe)?  new  UnsafeAllocator()  :  unsafe;	  return(null!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
102	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getModule(),  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getModule(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getModule(),  unsafe);	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
103	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getModule());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
104	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getModule());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
105	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getModule());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
106	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getModule());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
107	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getModule();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getModule();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getModule();	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
108	[BUG]  [BUGGY]  final  UnsafeAllocator  f  =  f.getModule();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  f  =  f.getModule();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  f  =  f.getModule();	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
109	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getComponentType(),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getComponentType(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getComponentType(),  unsafe);	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
110	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getComponentType());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getComponentType());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getComponentType());	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
111	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getComponentType());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getComponentType());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getComponentType());	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
112	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getComponentType());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getComponentType());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getComponentType());	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
113	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getComponentType());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getComponentType());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getComponentType());	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
114	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getComponentType();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getComponentType();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getComponentType();	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
115	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getComponentType(),  unsafeClass);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getComponentType(),  unsafeClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getComponentType(),  unsafeClass);	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assignInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	41	2	replace
117	[BUG]  [BUGGY]  return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assignInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	41	2	replace
118	[BUG]  [BUGGY]  return(removeInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  removeInstance  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(removeInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(removeInstance  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assignInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  removeInstance	41	None	replace
119	[BUG]  [BUGGY]  return(assignInstance!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignInstance  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignInstance!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignInstance!=  null)?  null  :  new  UnsafeAllocator()  {	  return(assignInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	41	None	replace
120	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null).getConstructorId();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(null).getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(null).getConstructorId();	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
121	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getConstructor();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getConstructor();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getConstructor();	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
122	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafe);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(unsafe);	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
123	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getInstance();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getInstance();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getInstance();	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
124	[BUG]  [BUGGY]  return(assigned!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assigned  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assigned!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assigned!=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assigned	39	None	replace
125	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null ",  unsafe));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "null ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
126	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null ",  unsafe));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
127	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
128	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
129	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
130	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "unsafe ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "unsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "unsafe ");	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
131	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
132	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe.getConstructorId());  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe.getConstructorId());  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe.getConstructorId());  }	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
133	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  allocateInstance.getConstructorId());	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
134	[BUG]  [BUGGY]  return  new  UnsafeAllocator(removeInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(removeInstance.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(removeInstance.getConstructorId());	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
135	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe.getConstructorId());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe.getConstructorId());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe.getConstructorId());  }  else  {  throw  new  IllegalStateException( " ");  }	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
136	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
137	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
138	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
139	[BUG]  [BUGGY]  final  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  unsafe  =  getConstructorId().getRawClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
140	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
141	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getParameterType(0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getParameterType(0);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getParameterType(0);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
142	[BUG]  [BUGGY]  final  static  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  static  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  static  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
143	[BUG]  [BUGGY]  final  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [CE]  repeated  modifier  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator()  {	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  repeated  modifier	111	None	replace
144	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule());	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
145	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "));	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
146	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe);	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
147	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "),  unsafe)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "),  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "),  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
148	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafe)  {  [CE]  cannot  find  symbol  assignInstance  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	16	None	replace
149	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  allocateInstance)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  allocateInstance)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  allocateInstance)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
150	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   "),  unsafe)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   "),  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe   "),  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
151	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  unsafe)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
152	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   "),  unsafe)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   "),  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe   "),  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
153	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  getConstructorId());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  getConstructorId());	  return    new    UnsafeAllocator(f,    allocateInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
154	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(f,    allocateInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
155	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  c.getConstructorId());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  c.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  c.getConstructorId());	  return    new    UnsafeAllocator(f,    allocateInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
156	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance,  f.getConstructorId());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance,  f.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance,  f.getConstructorId());	  return    new    UnsafeAllocator(f,    allocateInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
157	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getConstructorId());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe.getConstructorId());	  return    new    UnsafeAllocator(f,    allocateInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
158	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "allocateInstance ",  unsafe));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "allocateInstance ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "allocateInstance ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
159	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "allocateInstance   ",  unsafe));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "allocateInstance   ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "allocateInstance   ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
160	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  allocateInstance);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
161	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe,  allocateInstance));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe,  allocateInstance));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe,  allocateInstance));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
162	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe,  c));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe,  c));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe,  c));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
163	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
164	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(f);  [CE]  local  variable  f  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(f);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  local  variable  f  is  accessed  from  within  inner  class;  needs  to  be  declared  final	82	None	replace
165	[BUG]  [BUGGY]  if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
166	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
167	[BUG]  [BUGGY]  if(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
168	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  allocateInstance);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  allocateInstance);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
169	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
170	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
171	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
172	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  safe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  safe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  safe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
173	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  	79	None	replace
174	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getMethod());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getMethod());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getMethod());	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
175	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getMethod());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getMethod());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getMethod());	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
176	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getMethod());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getMethod());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getMethod());	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
177	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getMethod());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getMethod());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getMethod());	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
178	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getMethod();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getMethod();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getMethod();	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
179	[BUG]  [BUGGY]  return(hushed  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(hushed  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(hushed  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(inferred    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
180	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  unsafe));  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  unsafe));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  unsafe));  }	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
181	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   ",  unsafe));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
182	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  unsafe));  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
183	[BUG]  [BUGGY]  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ", "Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ", "Class.class);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
184	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
185	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignmentInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance,  unsafe);	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
186	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
187	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(assignmentInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
188	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  assignInstance);	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
189	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
190	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
191	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  else  {  throw  new  IllegalStateException( " ");  }	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
192	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getConstructorId());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
193	[BUG]  [BUGGY]  return(f!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f!=  null)?  new  UnsafeAllocator()  :  unsafe;	  return(safe!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
194	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
195	[BUG]  [BUGGY]  if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
196	[BUG]  [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  not  a  statement	83	None	replace
197	[BUG]  [BUGGY]  Object  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Object  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Object  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
198	[BUG]  [BUGGY]  final  Object  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
199	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
200	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
201	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule(),  unsafe);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getModule(),  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
202	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance.getModule());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
203	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f.getModule());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
204	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance.getModule());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
205	[BUG]  [BUGGY]  final  Field  f  =  unsafe.getConstructorId();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  unsafe.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  unsafe.getConstructorId();	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
206	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getConstructorId();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  unsafeClass.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  unsafeClass.getConstructorId();	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
207	[BUG]  [BUGGY]  final  Field  f  =  safe.getConstructorId();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  safe.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  safe.getConstructorId();	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
208	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  getConstructorId();	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
209	[BUG]  [BUGGY]  final  Field  f  =  c.getConstructorId();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  c.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  c.getConstructorId();	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
210	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
211	[BUG]  [BUGGY]  return(f!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
212	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f,  unsafe):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f,  unsafe):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(f,  unsafe):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
213	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
214	[BUG]  [BUGGY]  return(safe  ==  null)?  new  UnsafeAllocator()  :  safe;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  new  UnsafeAllocator()  :  safe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  new  UnsafeAllocator()  :  safe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    safe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
215	[BUG]  [BUGGY]  return(saved  ==  null)?  new  UnsafeAllocator()  :  safe;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(saved  ==  null)?  new  UnsafeAllocator()  :  safe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(saved  ==  null)?  new  UnsafeAllocator()  :  safe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    safe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
216	[BUG]  [BUGGY]  return(safe!=  null)?  new  UnsafeAllocator()  :  safe;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe!=  null)?  new  UnsafeAllocator()  :  safe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe!=  null)?  new  UnsafeAllocator()  :  safe;	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    safe;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
217	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(0);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(0);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
218	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getClass());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getClass());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getClass());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
219	[BUG]  [BUGGY]  if(assignment!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignment!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignment!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
220	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked "))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  allowSuppressWarnings( "unchecked "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	allowSuppressWarnings( "unchecked "))  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
221	[BUG]  [BUGGY]  safe!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  safe!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	safe!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	92	None	replace
222	[BUG]  [BUGGY]  allowSuppressWarnings(unsafe)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  allowSuppressWarnings(unsafe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	allowSuppressWarnings(unsafe)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
223	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked ",  unsafe)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  allowSuppressWarnings( "unchecked ",  unsafe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	allowSuppressWarnings( "unchecked ",  unsafe)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
224	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
225	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
226	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
227	[BUG]  [BUGGY]  final  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
228	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  >=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  >=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  >=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
229	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
230	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
231	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
232	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
233	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "unsafe "));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "unsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
234	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
235	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe "));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
236	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(assignmentInstance);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(assignmentInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(assignmentInstance);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
237	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(allocateInstance);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(allocateInstance);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
238	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(assignedClass);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(assignedClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(assignedClass);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
239	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(assignedInstance);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(assignedInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(assignedInstance);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
240	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(assigned);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(assigned);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(assigned);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
241	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(locateInstance);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(locateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(locateInstance);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
242	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "invalid ",  unsafe));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "invalid ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "invalid ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
243	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "invalid ",  unsafe));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "invalid ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "invalid ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
244	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe));  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe));  }	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
245	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe),  allocateInstance);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe),  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe),  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
246	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance,  unsafe);	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
247	[BUG]  [BUGGY]  if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
248	[BUG]  [BUGGY]  if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
249	[BUG]  [BUGGY]  if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assigned)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
250	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  allocateInstance);	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
251	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    c);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
252	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    c);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
253	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    c);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
254	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    c);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
255	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe,  allocateInstance);	  return    new    UnsafeAllocator(f,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
256	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance,  f);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance,  f);	  return    new    UnsafeAllocator(f,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
257	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance,  unsafe);	  return    new    UnsafeAllocator(f,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
258	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "constructorId ");	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
259	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "structorId ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "structorId ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "structorId ");	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
260	[BUG]  [BUGGY]  final  Object  constructorId  =  f.getDeclaredField( "null ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  constructorId  =  f.getDeclaredField( "null ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  constructorId  =  f.getDeclaredField( "null ");	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
261	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "buildConstructorId ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "buildConstructorId ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "buildConstructorId ");	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
262	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ",  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ",  null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "constructorId ",  null);	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
263	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ",  unsafe);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ",  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "constructorId ",  unsafe);	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
264	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
265	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  Class.class);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
266	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ");	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
267	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ");  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ");	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
268	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ");  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ");	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
269	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f,  allocateInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f,  allocateInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f,  allocateInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(null,    f.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
270	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  n.getDeclaredField( "unsafe "))  {  [CE]  cannot  find  symbol  n  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  n.getDeclaredField( "unsafe "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  n.getDeclaredField( "unsafe "))  {	  return    new    UnsafeAllocator(null,    f.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  n	17	None	replace
271	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  null.getDeclaredField( "unsafe "))  {  [CE]  <null>  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  null.getDeclaredField( "unsafe "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  null.getDeclaredField( "unsafe "))  {	  return    new    UnsafeAllocator(null,    f.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	17	None	replace
272	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  allocateInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  allocateInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  allocateInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(null,    f.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
273	[BUG]  [BUGGY]  return(assigned  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assigned  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assigned  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
274	[BUG]  [BUGGY]  return(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignmentInstance  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
275	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
276	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getConstructorId());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getConstructorId());	  return    new    UnsafeAllocator(unsafe,    f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
277	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(unsafe,    f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
278	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "),  unsafeClass)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "),  unsafeClass)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe   "),  unsafeClass)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
279	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafeClass.getDeclaredField( "unsafe   "),  f)  {  [CE]  constructor  UnsafeAllocator  in  class  UnsafeAllocator  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafeClass.getDeclaredField( "unsafe   "),  f)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafeClass.getDeclaredField( "unsafe   "),  f)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  constructor  UnsafeAllocator  in  class  UnsafeAllocator  cannot  be  applied  to  given  types;	18	None	replace
280	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafeClass,  allocateInstance)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafeClass,  allocateInstance)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafeClass,  allocateInstance)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
281	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafeClass)  {  [CE]  cannot  find  symbol  assignInstance  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafeClass)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe   "),  unsafeClass)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	18	None	replace
282	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafeClass))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafeClass))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafeClass))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
283	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  unsafeClass)  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  unsafeClass)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  unsafeClass)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
284	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafeClass,  c)  {  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafeClass,  c)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafeClass,  c)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
285	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
286	[BUG]  [BUGGY]  return(safe  ==  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
287	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
288	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  safe;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  safe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeInstance()  :  safe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
289	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe.instance;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe.instance;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe.instance;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
290	[BUG]  [BUGGY]  return(null  ==  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
291	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  unsafe.getDeclaredField( "null ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  unsafe.getDeclaredField( "null ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  unsafe.getDeclaredField( "null ");	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
292	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  allocateInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  allocateInstance);	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
293	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
294	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
295	[BUG]  [BUGGY]  if(assigned!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assigned!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assigned!=  null)  {  return  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
296	[BUG]  [BUGGY]  safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
297	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  allocateInstance);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
298	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
299	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  c);	  return    new    UnsafeAllocator(f,    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
300	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe,  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe,  c);	  return    new    UnsafeAllocator(f,    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
301	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  c,  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  c,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  c,  unsafe);	  return    new    UnsafeAllocator(f,    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
302	[BUG]  [BUGGY]  return  new  UnsafeAllocator(c,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(c,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(c,  unsafe);	  return    new    UnsafeAllocator(f,    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
303	[BUG]  [BUGGY]  return(assignment  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignment  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignment  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignment  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assigned    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignment	44	None	replace
304	[BUG]  [BUGGY]  return(assignable  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignable  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignable  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignable  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assigned    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignable	44	None	replace
305	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe,  assignInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe,  assignInstance);	  return    new    UnsafeAllocator(f,    unsafe);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
306	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  unsafe);	  return    new    UnsafeAllocator(f,    unsafe);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
307	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
308	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
309	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateInstance   ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateInstance   ");	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
310	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateUnsafe   ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateUnsafe   ");	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
311	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
312	[BUG]  [BUGGY]  final  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
313	[BUG]  [BUGGY]  final  Object  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
314	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
315	[BUG]  [BUGGY]  final  Class  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
316	[BUG]  [BUGGY]  final  Object  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
317	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  if(f  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  if(f  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    if(f  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
318	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    (f  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
319	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
320	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
321	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    (f  ==  null)?  null  :  new  UnsafeAllocator());	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
322	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
323	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
324	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
325	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
326	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  unsafe);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
327	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false,  unsafe);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false,  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
328	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  false);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  false);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
329	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance,  f.getDeclaredField( "unsafe "))  {  [CE]  cannot  find  symbol  assignInstance  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance,  f.getDeclaredField( "unsafe "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance,  f.getDeclaredField( "unsafe "))  {	  return    new    UnsafeAllocator(f,    allocateInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	14	None	replace
330	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
331	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
332	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
333	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
334	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  >=  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  >=  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  >=  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
335	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  unsafe,  f);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  unsafe,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  unsafe,  f);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
336	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator(f,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
337	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator(null,  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator(null,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator(null,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
338	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  f);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  f);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
339	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  allocateInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
340	[BUG]  [BUGGY]  return(assignment!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignment  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignment!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignment!=  null)?  null  :  new  UnsafeAllocator()  {	  return(assignmentInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignment	40	None	replace
341	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
342	[BUG]  [BUGGY]  if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(assignmentInstance    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
343	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
344	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
345	[BUG]  [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  not  a  statement	81	None	replace
346	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
347	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  	81	None	replace
348	[BUG]  [BUGGY]  if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
349	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
350	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
351	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
352	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField();	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
353	[BUG]  [BUGGY]  final  Field  f  =  f.getDeclaredField();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  f.getDeclaredField();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  f.getDeclaredField();	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
354	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
355	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "unsafe   "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "unsafe   "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  allocateInstance.getDeclaredField( "unsafe   "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
356	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
357	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
358	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "));  }	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
359	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
360	[BUG]  [BUGGY]  final  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
361	[BUG]  [BUGGY]  final  Class  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
362	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  public  =(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
363	[BUG]  [BUGGY]  final  Object  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
364	[BUG]  [BUGGY]  final  T  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  T  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  T  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
365	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  (null  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  (null  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    (null  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
366	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  if(null  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  if(null  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    if(null  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
367	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
368	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  (null  ==  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  (null  ==  null)?  null  :  new  UnsafeAllocator());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    (null  ==  null)?  null  :  new  UnsafeAllocator());	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
369	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance ");	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
370	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  (null  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  (null  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    (null  ==  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
371	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  Class.class);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
372	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
373	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
374	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
375	[BUG]  [BUGGY]  return  new  UnsafeAllocator(allocInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  allocInstance  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(allocInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(allocInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  allocInstance	15	None	replace
376	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe_ "))  {  [CE]  cannot  find  symbol  assignInstance  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe_ "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe_ "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	15	None	replace
377	[BUG]  [BUGGY]  return  new  UnsafeAllocator(removeInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  removeInstance  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(removeInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(removeInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  removeInstance	15	None	replace
378	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe!=  null)?  null  :  new  UnsafeAllocator());	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
379	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator());	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
380	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  safe!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  safe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  safe!=  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
381	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  unsafe.getClass();  [CE]  self-reference  in  initializer  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  unsafe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  unsafe.getClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  self-reference  in  initializer	103	None	replace
382	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  safe.getClass();  [CE]  cannot  find  symbol  safe  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  safe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  safe.getClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  safe	103	None	replace
383	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getUnsafe();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getUnsafe();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getUnsafe();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
384	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  unsafe.getValue();  [CE]  self-reference  in  initializer  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  unsafe.getValue();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  unsafe.getValue();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  self-reference  in  initializer	103	None	replace
385	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }	  return    new    UnsafeAllocator(assignInstance);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
386	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    new    UnsafeAllocator(assignInstance);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
387	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    UnsafeAllocator(assignInstance);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
388	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  allocateInstance))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  allocateInstance))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   ",  allocateInstance))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    c))    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
389	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  c.getConstructorId();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  c.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  c.getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
390	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  f.getConstructorId();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  f.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  f.getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
391	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  assignInstance.getConstructorId();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  assignInstance.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  assignInstance.getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
392	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
393	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  unsafe.getConstructorId();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  unsafe.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  unsafe.getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
394	[BUG]  [BUGGY]  final  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
395	[BUG]  [BUGGY]  return  new  UnsafeAllocator(removeInstance.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(removeInstance.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(removeInstance.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
396	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  allocateInstance);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  allocateInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
397	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  unsafe);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  unsafe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
398	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  assignInstance);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  assignInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
399	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  c);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  c);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
400	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  c);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  c);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
401	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  null);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
402	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  allocateInstance);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  allocateInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
403	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  assignInstance);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe,  assignInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
404	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
405	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "this.unsafe "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "this.unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "this.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
406	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "this.unsafe "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "this.unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "this.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
407	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "this.unsafe "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "this.unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "this.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
408	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator()  :  unsafe.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
409	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  safe.getClass();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  safe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  safe.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
410	[BUG]  [BUGGY]  return(inferred  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(inferred  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(inferred  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
411	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.toString();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.toString();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.toString();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
412	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.instance.getClass();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.instance.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.instance.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
413	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator()  :  unsafe.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
414	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator  <  T>();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator  <  T>();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator  <  T>();	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
415	[BUG]  [BUGGY]  return  new  UnsafeAllocator  <  T>(unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator  <  T>(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator  <  T>(unsafe);	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
416	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator  <  T>();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator  <  T>();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator  <  T>();	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
417	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator  <  T>()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator  <  T>()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator  <  T>()  :  unsafe;	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
418	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator  <  T>()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator  <  T>()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator  <  T>()  :  unsafe;	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
419	[BUG]  [BUGGY]  return  new  UnsafeAllocator  <  T>(f);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator  <  T>(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator  <  T>(f);	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
420	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
421	[BUG]  [BUGGY]  return(assigned  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  assigned  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assigned  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assigned  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol  assigned	116	None	replace
422	[BUG]  [BUGGY]  return(assignmentInstance  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  assignmentInstance  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignmentInstance  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignmentInstance  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol  assignmentInstance	116	None	replace
423	[BUG]  [BUGGY]  return(assignable  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  assignable  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignable  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignable  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol  assignable	116	None	replace
424	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
425	[BUG]  [BUGGY]  return(assignInstance  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  assignInstance  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignInstance  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignInstance  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	116	None	replace
426	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f,  allocateInstance);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
427	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f,  unsafe);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
428	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  assignInstance);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f,  assignInstance);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
429	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  unsafe);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
430	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
431	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
432	[BUG]  [BUGGY]  safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	35	None	replace
433	[BUG]  [BUGGY]  if(assignmentInstance  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
434	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "null ",  allocateInstance);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "null ",  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "null ",  allocateInstance);	  final    Object    unsafe    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
435	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "allocateInstance ",  null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "allocateInstance ",  null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "allocateInstance ",  null);	  final    Object    unsafe    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
436	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "null ",  assignInstance);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "null ",  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "null ",  assignInstance);	  final    Object    unsafe    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
437	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "allocateInstance   ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getDeclaredField( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getDeclaredField( "allocateInstance   ");	  final    Object    unsafe    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
438	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "this "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "this "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "this "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
439	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "this "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "this "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "this "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
440	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "this "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "this "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "this "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
441	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this "),  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
442	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "this "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "this "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "this "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
443	[BUG]  [BUGGY]  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
444	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
445	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
446	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
447	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
448	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
449	[BUG]  [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
450	[BUG]  [BUGGY]  safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	safe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	36	None	replace
451	[BUG]  [BUGGY]  if(assignmentInstance  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
452	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "),  unsafe);	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
453	[BUG]  [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "));  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignInstance!=  null)  {  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "null "));  }	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
454	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  allocateInstance);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  allocateInstance);	  return    new    UnsafeAllocator(f.getConstructorId(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
455	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  assignInstance);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  assignInstance);	  return    new    UnsafeAllocator(f.getConstructorId(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
456	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe);  }	  return    new    UnsafeAllocator(f.getConstructorId(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
457	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(f.getConstructorId(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
458	[BUG]  [BUGGY]  return(this.safe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(this.safe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(this.safe  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(safe    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
459	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.theUnsafe   ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.theUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.theUnsafe   ");	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
460	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateInstance ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "allocateInstance ",  Class.class);	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
461	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  getConstructorId());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe,  getConstructorId());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
462	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  null))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  null))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  null))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
463	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance   ",  unsafe));  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance   ",  unsafe));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance   ",  unsafe));  }	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
464	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafeInstance ",  unsafe));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafeInstance ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafeInstance ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
465	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  c);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
466	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  assignInstance);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  assignInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  assignInstance);	  return    new    UnsafeAllocator(assignInstance);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
467	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  unsafeClass);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  unsafeClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  unsafeClass);	  return    new    UnsafeAllocator(f,    unsafeClass);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
468	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "unsafe "),  unsafe);	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
469	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
470	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null.getDeclaredField( "unsafe   "))  {  [CE]  <null>  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	15	None	replace
471	[BUG]  [BUGGY]  return  new  UnsafeAllocator(locatedInstance.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  locatedInstance  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(locatedInstance.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(locatedInstance.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  locatedInstance	15	None	replace
472	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "theUnsafe "))  {  [CE]  cannot  find  symbol  assignInstance  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "theUnsafe "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "theUnsafe "))  {	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol  assignInstance	15	None	replace
473	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getUnsafeAllocator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getUnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator  <  T>  unsafe  =  getUnsafeAllocator();	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
474	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe  =  getConstructorId();	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
475	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
476	[BUG]  [BUGGY]  return(limit  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  limit  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(limit  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(limit  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assignInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  limit	41	None	replace
477	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  f);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  f);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
478	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(assignmentInstance);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(assignmentInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(assignmentInstance);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
479	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(null);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
480	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  c);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  safe  =  new  UnsafeAllocator(unsafe,  c);	  final    UnsafeAllocator    <    T>    safe    =    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
481	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  Class.class);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  Class.class);	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
482	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ");	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
483	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Class  <?>  unsafe  =  getConstructorId();	  	non-compiled	[CE]  illegal  start  of  type	89	None	add
484	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  null  =  getConstructorId();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  null  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator  <  T>  null  =  getConstructorId();	  	non-compiled	[CE]  <identifier>  expected	89	None	add
485	[BUG]  [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
486	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator(f);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
487	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  assignInstance,  unsafe);	  return    new    UnsafeAllocator(f,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
488	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(f,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
489	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
490	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
491	[BUG]  [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  safe  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assignmentInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  safe	40	None	replace
492	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe);  }	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
493	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
494	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c,  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
495	[BUG]  [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  safe  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  safe	80	None	replace
496	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId(null);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId(null);	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
497	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId(),  unsafe);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId(),  unsafe);	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  	13	None	replace
498	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(removeInstance);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(removeInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(removeInstance);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
499	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theunsafe "),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theunsafe "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "theunsafe "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
500	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe ",  unsafe));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
501	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "declaration.unsafe "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "declaration.unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "declaration.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
502	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
503	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c,  unsafe)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c,  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  c,  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
504	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  c)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  c)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  c)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
505	[BUG]  [BUGGY]  return  new  UnsafeAllocator  <  T>(null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator  <  T>(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator  <  T>(null);	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
506	[BUG]  [BUGGY]  return  new  UnsafeAllocator  <  T>(f,  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator  <  T>(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator  <  T>(f,  unsafe);	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
507	[BUG]  [BUGGY]  if(safe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(safe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(safe!=  null)?  new  UnsafeAllocator()  :  unsafe;	  return(unsafe!=    null)?    new    UnsafeAllocator()    :    safe;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
508	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  unsafe);  [CE]  self-reference  in  initializer  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  unsafe);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  self-reference  in  initializer	82	None	replace
509	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
510	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
511	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
512	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
513	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
514	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
515	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
516	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
517	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
518	[BUG]  [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  (unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
519	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe),  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
520	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe,  c));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe,  c));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "invalid ",  unsafe,  c));	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
521	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
522	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null);	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
523	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
524	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
525	[BUG]  [BUGGY]  if(assignment  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignment  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignment  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
526	[BUG]  [BUGGY]  if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null)  {  throw  new  IllegalStateException( " "));  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
527	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafeInstance "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafeInstance "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafeInstance "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
528	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocate "),  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocate "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocate "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
529	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "assignment "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "assignment "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "assignment "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
530	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null ",  unsafe));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null ",  unsafe));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
531	[BUG]  [BUGGY]  final  Object  unsafe  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  allocateInstance.getMethod( "allocateInstance ",  Class.class);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
532	[BUG]  [BUGGY]  allowUnsafe(unsafe)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  allowUnsafe(unsafe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	allowUnsafe(unsafe)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	94	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(f!=  null)?  null  :  new  UnsafeAllocator()  {	  return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	43	3	replace
534	[BUG]  [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f!=  null)?  null  :  new  UnsafeAllocator()  {	  return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	43	3	replace
535	[BUG]  [BUGGY]  final  Object  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	55	None	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
537	[BUG]  [BUGGY]  final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	55	1	replace
538	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getImplicitInstance());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getImplicitInstance());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getImplicitInstance());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
539	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getImplicitClass());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getImplicitClass());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getImplicitClass());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
540	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  assignInstance.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  assignInstance.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  assignInstance.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
541	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  assignInstance.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  assignInstance.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  assignInstance.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
542	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  unsafe.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  unsafe.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  unsafe.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
543	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "unsafe "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "unsafe "));	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
544	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
545	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "theUnsafe "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
546	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "null "));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "null "));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
547	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  c));	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
548	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
549	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  safe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  safe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  safe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
550	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  safe);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  safe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  safe);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
551	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(true,  c);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
552	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
553	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeInstance();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeInstance();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeInstance();	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
554	[BUG]  [BUGGY]  return(limit  ==  null)?  null  :  new  UnsafeInstance()  {  [CE]  cannot  find  symbol  limit  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(limit  ==  null)?  null  :  new  UnsafeInstance()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(limit  ==  null)?  null  :  new  UnsafeInstance()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeInstance()    {    	non-compiled	[CE]  cannot  find  symbol  limit	116	None	replace
555	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe ",  unsafe));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
556	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "));  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "));  }	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
557	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "this.unsafe "));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "this.unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "this.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
558	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "thisInstance "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "thisInstance "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "thisInstance "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
559	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this ",  unsafe));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
560	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "deployment "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "deployment "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "deployment "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
561	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
562	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getConstructorId());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getConstructorId());	  return    new    UnsafeAllocator(unsafe,    f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
563	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ");	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
564	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe ",  unsafe))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe ",  unsafe))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe ",  unsafe))  {	  return    new    UnsafeAllocator(f,    f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
565	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafe.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f,    f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
566	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  false));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  false));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  false));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
567	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe),  c);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
568	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe   "),  unsafeClass)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe   "),  unsafeClass)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "unsafe   "),  unsafeClass)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafeClass)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
569	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(null);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(null);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(null);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
570	[BUG]  [BUGGY]  safe  =  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  safe  =  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	safe  =  new  UnsafeAllocator(unsafe);	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
571	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  throw  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  throw  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
572	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  assignInstance.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  assignInstance.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  assignInstance.getDeclaredField( "null "));	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
573	[BUG]  [BUGGY]  return  new  UnsafeAllocator(locatedInstance.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(locatedInstance.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(locatedInstance.getDeclaredField( "null "));	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
574	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
575	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  c);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  c);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
576	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getAccessible());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getAccessible());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getAccessible());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
577	[BUG]  [BUGGY]  final  Object  unsafe  =  allocateInstance.getMethod( "allocateInstance ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  allocateInstance.getMethod( "allocateInstance ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  allocateInstance.getMethod( "allocateInstance ");	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
578	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getConstructorId(null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getConstructorId(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getConstructorId(null);	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
579	[BUG]  [BUGGY]  final  Object  unsafe  =  f.getInstance(null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.getInstance(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.getInstance(null);	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
580	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
581	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(f);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
582	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  c);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
583	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  getConstructorId());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField(),  unsafe,  getConstructorId());	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
584	[BUG]  [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  safe  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol  safe	105	None	replace
585	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
586	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignmentInstance.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance.getConstructorId());	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
587	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  allocateInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  allocateInstance.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  allocateInstance.getConstructorId());	  return    new    UnsafeAllocator(unsafe.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
588	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "unsafe   ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "unsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  f.getDeclaredField( "unsafe   ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
589	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  assignInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  assignInstance.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  assignInstance.getConstructorId());	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
590	[BUG]  [BUGGY]  return  new  UnsafeAllocator(locatedInstance.getConstructorId());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(locatedInstance.getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(locatedInstance.getConstructorId());	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
591	[BUG]  [BUGGY]  return(limit  ==  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(limit  ==  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(limit  ==  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
592	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getConstructorId(),  unsafe,  c);	  return    new    UnsafeAllocator(f.getConstructorId(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
593	[BUG]  [BUGGY]  final  String  constructorId  =  f.getConstructorId(null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getConstructorId(null);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getConstructorId(null);	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
594	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredConstructorId();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredConstructorId();	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
595	[BUG]  [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  safe  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  safe	79	None	replace
596	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
597	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
598	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe_ "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe_ "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  allocateInstance.getDeclaredField( "unsafe_ "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
599	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ ",  unsafe));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
600	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  (f  ==  null)?  null  :  new  UnsafeAllocator());	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    (unsafe    ==    null)?    null    :    new    UnsafeAllocator());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
601	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.toArray(new  Class[0]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.toArray(new  Class[0]);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe.toArray(new  Class[0]);	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
602	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  getConstructorId();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  getConstructorId();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
603	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getModule());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
604	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  c.getModule());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  c.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  c.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
605	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance.getModule());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  assignInstance.getModule());	  return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
606	[BUG]  [BUGGY]  return(this.unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(this.unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(this.unsafe  ==  null)?  new  UnsafeAllocator()  :  unsafe;	  return(f    ==    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
607	[BUG]  [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [CE]  cannot  find  symbol  safe  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(safe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  cannot  find  symbol  safe	104	None	replace
608	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  	104	None	replace
609	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance.getConstructorId(),  unsafe);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  assignInstance.getConstructorId(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  assignInstance.getConstructorId(),  unsafe);	  return    new    UnsafeAllocator(f,    allocateInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
610	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getComponentType());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getComponentType());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getComponentType());	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
611	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
612	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(null));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField(null));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField(null));	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
613	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  c);	  return    new    UnsafeAllocator(f,    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
614	[BUG]  [BUGGY]  return(limit!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(limit!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(limit!=  null)?  new  UnsafeAllocator()  :  unsafe;	  return(null!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
615	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f,  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
616	[BUG]  [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f!=  null)?  null  :  new  UnsafeAllocator(f,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
617	[BUG]  [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator(null,  unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f!=  null)?  null  :  new  UnsafeAllocator(null,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f!=  null)?  null  :  new  UnsafeAllocator(null,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
618	[BUG]  [BUGGY]  final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  safe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
619	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  unsafe),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
620	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId(unsafe);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  getConstructorId(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  getConstructorId(unsafe);	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
621	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  getConstructorId());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  getConstructorId());	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
622	[BUG]  [BUGGY]  return  new  UnsafeAllocator(inferred,  unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(inferred,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(inferred,  unsafe);	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
623	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
624	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
625	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
626	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  allocateInstance));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  allocateInstance));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  allocateInstance));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
627	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe),  allocateInstance);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe),  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe),  allocateInstance);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
628	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  allocateInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  allocateInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null "),  allocateInstance,  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
629	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance,  f);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignmentInstance,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance,  f);	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
630	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  assigningInstance);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  assigningInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  assigningInstance);	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
631	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  c.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  c.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  c.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
632	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  unsafe.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
633	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(unsafe,  f):  new  UnsafeAllocator(f);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(unsafe,  f):  new  UnsafeAllocator(f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator(unsafe,  f):  new  UnsafeAllocator(f);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
634	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  f);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  f);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
635	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f,  c);	  return    new    UnsafeAllocator(unsafe,    f);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
636	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance.getDeclaredField( "null "));	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
637	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  unsafe.getDeclaredField( "null "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  unsafe.getDeclaredField( "null "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  unsafe.getDeclaredField( "null "));	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
638	[BUG]  [BUGGY]  final  int  constructorId  =  f.getDeclaredField( "null ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  int  constructorId  =  f.getDeclaredField( "null ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  int  constructorId  =  f.getDeclaredField( "null ");	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
639	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe));  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe));  }	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
640	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe),  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null ",  unsafe),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
641	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getMethod(),  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getMethod(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getMethod(),  unsafe);	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
642	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getMethod());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getMethod());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getMethod());	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
643	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getConstructorId(),  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getConstructorId(),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getConstructorId(),  c);	  return    new    UnsafeAllocator(unsafe,    f.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
644	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "),  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this.unsafe "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
645	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "sun.unsafe "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "sun.unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "sun.unsafe "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "this.unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
646	[BUG]  [BUGGY]  return  new  UnsafeAllocator(c,  f);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(c,  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(c,  f);	  return    new    UnsafeAllocator(f,    c);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
647	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  unsafeClass);  [CE]  local  variable  unsafeClass  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  unsafeClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId(null,  unsafeClass);	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId(null);    	non-compiled	[CE]  local  variable  unsafeClass  is  accessed  from  within  inner  class;  needs  to  be  declared  final	82	None	replace
648	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe ",  unsafe)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  	16	None	replace
649	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  f)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  f)  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   "),  f)  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
650	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator  <  T>()  :  new  UnsafeAllocator  <  T>();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator  <  T>()  :  new  UnsafeAllocator  <  T>();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator  <  T>()  :  new  UnsafeAllocator  <  T>();	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
651	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator  <  T>()  :  new  UnsafeAllocator  <  T>();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator  <  T>()  :  new  UnsafeAllocator  <  T>();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator  <  T>()  :  new  UnsafeAllocator  <  T>();	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
652	[BUG]  [BUGGY]  return  new  UnsafeAllocator  <  T>(f.getDeclaredField( "theUnsafe "));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator  <  T>(f.getDeclaredField( "theUnsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator  <  T>(f.getDeclaredField( "theUnsafe "));	  return    new    UnsafeAllocator    <    T>();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
653	[BUG]  [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
654	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  final  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	56	None	replace
655	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  	56	None	replace
656	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe-class "),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe-class "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe-class "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
657	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe   "),  unsafe,  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
658	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredFieldName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredFieldName();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredFieldName();	  final    String    constructorId    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
659	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe!=  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  ';'  expected	38	None	add
660	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId().invoke(unsafe,  c);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId().invoke(unsafe,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe  =  getConstructorId().invoke(unsafe,  c);	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
661	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  f.getDeclaredField( "unsafe ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  f.getDeclaredField( "unsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    Object  unsafe  =  f.getDeclaredField( "unsafe ");	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
662	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "computeConstructorId ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "computeConstructorId ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  String  constructorId  =  f.getDeclaredField( "computeConstructorId ");	  final    String    constructorId    =    f.getDeclaredField(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
663	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getUnsafeId();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getUnsafeId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  getUnsafeId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
664	[BUG]  [BUGGY]  final  Field  f  =  f.getDeclaredField( "constructorId ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  f.getDeclaredField( "constructorId ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  f.getDeclaredField( "constructorId ");	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
665	[BUG]  [BUGGY]  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  f.getDeclaredField( "theUnsafe   ");	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
666	[BUG]  [BUGGY]  final  Field  f  =  f.getConstructor();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Field  f  =  f.getConstructor();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Field  f  =  f.getConstructor();	  final    Field    f    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
667	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
668	[BUG]  [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	static  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);	  static    final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator()    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
669	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getImplicitPrototype(),  unsafeClass);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getImplicitPrototype(),  unsafeClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getImplicitPrototype(),  unsafeClass);	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
670	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getImplicit());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getImplicit());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getImplicit());	  return    new    UnsafeAllocator(f.getImplicitPrototype());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
671	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  unsafe);  }	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null,    unsafe);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
672	[BUG]  [BUGGY]  return(null  ==  unsafe)?  null  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  unsafe)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  unsafe)?  null  :  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
673	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaringClass());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaringClass());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaringClass());	  return    new    UnsafeAllocator(f.getComponentType());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
674	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false);  }	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
675	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false,  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false,  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(false,  c);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(false);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
676	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(f,  unsafe);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(f,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(f,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
677	[BUG]  [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(null,  unsafe);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(null,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(null,  unsafe);	  return    new    UnsafeAllocator(null,    f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
678	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  f);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "null "),  f);	  return    new    UnsafeAllocator(unsafe.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
679	[BUG]  [BUGGY]  return(inferred  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  inferred  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(inferred  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(inferred  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assigned    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  inferred	44	None	replace
680	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "isUnsafe   ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "isUnsafe   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  f.getDeclaredField( "isUnsafe   ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
681	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "isUnsafeClass ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "isUnsafeClass ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Class  <?>  c  =  f.getDeclaredField( "isUnsafeClass ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
682	[BUG]  [BUGGY]  return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance   ");  [CE]  self-reference  in  initializer  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance   ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(allocateInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Method  allocateInstance  =  allocateInstance.getMethod( "allocateInstance   ");	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  self-reference  in  initializer	54	None	replace
683	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaringClass());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaringClass());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaringClass());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
684	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  allocateInstance.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  allocateInstance.getModule());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  allocateInstance.getModule());	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getModule());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
685	[BUG]  [BUGGY]  if(unsafe!=  null  &&  unsafe.isUnsafe())  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null  &&  unsafe.isUnsafe())  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null  &&  unsafe.isUnsafe())  {  return  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
686	[BUG]  [BUGGY]  if(unsafe!=  null  &&  unsafe.isInterface())  {  return  new  UnsafeAllocator(unsafe);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null  &&  unsafe.isInterface())  {  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null  &&  unsafe.isInterface())  {  return  new  UnsafeAllocator(unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
687	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  assignInstance);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  assignInstance);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  assignInstance);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
688	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  unsafe);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe,  unsafe);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
689	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
690	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "),  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_ "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "),    c);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
691	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  allocateInstance);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "null "),  allocateInstance);	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "null   "));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
692	[BUG]  [BUGGY]  return(assignedInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  assignedInstance  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(assignedInstance  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(assignedInstance  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(assignInstance    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  assignedInstance	41	None	replace
693	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator();  Object  unsafe  =  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
694	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnisafeAllocator()  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnisafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  null)?  null  :  new  UnisafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  ';'  expected	103	None	replace
695	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  allocatedInstance.getConstructorId();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  allocatedInstance.getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  allocatedInstance.getConstructorId();	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
696	[BUG]  [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId()  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId()  -  1;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	Constructor  <  T>  constructorId  =  allocateInstance.getConstructorId()  -  1;	  Constructor    <    T>    constructorId    =    allocateInstance.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
697	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theunsafe ",  unsafe));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "theunsafe ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "theunsafe ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
698	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid "),  unsafe);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "invalid "),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "invalid "),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "invalid   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
699	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ",  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ",  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ",  c);	  final    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
700	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f);  }	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
701	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  allocateInstance);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f,  allocateInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
702	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "instance "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "instance "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "instance "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "allocateInstance   "));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
703	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  {  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  {  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  {  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  <identifier>  expected	89	None	add
704	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  null  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  null  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  null  ==  null)?  null  :  new  UnsafeAllocator()  {	  	non-compiled	[CE]  <identifier>  expected	89	None	add
705	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  {  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  {  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  {  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  <identifier>  expected	89	None	add
706	[BUG]  [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  null  ==  null)?  null  :  new  UnsafeAllocator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  null  ==  null)?  null  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    Object  null  ==  null)?  null  :  new  UnsafeAllocator();	  	non-compiled	[CE]  <identifier>  expected	89	None	add
707	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  unsafe)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(null  ==  unsafe)?  null  :  new  UnsafeAllocator()  {	  return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	90	2	replace
708	[BUG]  [BUGGY]  return(null  ==  unsafe)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  unsafe)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  unsafe)?  null  :  new  UnsafeAllocator()  {	  return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	90	2	replace
709	[BUG]  [BUGGY]  return(null  ==  c)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  c  [FE]      AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  c)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  c)?  null  :  new  UnsafeAllocator()  {	  return(null    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol  c	90	None	replace
710	[BUG]  [BUGGY]  return(inferred  ==  null)?  new  UnsafeInstance()  :  unsafe;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(inferred  ==  null)?  new  UnsafeInstance()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(inferred  ==  null)?  new  UnsafeInstance()  :  unsafe;	  return(unsafe    ==    null)?    new    UnsafeInstance()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
711	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "),  f);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "),  f);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredField( "unsafe "),  f);	  return    new    UnsafeAllocator(assignInstance.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
712	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [CE]  :  expected  [FE]        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId();    	non-compiled	[CE]  :  expected	79	None	replace
713	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  f))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  f))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe.getDeclaredField( "unsafe   ",  f))  {	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
714	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe,  unsafeClass);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe,  unsafeClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe,  unsafeClass);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
715	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe,  unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe,  unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
716	[BUG]  [BUGGY]  if(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)?  new  UnsafeAllocator(unsafe):  new  UnsafeAllocator(unsafe);	  return(unsafe!=    null)?    new    UnsafeAllocator(unsafe):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
717	[BUG]  [BUGGY]  if(assignmentInstance  ==  null  ||  unsafe.isUnsafe())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null  ||  unsafe.isUnsafe())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null  ||  unsafe.isUnsafe())  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
718	[BUG]  [BUGGY]  if(assignmentInstance  ==  null  ||  unsafeClass  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(assignmentInstance  ==  null  ||  unsafeClass  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(assignmentInstance  ==  null  ||  unsafeClass  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
719	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe.getClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe.getClass();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeInstance()  :  unsafe.getClass();	  return(unsafe    ==    null)?    new    UnsafeAllocator()    :    unsafe.getClass();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
720	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe_ "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe_ "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe_ "))  {	  return    new    UnsafeAllocator(null,    f.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
721	[BUG]  [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe/ "))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe/ "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(null,  f.getDeclaredField( "unsafe/ "))  {	  return    new    UnsafeAllocator(null,    f.getDeclaredField(   "unsafe       "))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
722	[BUG]  [BUGGY]  return(this.safe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(this.safe!=  null)?  new  UnsafeAllocator()  :  unsafe;  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(this.safe!=  null)?  new  UnsafeAllocator()  :  unsafe;	  return(safe!=    null)?    new    UnsafeAllocator()    :    unsafe;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
723	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(constructorId);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(constructorId);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(constructorId);	  final    Object    unsafe    =    f.getConstructorId();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
724	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  new  UnsafeAllocator()  {  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  new  UnsafeAllocator()  {	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	39	None	replace
725	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator();  }	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
726	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(unsafe);  }	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
727	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  getConstructorId());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  unsafeClass,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  unsafeClass,  getConstructorId());	  return    new    UnsafeAllocator(f,    unsafeClass);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
728	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  allocateInstance));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  allocateInstance));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "allocateInstance ",  allocateInstance));	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
729	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  c);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe "),  c);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   "));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
730	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this "),  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "this "),  c);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "this "),  c);	  return    new    UnsafeAllocator(f.getDeclaredField(   "this   "));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
731	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  allocateInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  allocateInstance,  unsafe);	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
732	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  assignInstance,  unsafe);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  assignInstance,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  assignInstance,  unsafe);	  return    new    UnsafeAllocator(unsafe,    allocateInstance);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
733	[BUG]  [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  new  UnsafeAllocator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  new  UnsafeAllocator()  :  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  new  UnsafeAllocator()  :  new  UnsafeAllocator();	  return(unsafe!=    null)?    null    :    new    UnsafeAllocator();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
734	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  allocateInstance);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Object  unsafe  =  f.get(null,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Object  unsafe  =  f.get(null,  allocateInstance);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
735	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  ObjectUtilities.getDeclaredField( "unsafe   "))  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  ObjectUtilities.getDeclaredField( "unsafe   "))  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  ObjectUtilities.getDeclaredField( "unsafe   "))  {	  return    new    UnsafeAllocator(f,    f.getDeclaredField(   "unsafe   "))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	77	None	replace
736	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredMethod(),  unsafe);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredMethod(),  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredMethod(),  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
737	[BUG]  [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  unsafeClass);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  unsafeClass);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  new  UnsafeAllocator(f):  new  UnsafeAllocator(unsafe,  unsafeClass);	  return(unsafe!=    null)?    new    UnsafeAllocator(f):    new    UnsafeAllocator(unsafe);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
738	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance,  getConstructorId());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance,  getConstructorId());	  return    new    UnsafeAllocator(assignInstance);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
739	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  f)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	add	return(null  ==  f)?  null  :  new  UnsafeAllocator()  {	  return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	43	2	replace
740	[BUG]  [BUGGY]  return(null  ==  f)?  null  :  new  UnsafeAllocator()  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(null  ==  f)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(null  ==  f)?  null  :  new  UnsafeAllocator()  {	  return(f    ==    null)?    null    :    new    UnsafeAllocator()    {    	compilable	  [FE]  AssertionFailedError  	43	2	replace
741	[BUG]  [BUGGY]  final  Method  allocateInstance  =  assignInstance.getMethod( "allocateInstance   ",  Class.class);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Method  allocateInstance  =  assignInstance.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Method  allocateInstance  =  assignInstance.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    allocateInstance.getMethod(   "allocateInstance   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
742	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ",  allocateInstance);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ",  allocateInstance);  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " ",  allocateInstance);  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
743	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalStateException( " "));  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
744	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredMethod());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredMethod());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredMethod());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
745	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredInstance());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredInstance());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredInstance());	  return    new    UnsafeAllocator(f.getDeclaredField());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
746	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredMethod( "unsafe "));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredMethod( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredMethod( "unsafe "));	  return    new    UnsafeAllocator(f.getMethod());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
747	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  allocateInstance);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(null,  allocateInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
748	[BUG]  [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(allocateInstance);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(allocateInstance);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  UnsafeAllocator  <  T>  return  new  UnsafeAllocator(allocateInstance);	  final    UnsafeAllocator    <    T>    return    new    UnsafeAllocator(null);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
749	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignmentInstance,  getConstructorId());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignmentInstance,  getConstructorId());  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignmentInstance,  getConstructorId());	  return    new    UnsafeAllocator(assignmentInstance);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
750	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
751	[BUG]  [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	if(unsafe!=  null)  {  return  new  UnsafeAllocator(unsafe);  }  else  {  throw  new  IllegalArgumentException( ", ");  }	  if(unsafe!=    null)    {    return    new    UnsafeAllocator(unsafe);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
752	[BUG]  [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredMethod( "unsafe "));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(assignInstance.getDeclaredMethod( "unsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(assignInstance.getDeclaredMethod( "unsafe "));	  return    new    UnsafeAllocator(assignInstance.getConstructorId());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
753	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe-class ",  unsafe));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe-class ",  unsafe));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe-class ",  unsafe));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe   ",    unsafe));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
754	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  	104	None	replace
755	[BUG]  [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe!=  null)?  null  :  new  UnsafeAllocator()  {  UnsafeAllocator  <  T>  unsafe  =  new  UnsafeAllocator();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    UnsafeAllocator    <    T>    unsafe    =    new    UnsafeAllocator();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
756	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_object "));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_object "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_object "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
757	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_method "));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_method "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "unsafe_method "));	  return    new    UnsafeAllocator(f.getDeclaredField(   "unsafe_   "));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
758	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "theunsafe "));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f,  f.getDeclaredField( "theunsafe "));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f,  f.getDeclaredField( "theunsafe "));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
759	[BUG]  [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theunsafe ",  c));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theunsafe ",  c));  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(unsafe,  f.getDeclaredField( "theunsafe ",  c));	  return    new    UnsafeAllocator(unsafe,    f.getDeclaredField(   "theUnsafe   "));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
760	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  Class  <?>  unsafe  =  getConstructorId().getRawClass();  }	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Class    <?>    unsafe    =    getConstructorId().getRawClass();    	non-compiled	[CE]  	105	None	replace
761	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  c,  unsafe);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getConstructorId(),  c,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getConstructorId(),  c,  unsafe);	  return    new    UnsafeAllocator(f.getConstructorId(),    unsafe);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
762	[BUG]  [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(f  ==  null)?  null  :  new  UnsafeAllocator()  {  Object  unsafe  =  getConstructorId();	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    Object    unsafe    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
763	[BUG]  [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  c,  unsafe);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return  new  UnsafeAllocator(f.getDeclaredField( "null "),  c,  unsafe);  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return  new  UnsafeAllocator(f.getDeclaredField( "null "),  c,  unsafe);	  return    new    UnsafeAllocator(f.getDeclaredField(   "null   "),    c);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
764	[BUG]  [BUGGY]  final  Class  <  T>  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  final  Class  <  T>  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	final  Class  <  T>  unsafe  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
765	[BUG]  [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [CE]  '('  or  '['  expected  [FE]                    AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  return(unsafe  ==  null)?  null  :  new  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	return(unsafe  ==  null)?  null  :  new  UnsafeAllocator  <  T>  public  =(unsafe  ==  null)?  null  :  new  UnsafeAllocator()  {	  return(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    final    UnsafeAllocator    <    T>    public    =(unsafe    ==    null)?    null    :    new    UnsafeAllocator()    {    	non-compiled	[CE]  '('  or  '['  expected	55	None	replace
766	[BUG]  [BUGGY]  allowSuppressWarnings(f.getDeclaredField( "abstract "))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  allowSuppressWarnings(f.getDeclaredField( "abstract "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	allowSuppressWarnings(f.getDeclaredField( "abstract "))  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
767	[BUG]  [BUGGY]  allowSuppressWarnings(unsafe,  false)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]          try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);      [BUGGY]  allowSuppressWarnings(unsafe,  false)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }    [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	44	44	2	replace	allowSuppressWarnings(unsafe,  false)  {  throw  new  IllegalStateException( " ");  }	  if(assignmentInstance!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
