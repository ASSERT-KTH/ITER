bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
2	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "insertInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "insertInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "insertInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
3	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "invokeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "invokeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "invokeInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
4	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance, ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
5	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "unsafeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "unsafeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "unsafeInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "relativeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "relativeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
7	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "relativeInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "relativeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "relativeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
9	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "unsafeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "unsafeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
11	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "unsafeInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "unsafeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "unsafeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "null ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "null ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
13	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "null ",  Class.class);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "null ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "null ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
14	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
15	[BUG]  [BUGGY]  If(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  If(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	If(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
16	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ".class);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ".class);  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
17	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: "  +  unsafe.getClass());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: "  +  unsafe.getClass());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: "  +  unsafe.getClass());  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
18	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment, ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
19	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment. ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment. ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment. ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
20	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getName(),  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getName(),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getName(),  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
21	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  Class.class.getMethod( "assignment ",  Class.class);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  Class.class.getMethod( "assignment ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  Class.class.getMethod( "assignment ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  	61	None	replace
22	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "class ",  Class.class);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "class ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment. ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment. ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment. ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
24	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "assignment ",  Class.class);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "assignment ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "assignment ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
26	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
27	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
28	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  assignInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  final  Method  assignInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  assignInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
29	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
30	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
31	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(f);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
32	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(c);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(c);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
33	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(null,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(null,  unsafeClass);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
34	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
35	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
36	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
37	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,  class ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
38	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  null,  Class.class);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,  null,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
39	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class  <?>.class);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class  <?>.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class  <?>.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
40	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class.class),  unsafe);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class.class),  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,   ",  Class.class),  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  	52	None	replace
41	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	69	None	replace
42	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	69	None	replace
43	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	69	None	replace
44	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  f.setAccessible(false);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
45	[BUG]  [BUGGY]  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	69	None	replace
46	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  [CE]  incompatible  types  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	69	None	replace
47	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "relocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "relocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "relocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
48	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ".reallocateInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
49	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ".reallocateInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
50	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "returnInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "returnInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "returnInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "returnInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
51	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "returnInstance   ",  unsafe.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "returnInstance   ",  unsafe.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "returnInstance   ",  unsafe.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "returnInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
52	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "returnInstance   ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "returnInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "returnInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "returnInstance   ",    Class.class);    	non-compiled	[CE]  	19	None	replace
53	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "unsafe ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "unsafe ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "unsafe ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
54	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "getConstructorId "),  Class.class);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "getConstructorId "),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "getConstructorId "),  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  	72	None	replace
55	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "remove ",  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "remove ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "remove ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
56	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "getConstructorId ",  Class.class);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "getConstructorId ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "getConstructorId ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
57	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocation ",  Class.class);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocation ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "reallocation ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
58	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	26	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
60	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	26	1	replace
61	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ".getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ".getName());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ".getName());	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
62	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	26	None	replace
63	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafeClass,  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafeClass,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafeClass,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
64	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  class,  f,  Class.class);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  class,  f,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  class,  f,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
65	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  f);  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  f);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  f);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	3	None	replace
66	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  f,  Class.class,  safe);  [CE]  cannot  find  symbol  safe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  f,  Class.class,  safe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  f,  Class.class,  safe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safe	3	None	replace
67	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  f,  Class.class,  unsafe);  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  f,  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  f,  Class.class,  unsafe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	3	None	replace
68	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	7	None	add
69	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  unsafeClass.getMethod( ".allocateInstance   ",  Class.class,  unsafeClass);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  unsafeClass.getMethod( ".allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    final  Method  allocateInstance  =  unsafeClass.getMethod( ".allocateInstance   ",  Class.class,  unsafeClass);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	7	None	add
70	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	7	None	add
71	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  unsafeClass.getMethod( ",allocateInstance   ",  Class.class,  unsafeClass);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  unsafeClass.getMethod( ",allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    final  Method  allocateInstance  =  unsafeClass.getMethod( ",allocateInstance   ",  Class.class,  unsafeClass);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	7	None	add
72	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	7	None	add
73	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  f.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  f.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  f.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
74	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  null);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  null);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
75	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  this.class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  this.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  this.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
76	[BUG]  [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
77	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	56	None	replace
78	[BUG]  [BUGGY]  Object  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
79	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  f  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  f  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  f  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	56	None	replace
80	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
81	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  f.getMethod( "allocateInstance   ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  f.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe),  f.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	51	None	replace
82	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  c.getMethod( "allocateInstance   ",  Class.class);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  c.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe),  c.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	51	None	replace
83	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
84	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
85	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafe.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafe.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafe.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
86	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
87	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "removeInstance   ",  Class.class);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "removeInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "removeInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	15	None	replace
88	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  class.getMethod( "removeInstance   ",  Class.class);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  class.getMethod( "removeInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  class.getMethod( "removeInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
89	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance   ",  unsafe.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance   ",  unsafe.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "resetInstance   ",  unsafe.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "resetInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
90	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "resetInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "resetInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
91	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "resetInstance ",  Class.class);  [CE]  cannot  find  symbol  safe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "resetInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safe.getMethod( "resetInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "resetInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safe	21	None	replace
92	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance   ",  unsafeClass.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance   ",  unsafeClass.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "resetInstance   ",  unsafeClass.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "resetInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
93	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	66	None	replace
94	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  return  new  UnsafeAllocator();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  return  new  UnsafeAllocator();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  return  new  UnsafeAllocator();	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	66	None	replace
95	[BUG]  [BUGGY]  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	66	None	replace
96	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  return  new  UnsafeAllocator();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  return  new  UnsafeAllocator();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  return  new  UnsafeAllocator();	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	66	None	replace
97	[BUG]  [BUGGY]  safe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  safe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	safe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  not  a  statement	67	None	replace
98	[BUG]  [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
99	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	67	None	replace
100	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,   ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,   ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance,   ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
101	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance,   ",  Class.class);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance,   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  	45	None	replace
102	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  class ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
103	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,   ",  Class.class),  unsafe);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,   ",  Class.class),  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance,   ",  Class.class),  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  	45	None	replace
104	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  constructorId);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  constructorId);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  constructorId	9	None	replace
105	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  c);  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  c);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  c);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  c	9	None	replace
106	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  null);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  null);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
107	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  false);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
108	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  safe);  [CE]  cannot  find  symbol  safe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  safe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  safe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  safe	9	None	replace
109	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance,  class ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
110	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,   ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,   ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance,   ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
111	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  class, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  class, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance,  class, ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
112	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  null,  Class.class);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance,  null,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
113	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  method,  Class.class);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,  method,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance,  method,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
114	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
115	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "assignInstance   ",  Class.class);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "assignInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "assignInstance   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  	23	None	replace
116	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance ".getMethod( "class ",  Class.class);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance ".getMethod( "class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance ".getMethod( "class ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  	23	None	replace
117	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "insertInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "insertInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "insertInstance ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
118	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "sun.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "sun.misc.UnsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "sun.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
119	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
120	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "this.unsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "this.unsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "this.unsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
121	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "unsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "unsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "unsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
122	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafe   ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafe   ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
123	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafe_Allocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafe_Allocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafe_Allocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
124	[BUG]  [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  f.setAccessible(true);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
125	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
126	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(unsafeClass);	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
127	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(f);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(f);	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
128	[BUG]  [BUGGY]  Object  unsafe  =  f.get(null,  unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(null,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(null,  unsafeClass);	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
129	[BUG]  [BUGGY]  Object  unsafe  =  f.get(c);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(c);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(c);	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
130	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(f.getName());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(f.getName());	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
131	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  class,  Class.class);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  class,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  class,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    class,    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
132	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    class,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
133	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "reallocateInstance ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(),    f.getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	10	None	replace
134	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "returnInstance ",  Class.class);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(),    f.getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	10	None	replace
135	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "unsafeInstance ",  Class.class);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "unsafeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "unsafeInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(),    f.getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	10	None	replace
136	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "rellocateInstance ",  Class.class);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "rellocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "rellocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(),    f.getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	10	None	replace
137	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "assignment ",  Class.class);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "assignment ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "assignment ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(),    f.getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	10	None	replace
138	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
139	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance ",  Class.class,  unsafeClass);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
140	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  c,  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  c,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  c,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
141	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  safe);  [CE]  cannot  find  symbol  safe  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  safe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  safe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safe	8	None	replace
142	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  safe,  Class.class);  [CE]  cannot  find  symbol  safe  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  safe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  safe,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe,    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safe	65	None	replace
143	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  class,  unsafe,  Class.class);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  class,  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  class,  unsafe,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe,    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
144	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
145	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
146	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
147	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
148	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
149	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  'catch'  without  'try'  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
150	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    f,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	44	None	replace
151	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safe,  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safe,  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safe,  getConstructorId().getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    f,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	44	None	replace
152	[BUG]  [BUGGY]  safe!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  safe!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	safe!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  not  a  statement	35	None	replace
153	[BUG]  [BUGGY]  While(unsafe!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  While(unsafe!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	While(unsafe!=  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	35	None	replace
154	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	35	None	replace
155	[BUG]  [BUGGY]  safe  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  safe  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	safe  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  not  a  statement	35	None	replace
156	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  c,  unsafe);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  c,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  c,  unsafe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  c	48	None	replace
157	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  f,  unsafe);  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  f,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  f,  unsafe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
158	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  c,  unsafe);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  c,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  c,  unsafe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  c	48	None	replace
159	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  safe,  c);  [CE]  cannot  find  symbol  safe  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  safe,  c);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  safe,  c);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  safe	48	None	replace
160	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.   ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.   ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.   ");	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",   "Class.   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
161	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",  f,   "Class.   ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",  f,   "Class.   ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",  f,   "Class.   ");	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",   "Class.   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
162	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.class. ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.class. ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.class. ");	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",   "Class.   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
163	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",   "Class, ");  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",   "Class, ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",   "Class, ");	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",   "Class.   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
164	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafe.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafe.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafe.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    c,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
165	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  class ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
166	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  method,   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  method,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  method,   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
167	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  method,  Class.class);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  method,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  method,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
168	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  type ",  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  type ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  type ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
169	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  object ",  Class.class);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  object ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  object ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
170	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
171	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
172	[BUG]  [BUGGY]  if(f  ==  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f  ==  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f  ==  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
173	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
174	[BUG]  [BUGGY]  safe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  safe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	safe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  not  a  statement	57	None	replace
175	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
176	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "relocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "relocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "relocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
177	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "rellocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "rellocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "rellocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
178	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "relateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "relateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "relateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
179	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "returnInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
180	[BUG]  [BUGGY]  f.setAccessible(true);  [CE]  cannot  find  symbol  allocateInstance  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  f.setAccessible(true);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	f.setAccessible(true);	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	59	None	replace
181	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	59	None	replace
182	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	59	None	replace
183	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	59	None	replace
184	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	59	None	replace
185	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  f.setAccessible(false);    	non-compiled	[CE]  	59	None	replace
186	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  System.err.println( "Unsafe  object: "  +  unsafe.getClass());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  System.err.println( "Unsafe  object: "  +  unsafe.getClass());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  System.err.println( "Unsafe  object: "  +  unsafe.getClass());  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	59	None	replace
187	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "unsafeInstance ",  Class.class);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "unsafeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "unsafeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	14	None	replace
188	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "createInstance ",  Class.class);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "createInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "createInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	14	None	replace
189	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "newInstance ",  Class.class);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "newInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "newInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	14	None	replace
190	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	14	None	replace
191	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getConstructorId().getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getConstructorId().getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getConstructorId().getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
192	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  null);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  null);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
193	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  false);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
194	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  Class.class,  f);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  Class.class,  f);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  Class.class,  f);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
195	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  safe);  [CE]  cannot  find  symbol  safe  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  safe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  safe);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  safe	43	None	replace
196	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  f.getMethod( "allocateInstance ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  f.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f),  f.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	53	None	replace
197	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
198	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  c.getMethod( "allocateInstance   ",  Class.class);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  c.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f),  c.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	53	None	replace
199	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f,  unsafe).getMethod( "allocateInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f,  unsafe).getMethod( "allocateInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f,  unsafe).getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
200	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
202	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance, ",  Class.class);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
203	[BUG]  [BUGGY]  Method  allocateInstance  =  f.getConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  f.getConstructorId();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  f.getConstructorId();	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
204	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(),  unsafe);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(),  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(),  unsafe);	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  ';'  expected	68	None	replace
205	[BUG]  [BUGGY]  Method  assignInstance  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  assignInstance  =  getConstructorId();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  assignInstance  =  getConstructorId();	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
206	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(),  unsafe;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(),  unsafe;  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(),  unsafe;	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
207	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(unsafe);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(unsafe);	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
208	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(f);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(f);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(f);	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
209	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "rellocateInstance ",  Class.class);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "rellocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "rellocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	16	None	replace
210	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	42	None	replace
211	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	42	None	replace
212	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	42	None	replace
213	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	42	None	replace
214	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignInstance,   ",  Class.class);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignInstance,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignInstance,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  	25	None	replace
215	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance,  class ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
216	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	29	None	replace
217	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	29	None	replace
218	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ");  [CE]  cannot  find  symbol  allocateInstance  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	29	None	replace
219	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
220	[BUG]  [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
221	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  incompatible  types	60	None	replace
222	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  f  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  f  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  f  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	60	None	replace
223	[BUG]  [BUGGY]  Object  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
224	[BUG]  [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
225	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	70	None	replace
226	[BUG]  [BUGGY]  safe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  safe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	safe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  not  a  statement	70	None	replace
227	[BUG]  [BUGGY]  final  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
228	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
229	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	30	None	replace
230	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafe.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafe.getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafe.getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
231	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	30	None	replace
232	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ");  [CE]  cannot  find  symbol  allocateInstance  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	30	None	replace
233	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignment,   ",  Class.class);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignment,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignment,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  	2	None	replace
234	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment,  method,  Class.class);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment,  method,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignment,  method,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	2	None	replace
235	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignment,  class ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
236	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
237	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ".getName());  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ".getName());  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe ".getName());  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
238	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
239	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( " "));  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
240	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafe.getClass());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafe.getClass());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafe.getClass());  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
241	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafeClass.getName());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafeClass.getName());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafeClass.getName());  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
242	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafeClass);  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafeClass);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  unsafeClass);  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
243	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  class ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  class ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  class ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
244	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,   ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,   ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,   ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
245	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  constructorId ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  constructorId ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  constructorId ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
246	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,n ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,n ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,n ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
247	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  null,  Class.class);  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  null,  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
248	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "locateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "locateInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "locateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "locateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
249	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "locateInstance   ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "locateInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "locateInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "locateInstance   ",    Class.class);    	non-compiled	[CE]  	73	None	replace
250	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "localizeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "localizeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "localizeInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "locateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
251	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	41	None	replace
252	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	41	None	replace
253	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	41	None	replace
254	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "allocateInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
255	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "assignInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "assignInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "assignInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	41	None	replace
256	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance   ",  f.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance   ",  f.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance   ",  f.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
257	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  null);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  null);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
258	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  this.class);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  this.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  this.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
259	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
260	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "relocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "relocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "relocateInstance ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
261	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocateInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "reallocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
262	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "relateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "relateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "relateInstance ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
263	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "replaceInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "replaceInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "replaceInstance ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
264	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  safeClass  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
265	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
266	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  safeClass  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
267	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "relativeInstance ",  Class.class);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "relativeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "relativeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
268	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ", "Class.class);  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ", "Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ", "Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	64	None	replace
269	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "removeInstance ", "class ");  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "removeInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "removeInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
270	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "replaceInstance   ",  Class.class);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "replaceInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "replaceInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  	20	None	replace
271	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "replaceInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "replaceInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "replaceInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
272	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "replaceInstance ",  Class.class);  [CE]  cannot  find  symbol  safe  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "replaceInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safe.getMethod( "replaceInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safe	20	None	replace
273	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "invokeInstance ",  Class.class);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "invokeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "invokeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  	24	None	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "locateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "locateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
275	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "locateInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "locateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "locateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "createInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "createInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
277	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "createInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "createInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "createInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "replaceInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "replaceInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
279	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "replaceInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "replaceInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "replaceInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
280	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance,   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance,   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
281	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ",  unsafe,  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ",  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
282	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "invalid ",  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "invalid ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "invalid ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
283	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment "),  Class.class,  unsafe);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment "),  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment "),  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  	72	None	replace
284	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,   ",  Class.class),  unsafe);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance,   ",  Class.class),  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance,   ",  Class.class),  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  	62	None	replace
285	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  newInstance.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  newInstance.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  newInstance.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
286	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  c.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  c.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  c.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
287	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(null);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(null);	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
288	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "replaceInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "replaceInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "replaceInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
289	[BUG]  [BUGGY]  final  Method  allocateInstance  =  class.getMethod( "replaceInstance   ",  Class.class);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  class.getMethod( "replaceInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  class.getMethod( "replaceInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
290	[BUG]  [BUGGY]  if(f!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
291	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " ".class);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " ".class);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( " ".class);  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
292	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  allocator  must  be  initialized. ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  allocator  must  be  initialized. ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  allocator  must  be  initialized. ");  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
293	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
294	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  c.getDeclaredField( "theUnsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
295	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  safe.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  safe.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  safe.getDeclaredField( "theUnsafeAllocator ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
296	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass. ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass. ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass. ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
297	[BUG]  [BUGGY]  if(safe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  safe  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(safe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(safe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol  safe	60	None	replace
298	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  unsafe.getMethod( "allocateInstance ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  unsafe.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f),  unsafe.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	53	None	replace
299	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  false,  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  false,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  false,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
300	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  unsafe,  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
301	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safe,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safe,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safe,  getConstructorId().getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	14	None	replace
302	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "createInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "createInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "createInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
303	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "returnInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "returnInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "returnInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "returnInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
304	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment, ",,  Class.class);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment, ",,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment, ",,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
305	[BUG]  [BUGGY]  final  Method  allocateInstance  =  class.getMethod( "assignment,   ",  Class.class);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  class.getMethod( "assignment,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  class.getMethod( "assignment,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
306	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ", "null ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ", "null ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance ", "null ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	41	None	replace
307	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	66	None	replace
308	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	66	None	replace
309	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  safe  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safe.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safe	18	None	replace
310	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	16	None	replace
311	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass. ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass. ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass. ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
312	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class,  unsafeClass);  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance   ",  Class.class,  unsafeClass);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	7	None	add
313	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	42	None	replace
314	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  null,  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  null,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    c,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
315	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
316	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "replaceInstance ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "replaceInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "replaceInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(),    f.getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	10	None	replace
317	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
318	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  c,  unsafeClass);  [CE]  cannot  find  symbol  c  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  c,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class,  c,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	8	None	replace
319	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "removeInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "removeInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f).getMethod( "removeInstance   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
320	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "assignInstance   ",  Class.class);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "assignInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "assignInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  	50	None	replace
321	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  unsafe.getMethod( "allocateInstance ",  Class.class);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  unsafe.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe),  unsafe.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	51	None	replace
322	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance, ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
323	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
324	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "assignInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "assignInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f).getMethod( "assignInstance   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
325	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  newInstance.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  newInstance.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  newInstance.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
326	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  false);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
327	[BUG]  [BUGGY]  f.setAccessible(null);  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  f.setAccessible(null);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	f.setAccessible(null);	  f.setAccessible(false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	59	None	replace
328	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  getConstructorId().invoke(unsafe,  c);  }  [CE]  cannot  find  symbol  c  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  getConstructorId().invoke(unsafe,  c);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  getConstructorId().invoke(unsafe,  c);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  c	59	None	replace
329	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ".reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	40	None	replace
330	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "reallocateInstance ",  Class.class);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    f,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	44	None	replace
331	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",,  Class.class);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
332	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "reallocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "reallocateInstance ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "reallocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
333	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "resetInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "resetInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "resetInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
334	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  Object.class,  unsafe);  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  Object.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  Object.class,  unsafe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
335	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "class ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	38	None	replace
336	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "allocateInstance   ",  Class.class,  unsafe);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "allocateInstance   ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "allocateInstance   ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  	9	None	replace
337	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
338	[BUG]  [BUGGY]  safe!=  null  &&  unsafe.isInterface())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  safe!=  null  &&  unsafe.isInterface())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	safe!=  null  &&  unsafe.isInterface())  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  not  a  statement	35	None	replace
339	[BUG]  [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe  ==  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe  ==  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	67	None	replace
340	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	67	None	replace
341	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance, ",,  Class.class);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance, ",,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance, ",,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
342	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance, ",,  Class.class);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance, ",,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance, ",,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
343	[BUG]  [BUGGY]  final  Method  allocateInstance  =  class.getMethod( "assignInstance,   ",  Class.class);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  class.getMethod( "assignInstance,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  class.getMethod( "assignInstance,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
344	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  class,  Class.class);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  class,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  class,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    class,    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
345	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  class,  Class.class);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  class,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  class,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    class,    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
346	[BUG]  [BUGGY]  final  Object  unsafeInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafeInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafeInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	30	None	replace
347	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	30	None	replace
348	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
349	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "assignInstance ",  Class.class);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "assignInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance,  getConstructorId().getMethod( "assignInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  	24	None	replace
350	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	26	None	replace
351	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(f.getImplicitPrototype());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(f.getImplicitPrototype());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
352	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getAccessible());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(f.getAccessible());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(f.getAccessible());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
353	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance   ",   "Class. ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance   ",   "Class. ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance   ",   "Class. ");	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",   "Class.   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
354	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance ", "null ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	29	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  null,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    c,    Class.class);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
356	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  null,  Class.class);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  null,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    c,    Class.class);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
357	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe. ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	70	None	replace
358	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getImplicitPrototype());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(f.getImplicitPrototype());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(f.getImplicitPrototype());	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
359	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(null,  unsafe.getMethod( "assignInstance "),  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(null,  unsafe.getMethod( "assignInstance "),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(null,  unsafe.getMethod( "assignInstance "),  Class.class);	  final    Method    allocateInstance    =    this.safe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
360	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,   ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,   ",  Class.class,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,   ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
361	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,   ",  Class.class),  unsafe);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,   ",  Class.class),  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,   ",  Class.class),  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  	71	None	replace
362	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  null,  Class.class);  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  null,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
363	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment, ",  String.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment, ",  String.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment, ",  String.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
364	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "resetInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "resetInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "resetInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
365	[BUG]  [BUGGY]  if(null!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(null!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(null!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
366	[BUG]  [BUGGY]  if(safe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(safe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(safe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
367	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  f,  unsafeClass);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  f,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  f,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
368	[BUG]  [BUGGY]  if(f!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
369	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
370	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
371	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  unsafe);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
372	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  predicate);  [CE]  cannot  find  symbol  predicate  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  predicate);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe,  predicate);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol  predicate	43	None	replace
373	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(replaceInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(replaceInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(replaceInstance  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
374	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  f,  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  f,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance   ",  f,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
375	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe,  f).getMethod( "allocateInstance   ",  f,  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe,  f).getMethod( "allocateInstance   ",  f,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe,  f).getMethod( "allocateInstance   ",  f,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
376	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",  unsafe,  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
377	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ", "class ");  [CE]  cannot  find  symbol  safeClass  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "allocateInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
378	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "reallocateInstance ", "class ");  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "reallocateInstance ", "class ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "reallocateInstance ", "class ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
379	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
380	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocateInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocateInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "reallocateInstance, ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
381	[BUG]  [BUGGY]  final  Method  allocateInstance  =  reallocate.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  reallocate  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  reallocate.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  reallocate.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  reallocate	47	None	replace
382	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  method ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  method ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  method ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
383	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  class, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  class, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  class, ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
384	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  constructorId ",  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment,  constructorId ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment,  constructorId ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
385	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ".getMethod( "allocateInstance ",  unsafe,  Class.class);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ".getMethod( "allocateInstance ",  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ".getMethod( "allocateInstance ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  	6	None	replace
386	[BUG]  [BUGGY]  final  Method  allocateInstance  =  this.assignInstance.getMethod( "assignInstance,   ",  Class.class);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  this.assignInstance.getMethod( "assignInstance,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  this.assignInstance.getMethod( "assignInstance,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	25	None	replace
387	[BUG]  [BUGGY]  final  Method  allocateInstance  =  this.safe.getMethod( "assignInstance,   ",  Class.class);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  this.safe.getMethod( "assignInstance,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  this.safe.getMethod( "assignInstance,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance,   ",    Class.class);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	25	None	replace
388	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  f.setAccessible(false);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  f.setAccessible(false);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  f.setAccessible(false);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	69	None	replace
389	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  newInstance);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  newInstance);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	17	None	replace
390	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  c.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  c.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  unsafe,  c.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "demoveInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "demoveInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
392	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "demoveInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "demoveInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "demoveInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "detectInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "detectInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
394	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "detectInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "detectInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "detectInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "findInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "findInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
396	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "findInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "findInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "findInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",removeInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
397	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "assignInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "assignInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "assignInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	29	None	replace
398	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator. ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeAllocator. ");	  Class    <?>    unsafeClass    =    unsafe.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	37	None	replace
399	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance   ",  unsafe,  Class.class);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance   ",  unsafe,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance   ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance       ",    unsafe,    Class.class);    	non-compiled	[CE]  	65	None	replace
400	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "assignment "),  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "assignment "),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment ".getMethod( "assignment "),  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
401	[BUG]  [BUGGY]  if(f!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
402	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
403	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId();	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
404	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  not  a  statement	67	None	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "declaredInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "declaredInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
406	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "declaredInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "declaredInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "declaredInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "resetInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "resetInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
408	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "resetInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "resetInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "resetInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ",reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
409	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
410	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  Class  <  T>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  Class  <  T>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  Class  <  T>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
411	[BUG]  [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  Class  <  T>  c  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  Class  <  T>  c  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  f.setAccessible(false);  }  else  {  Class  <  T>  c  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
412	[BUG]  [BUGGY]  final  Method  allocateInstance  =(unsafe!=  null)?  getConstructorId().getMethod( "removeInstance "):  getConstructorId().getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =(unsafe!=  null)?  getConstructorId().getMethod( "removeInstance "):  getConstructorId().getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =(unsafe!=  null)?  getConstructorId().getMethod( "removeInstance "):  getConstructorId().getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
413	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  	14	None	replace
414	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "removeInstance "),  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "removeInstance "),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "removeInstance "),  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
415	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	16	None	replace
416	[BUG]  [BUGGY]  if(f.isInterface())  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f.isInterface())  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f.isInterface())  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
417	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  getConstructorId();	  if(unsafe!=    null)    {    Class    <?>    unsafeClass    =    getConstructorId();    if(unsafe!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	57	None	replace
418	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(f.getModule());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(f.getModule());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(f.getModule());	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
419	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId(f.getRawClass());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Method  allocateInstance  =  getConstructorId(f.getRawClass());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId(f.getRawClass());	  Method    allocateInstance    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
420	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "instance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "instance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "instance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
421	[BUG]  [BUGGY]  if(f  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f  ==  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
422	[BUG]  [BUGGY]  if(f!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(f!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(f!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    final    Method    allocateInstance    =    getConstructorId();    if(removeInstance    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
423	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
424	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafeClass   ");    f.setAccessible(true);    }    	non-compiled	[CE]  incompatible  types	60	None	replace
425	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafe.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
426	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  c);  [CE]  cannot  find  symbol  c  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  c);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  c);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
427	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  newInstance);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance ",  unsafe,  newInstance);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance       ",    unsafe.class);    	non-compiled	[CE]  cannot  find  symbol  newInstance	13	None	replace
428	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe ");	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	35	None	replace
429	[BUG]  [BUGGY]  Object  unsafe  =  f.get(unsafe);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(unsafe);	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
430	[BUG]  [BUGGY]  Object  unsafe  =  f.get(f.getImmediateParentPointer());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Object  unsafe  =  f.get(f.getImmediateParentPointer());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(f.getImmediateParentPointer());	  Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	54	None	replace
431	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  f.getName());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  f.getName());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: "  +  f.getName());  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
432	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  safe  class: "  +  f.getName());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  safe  class: "  +  f.getName());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  safe  class: "  +  f.getName());  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
433	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( "Unsafe  class: ");  }	  if(unsafe!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	36	None	replace
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
435	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class,  unsafeClass);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class,  unsafeClass);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
436	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  newInstance);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  newInstance);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    Class.class,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  newInstance	8	None	replace
437	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }	  if(unsafe!=    null)    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  	66	None	replace
438	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "localateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "localateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "localateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "locateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
439	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  f.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  f.getMethod( "removeInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  f.getMethod( "removeInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
440	[BUG]  [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ".getRawClass());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ".getRawClass());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance ".getRawClass());	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocatedInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
441	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: "  +  f.getName());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: "  +  f.getName());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: "  +  f.getName());  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
442	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: ");  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  class: ");  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
443	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  safe  method: "  +  f.getName());  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  safe  method: "  +  f.getName());  }  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( "Unsafe  safe  method: "  +  f.getName());  }	  if(unsafe!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	34	None	replace
444	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  null,  Class.class);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  null,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  null,  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
445	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  method ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  method ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance,  method ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
446	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "alignment ",  Class.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "alignment ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "alignment ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
447	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocation ",  Class.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocation ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocation ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
448	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getRawClass(),  Class.class);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment ".getRawClass(),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment ".getRawClass(),  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "assignment   "),    Class.class);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
449	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  unsafe);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class,    unsafe);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "relatedInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "relatedInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ".reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
451	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "relatedInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "relatedInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "relatedInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   ".reallocateInstance       ",    Class.class);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
452	[BUG]  [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);  [CE]  cannot  find  symbol  allocateInstance  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  assignInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  assignInstance  =  unsafeClass.getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    assignInstance    =    unsafeClass.getMethod(   "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  allocateInstance	41	None	replace
453	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  class.getMethod( "allocateInstance ",  Class.class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe),  class.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe),  class.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(unsafe).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
454	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "returnInstance ",  Class.class);  [CE]  cannot  find  symbol  safeClass  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  safeClass.getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safeClass.getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "reallocateInstance       ",    Class.class);    final    Method    allocateInstance    =    safeClass.getMethod(       "reallocateInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol  safeClass	64	None	replace
455	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "replaceInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "replaceInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "replaceInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
456	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.replaceInstance( "replaceInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.replaceInstance( "replaceInstance   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.replaceInstance( "replaceInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "replaceInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
457	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  class, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  class, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,  class, ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
458	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  method ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance,  method ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance,  method ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "removeInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
459	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafe);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Object  unsafe  =  f.get(unsafe);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(unsafe);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	31	None	replace
460	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "returnInstance ",  Class.class);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "returnInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    f,    getConstructorId().getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	44	None	replace
461	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  f,  unsafeClass,  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  f,  unsafeClass,  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  f,  unsafeClass,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance       ",    f,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
462	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ".getRawClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ".getRawClass());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ".getRawClass());	  final    Method    allocateInstance    =    unsafeClass.getMethod(       "removeInstance       ",    Class.class);    final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
463	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.class, ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.class, ");  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",   "Class.class, ");	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",   "Class.   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
464	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  class, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  class, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  class, ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
465	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  method ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  method ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance,  method ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance,   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
466	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "assignInstance "),  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "assignInstance "),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "assignInstance "),  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
467	[BUG]  [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "assignInstance ",  Class.class);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "assignInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  newInstance(unsafe,  getConstructorId().getMethod( "assignInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe,    getConstructorId().getMethod(   "assignInstance       ",    Class.class);    	non-compiled	[CE]  	24	None	replace
468	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getDeclaringClass(),  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getDeclaringClass(),  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getDeclaringClass(),  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
469	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getRawClass());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getRawClass());  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment ".getRawClass());	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "assignment       ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
470	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  f.getMethod( "allocateInstance, ",  Class.class);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  f.getMethod( "allocateInstance, ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f),  f.getMethod( "allocateInstance, ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  	53	None	replace
471	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  class.getMethod( "allocateInstance ",  Class.class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f),  class.getMethod( "allocateInstance ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f),  class.getMethod( "allocateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId(f).getMethod(   "allocateInstance       ",    Class.class);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
472	[BUG]  [BUGGY]  final  Method  allocateInstance  =  this.assignment.getMethod( "assignment,   ",  Class.class);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);      [BUGGY]  final  Method  allocateInstance  =  this.assignment.getMethod( "assignment,   ",  Class.class);  [BUGGY]      return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  this.assignment.getMethod( "assignment,   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment,   ",    Class.class);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	2	None	replace
