bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignment, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
3	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  f,  Class.class);  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  f,  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  f,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	13	None	replace
4	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  c,  Class.class);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  c,  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance   ",  c,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
5	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  c,  Class.class);  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  c,  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  c,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  cannot  find  symbol  c	13	None	replace
6	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  f,  Class.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  f,  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance   ",  f,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
8	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafeClass);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafeClass);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
9	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
10	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "allocateInstance   ",  Class.class);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "allocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(),  f.getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance, ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
12	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
13	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",  unsafe.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",  unsafe.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance   ",  unsafe.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
14	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "removeInstance   ",  Class.class);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "removeInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",    Class.class);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "removeInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
16	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "allocateInstance   ",  Class.class);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "allocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  unsafe.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  unsafe.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  unsafe.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
18	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
19	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "returnInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "returnInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "returnInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
20	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "replaceInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "replaceInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "replaceInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
21	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "resetInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "resetInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "resetInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
22	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ", "Class. ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ", "Class. ");  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ", "Class. ");	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
23	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
24	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignInstance   ",  Class.class);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe,  getConstructorId().getMethod( "assignInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
26	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance   ",    Class.class);    final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	3	None	add
27	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ",removeInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ",removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance   ",    Class.class);    final  Method  allocateInstance  =  unsafeClass.getMethod( ",removeInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	3	None	add
28	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ".removeInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ".removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance   ",    Class.class);    final  Method  allocateInstance  =  unsafeClass.getMethod( ".removeInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	3	None	add
29	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance   ",    Class.class);    final  Method  assignInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	3	None	add
30	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "removeInstance   ",  Class.class);  final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "removeInstance   ",    Class.class);    final  Method  allocatedInstance  =  unsafeClass.getMethod( "removeInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	3	None	add
31	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Object  unsafe  =  f.get(null);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Object  unsafe  =  f.get(null);	      	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	8	None	replace
32	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
33	[BUG]  [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  final  Method  allocateInstance  =  getConstructorId();  if(removeInstance  ==  null)  {  return  new  UnsafeAllocator();  }	      	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
34	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  allocateInstance	8	None	replace
35	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalArgumentException( " "));  }	      	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  allocateInstance  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  allocateInstance	8	None	replace
37	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Class  <?>  unsafeClass  =  unsafe.getDeclaredField( "theUnsafeAllocator ");	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	8	None	replace
38	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	11	None	add
39	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ",reallocateInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ",reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    final  Method  allocateInstance  =  unsafeClass.getMethod( ",reallocateInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	11	None	add
40	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ".reallocateInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  unsafeClass.getMethod( ".reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    final  Method  allocateInstance  =  unsafeClass.getMethod( ".reallocateInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	11	None	add
41	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    final  Method  assignInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	11	None	add
42	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    final  Method  allocatedInstance  =  unsafeClass.getMethod( "reallocateInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	11	None	add
43	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
44	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance   ",  Class.class);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f,  getConstructorId().getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance, ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
46	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "reallocateInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "reallocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
47	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "reallocateInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
48	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafe);  [CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafe);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class,  unsafe);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  method  getMethod  in  class  Class<T>  cannot  be  applied  to  given  types;	13	None	replace
49	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  class,  Class.class);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  class,  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  class,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignInstance   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
51	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(unsafe).getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    c.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
52	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "removeInstance, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "removeInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "removeInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance   ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId(f).getMethod( "allocateInstance   ",  Class.class);	  final    Method    allocateInstance    =    f.getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
54	[BUG]  [BUGGY]  Object  unsafe  =  f.get(null);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  Object  unsafe  =  f.get(null);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Object  unsafe  =  f.get(null);	      	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	8	None	replace
55	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
56	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(false);  }	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
57	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  unsafeClass  =  getConstructorId();  if(unsafe!=  null)  {  return  new  UnsafeAllocator();  }	      	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
58	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
59	[BUG]  [BUGGY]  f.setAccessible(false);  [CE]  cannot  find  symbol  allocateInstance  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  f.setAccessible(false);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	f.setAccessible(false);	      	non-compiled	[CE]  cannot  find  symbol  allocateInstance	8	None	replace
60	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafeClass ");  f.setAccessible(true);  }	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
61	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment   ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "assignment   ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
62	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance, ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignInstance, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignInstance, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
63	[BUG]  [BUGGY]  final  Method  allocateInstance  =  this.safe.getMethod( "assignInstance ",  Class.class);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  this.safe.getMethod( "assignInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  this.safe.getMethod( "assignInstance ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignInstance   ",    Class.class);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	5	None	replace
64	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  safeClass.getMethod(   "reallocateInstance   ",  Class.class);  [CE]  variable  allocateInstance  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod(   "reallocateInstance   ",  Class.class);  final  Method  allocateInstance  =  safeClass.getMethod(   "reallocateInstance   ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final    Method    allocateInstance    =    unsafeClass.getMethod(   "reallocateInstance   ",    Class.class);    final  Method  allocateInstance  =  safeClass.getMethod(   "reallocateInstance   ",  Class.class);	  	non-compiled	[CE]  variable  allocateInstance  is  already  defined  in  method  create()	11	None	add
65	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  unsafe,  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  unsafe,  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance   ",  unsafe,  Class.class);	  final    Method    allocateInstance    =    unsafeClass.getMethod(   "allocateInstance   ",    newInstance,    Class.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
66	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  return  new  UnsafeAllocator();  }	      	non-compiled	[CE]  incompatible  types	8	None	replace
67	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	      	non-compiled	[CE]  incompatible  types	8	None	replace
68	[BUG]  [BUGGY]  Method  allocateInstance  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  Method  allocateInstance  =  getConstructorId();  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	Method  allocateInstance  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
69	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  incompatible  types  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	      	non-compiled	[CE]  incompatible  types	8	None	replace
70	[BUG]  [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	if(unsafe!=  null)  {  Class  <?>  c  =  unsafe.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	      	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
71	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment, ",  Class.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment, ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment, ",  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
72	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment "),  Class.class);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "assignment "),  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "assignment "),  Class.class);	  final    Method    allocateInstance    =    unsafe.getMethod(   "assignment   ",    Class.class);    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "locateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);    [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "locateInstance ",  Class.class);  [BUGGY]    return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "locateInstance ",  Class.class);	  final    Method    allocateInstance    =    getConstructorId().getMethod(   "allocateInstance   ",    Class.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
