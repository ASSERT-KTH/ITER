bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "allocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
2	[BUG]  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  f.getMethod( "allocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	compilable	  [FE]  AssertionFailedError  	10	1	replace
4	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "removeInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	compilable	  [FE]  AssertionFailedError  	10	1	replace
5	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "removeInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
7	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment ",  Class.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafe.getMethod( "assignment ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafe.getMethod( "assignment ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  allocateInstance  [FE]                AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]    [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	  	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol  allocateInstance	10	None	replace
9	[BUG]  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  getConstructorId().getMethod( "allocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
10	[BUG]  [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  safe  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  safe.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  safe.getMethod( "allocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol  safe	10	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	add	final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	compilable	  [FE]  AssertionFailedError  	10	1	replace
12	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "reallocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	compilable	  [FE]  AssertionFailedError  	10	1	replace
13	[BUG]  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  newInstance,  Class.class);  [CE]  cannot  find  symbol  newInstance  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  newInstance,  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  newInstance,  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol  newInstance	10	None	replace
14	[BUG]  [BUGGY]  final  Method  allocateInstance  =  c.getMethod( "allocateInstance ",  Class.class);  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  [BUGGY]  final  Method  allocateInstance  =  c.getMethod( "allocateInstance ",  Class.class);  [BUGGY]  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	43	43	2	replace	final  Method  allocateInstance  =  c.getMethod( "allocateInstance ",  Class.class);	final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  	non-compiled	[CE]  cannot  find  symbol  c	10	None	replace
