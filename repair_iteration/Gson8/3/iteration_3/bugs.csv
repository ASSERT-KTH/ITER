bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isConstructor())    {    f.setConstructor(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isConstructor())    {    f.setConstructor(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  if(f.isConstructor())  {  f.setConstructor(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor())  {  f.setConstructor(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f.setConstructor(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isConstructor())    {    f.setConstructor(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isConstructor())    {    f.setConstructor(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
5	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
6	[BUG]  [BUGGY]  if(null!=  unsafeClass)  {  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  unsafeClass)  {  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  unsafeClass)  {  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
7	[BUG]  [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
8	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
9	[BUG]  [BUGGY]  if(f!=  null)  {  if(f  ==  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f  ==  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
10	[BUG]  [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
12	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
14	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
15	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	65	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
17	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
18	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".. ");  }  [CE]  malformed  floating  point  literal  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".. ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".. ");  }	  	non-compiled	[CE]  malformed  floating  point  literal	65	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
20	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	65	1	add
21	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	65	None	add
22	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
23	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
24	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "null ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
25	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
26	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "misc.theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "misc.theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "misc.theUnsafe ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
27	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
28	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	46	None	replace
29	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	46	None	replace
30	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_safe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_safe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_safe ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	46	None	replace
32	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	100	None	replace
33	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	100	None	replace
34	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  safeClass.getDeclaredField( "theUnsafe   ");	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	100	None	replace
35	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  <identifier>  expected	100	None	replace
36	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe, ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe, ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe, ");	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	100	None	replace
37	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe_safe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe_safe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe_safe ");	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	100	None	replace
38	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe. ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafe. ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
39	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ",  unsafeClass);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ",  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafe ",  unsafeClass);	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
40	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  unsafeClass);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  unsafeClass);	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
41	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass. ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
42	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setAccessibility(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
43	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  Factory  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol  Factory	51	None	replace
44	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessibility(unsafeClass.isAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessibility(unsafeClass.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());  f.setAccessibility(unsafeClass.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
45	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  F  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol  F	51	None	replace
46	[BUG]  [BUGGY]  f.setAccessible(true);  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setAccessibility(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
47	[BUG]  [BUGGY]  f.setAccessible(true,  true,  false,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean,Class<CAP#1>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  true,  false,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true,  false,  unsafeClass);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean,Class<CAP#1>)	79	None	replace
48	[BUG]  [BUGGY]  f.setAccessible(true,  false,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  true);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	79	None	replace
49	[BUG]  [BUGGY]  f.setAccessible(true,  true,  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  true,  false,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true,  false,  safeClass);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	79	None	replace
50	[BUG]  [BUGGY]  f.setAccessible(true,  true,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean,<null>)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  true,  false,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true,  false,  null);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean,<null>)	79	None	replace
51	[BUG]  [BUGGY]  f.setAccessible(true,  false,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  false);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	79	None	replace
52	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
53	[BUG]  [BUGGY]  if(f.isInstance()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
54	[BUG]  [BUGGY]  if(f!=  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
55	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	18	None	replace
56	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	18	None	replace
57	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	18	None	replace
58	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	replace
59	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
60	[BUG]  [BUGGY]  f.setAccessible(true);  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
61	[BUG]  [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setInstance(f.isInstance());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  f.isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	150	None	replace
62	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  Factory  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol  Factory	150	None	replace
63	[BUG]  [BUGGY]  f.setAccessible(isAccessible());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
64	[BUG]  [BUGGY]  f.setAccessible(true,  false,  null,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>,Class<CAP#1>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  null,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  null,  unsafeClass);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>,Class<CAP#1>)	78	None	replace
65	[BUG]  [BUGGY]  f.setAccessible(true,  true,  null,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>,Class<CAP#1>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  true,  null,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true,  null,  unsafeClass);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>,Class<CAP#1>)	78	None	replace
66	[BUG]  [BUGGY]  f.setAccessible(true,  null,  false,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,Class<CAP#1>)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  false,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  false,  unsafeClass);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,Class<CAP#1>)	78	None	replace
67	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  false,  null);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,<null>)	78	None	replace
68	[BUG]  [BUGGY]  f.setAccessible(false,  false,  null,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>,Class<CAP#1>)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  null,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  null,  unsafeClass);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>,Class<CAP#1>)	78	None	replace
69	[BUG]  [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,<null>)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  unsafeClass,  null);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,<null>)	78	None	replace
70	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
71	[BUG]  [BUGGY]  f.setAccessible(true);  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
72	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  Factory  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  cannot  find  symbol  Factory	147	None	replace
73	[BUG]  [BUGGY]  f.setAccessible(f.accessible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.accessible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.accessible());  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
74	[BUG]  [BUGGY]  f.setAccessible(null);  f.setVisible(f.isVisible());  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null);  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null);  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	147	None	replace
75	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	106	None	replace
76	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
77	[BUG]  [BUGGY]  if(f.isInterface()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
78	[BUG]  [BUGGY]  if(f.isInterface()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
79	[BUG]  [BUGGY]  if(f.isInterface()  ||  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface()  ||  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface()  ||  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  	20	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());	  	compilable	  [FE]  AssertionFailedError  	48	2	add
81	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());	  	compilable	  [FE]  AssertionFailedError  	48	2	add
82	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());  f.setAccuracy(f.isAccuracy());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
83	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setIsAccessible(f.isIsAccessible());  f.setIsAccessible(f.isIsAccessible());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setIsAccessible(f.isIsAccessible());  f.setIsAccessible(f.isIsAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setIsAccessible(f.isIsAccessible());  f.setIsAccessible(f.isIsAccessible());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
84	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());  f.setVisible(f.isVisible());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
85	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessibility());  f.setAccessibility(f.isAccessibility());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessibility());  f.setAccessibility(f.isAccessibility());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessibility());  f.setAccessibility(f.isAccessibility());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
86	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
87	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());  f.setAccessibility(f.isAccessible());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
88	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(null);  f.setAccessible(f.isAccessible());  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                  AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(null);  f.setAccessible(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessible(null);  f.setAccessible(f.isAccessible());	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	48	None	add
89	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	compilable	  [FE]  AssertionFailedError  	140	1	replace
91	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	compilable	  [FE]  AssertionFailedError  	140	1	replace
92	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
93	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
94	[BUG]  [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	140	None	replace
95	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
97	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
99	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( ".theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( ".theUnsafe ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
101	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( ".theUnsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( ".theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( ".theUnsafe ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
102	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ".);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theUnsafe ".);	  	non-compiled	[CE]  <identifier>  expected	121	None	add
103	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theUnsafe ",  null);	  	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	121	None	add
104	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  f.setAccessible(f.isAccessible());    final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
105	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  f.setAccessible(f.isAccessible());    final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	53	None	replace
106	[BUG]  [BUGGY]  f.setConstructorId(null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setConstructorId(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setConstructorId(null);	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
107	[BUG]  [BUGGY]  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  	120	None	replace
108	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessibility(false);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessibility(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessibility(false);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
109	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(true);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
110	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false,  unsafeClass);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false,  unsafeClass);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false,  unsafeClass);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
111	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAccessible(f.getAccessible());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAccessible(f.getAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setAccessible(f.getAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
112	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [CE]  cannot  find  symbol  Factory  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  Factory	109	None	replace
113	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  incompatible  types	109	None	replace
114	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [CE]  cannot  find  symbol  F  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol  F	109	None	replace
115	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  final  String  constructorId  =  f.getName();  [CE]  variable  constructorId  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  final  String  constructorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    final  String  constructorId  =  f.getName();	  	non-compiled	[CE]  variable  constructorId  is  already  defined  in  method  create()	159	None	add
116	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  final  Class  <?>  constructorId  =  f.getName();  [CE]  variable  constructorId  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  final  Class  <?>  constructorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    final  Class  <?>  constructorId  =  f.getName();	  	non-compiled	[CE]  variable  constructorId  is  already  defined  in  method  create()	159	None	add
117	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  Final  String  constructorId  =  f.getName();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  Final  String  constructorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    Final  String  constructorId  =  f.getName();	  	non-compiled	[CE]  ';'  expected	159	None	add
118	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  Class  <?>  f  =  f.getName();  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  Class  <?>  f  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    Class  <?>  f  =  f.getName();	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	159	None	add
119	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  final  String  constructorId  =  f.getName());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  final  String  constructorId  =  f.getName());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    final  String  constructorId  =  f.getName());	  	non-compiled	[CE]  ';'  expected	159	None	add
120	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  static  final  String  constructorId  =  f.getName();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  static  final  String  constructorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    static  final  String  constructorId  =  f.getName();	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
121	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  String  constructorId  =  f.getName();  [CE]  variable  constructorId  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  String  constructorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    String  constructorId  =  f.getName();	  	non-compiled	[CE]  variable  constructorId  is  already  defined  in  method  create()	159	None	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
123	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
125	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
127	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
129	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
131	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "this.unsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "this.unsafe   ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "this.unsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "this.unsafeAllocator ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
133	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "this.unsafeAllocator ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "this.unsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "this.unsafeAllocator ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
135	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "misc.unsafe.class ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
136	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
137	[BUG]  [BUGGY]  f.setAccessible(true);  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
138	[BUG]  [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  f.isAccessible());  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	52	None	replace
139	[BUG]  [BUGGY]  f.setAccessible(isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(isAccessible());  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
140	[BUG]  [BUGGY]  f.setAccessible(null);  f.setAccuracy(f.isAccuracy());  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null);  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null);  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	52	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
142	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
144	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	55	2	add
145	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  If(f  ==  null)  {  f.setAccessible(true);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  If(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    If(f  ==  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  ';'  expected	55	None	add
146	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  >=  null)  {  f.setAccessible(true);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  >=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    if(f  >=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	55	None	add
147	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	55	None	add
148	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    if(f    ==    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	86	None	replace
149	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    if(f    ==    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	86	None	replace
150	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  if(f  ==  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  if(f  ==  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    if(f    ==    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	86	None	replace
151	[BUG]  [BUGGY]  f.setAccessible(false,  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  safeClass);	  f.setAccessible(false,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	127	None	replace
152	[BUG]  [BUGGY]  f.setAccessible(false,  false,  c);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  c);	  f.setAccessible(false,    false);    	non-compiled	[CE]  cannot  find  symbol  c	127	None	replace
153	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	61	None	replace
154	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	163	None	replace
155	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
156	[BUG]  [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f))  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
158	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
159	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
161	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	134	1	add
162	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
163	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
164	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setUnsafe(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
165	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isConstructor())  {  f.setConstructor(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isAccessible())  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
167	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isAccessible())  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
168	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccuracy())  {  f.setAccuracy(false);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccuracy())  {  f.setAccuracy(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isAccuracy())  {  f.setAccuracy(false);  }	  	non-compiled	[CE]  cannot  find  symbol	164	None	add
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isAccessible())  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
170	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isAccessible())  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
171	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  If(f.isAccessible())  {  f.setAccessible(false);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  If(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    If(f.isAccessible())  {  f.setAccessible(false);  }	  	non-compiled	[CE]  ';'  expected	164	None	add
172	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isUnsafe())  {  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isUnsafe())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isUnsafe())  {  f.setAccessible(false);  }	  	non-compiled	[CE]  cannot  find  symbol	164	None	add
173	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(f  false);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  if(f.isAccessible())  {  f.setAccessible(f  false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    if(f.isAccessible())  {  f.setAccessible(f  false);  }	  	non-compiled	[CE]  ')'  expected	164	None	add
174	[BUG]  [BUGGY]  if(unsafeClass.isAssignableFrom(f))  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isAssignableFrom(f))  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isAssignableFrom(f))  {  if(f.isAccessible())  {  f.setAccessible(true);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  'catch'  without  'try'	138	None	replace
175	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(null);  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(null);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(null);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  'catch'  without  'try'	138	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
177	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
179	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
181	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
182	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	58	None	add
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
184	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
185	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	58	None	add
186	[BUG]  [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  if(f!=    null)    {    f.setAccessible(true);    }    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	90	None	replace
187	[BUG]  [BUGGY]  f.setInterface(false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setInterface(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setInterface(false);	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
188	[BUG]  [BUGGY]  if(f.isInterface()  ||  f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface()  ||  f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface()  ||  f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
189	[BUG]  [BUGGY]  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	167	None	replace
190	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
191	[BUG]  [BUGGY]  if(f.isInterface())  {  f  =  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f  =  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f  =  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
192	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	25	None	replace
193	[BUG]  [BUGGY]  UnsafeAllocator  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  UnsafeAllocator  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	UnsafeAllocator  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	25	None	replace
194	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	25	None	replace
195	[BUG]  [BUGGY]  safeClass.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	25	None	replace
196	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
197	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
198	[BUG]  [BUGGY]  f.setAccessible(true);  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
199	[BUG]  [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  f.isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	107	None	replace
200	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  Factory  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol  Factory	107	None	replace
201	[BUG]  [BUGGY]  f.setAccessible(isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
202	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  if(f.isAccessible())  {  f.setAccessible(true);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
203	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(f);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(f);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	43	None	replace
204	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(c);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  cannot  find  symbol  c	43	None	replace
205	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(f.getClass());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(f.getClass());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	43	None	replace
206	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(unsafeClass);	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	43	None	replace
207	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(f.getName());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(f.getName());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	43	None	replace
208	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "unsafe "));	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	2	add
210	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	2	add
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	60	2	add
212	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	60	2	add
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
214	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
215	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	60	None	add
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	2	add
217	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	2	add
218	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	60	None	add
219	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setInterface(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setInterface(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setInterface(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
220	[BUG]  [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
221	[BUG]  [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAssignableFrom(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAssignableFrom(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f))  {  f.setAssignableFrom(f);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
222	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
224	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
226	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
228	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
229	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	62	None	add
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
231	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
232	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
234	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
236	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
237	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	49	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
239	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
241	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
242	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isInstance())    {    f.setInstance(null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
243	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(null);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isInstance())    {    f.setInstance(null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
244	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isInstance())    {    f.setInstance(null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
246	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
248	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
250	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
252	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
254	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
255	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	37	None	add
256	[BUG]  [BUGGY]  if(f!=  null  &&  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  &&  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  &&  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	21	None	replace
257	[BUG]  [BUGGY]  if(f!=  null  ||  f.isInterface())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isInterface())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isInterface())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
258	[BUG]  [BUGGY]  if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	21	None	replace
259	[BUG]  [BUGGY]  if(f!=  null  ||  f.isConstructor())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isConstructor())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isConstructor())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
260	[BUG]  [BUGGY]  f  =  f.setAccessible(false);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(false);	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	132	None	replace
261	[BUG]  [BUGGY]  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  safeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol  safeClass	132	None	replace
262	[BUG]  [BUGGY]  Object  f  =  f.setAccessible(false);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.setAccessible(false);	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	132	None	replace
263	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();	  if(f    ==    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	15	None	replace
264	[BUG]  [BUGGY]  f.setInstance(false);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setInstance(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setInstance(false);	  if(f.isInstance())    {    f.setInstance(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
265	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setInstance(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
266	[BUG]  [BUGGY]  if(f.isInstance())  {  f  =  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f  =  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f  =  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setInstance(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
267	[BUG]  [BUGGY]  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setInstance(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	166	None	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	40	2	add
269	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	40	2	add
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	40	2	add
271	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	40	2	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	40	2	add
273	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	40	2	add
274	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  If(f  ==  null)  {  f.setAccessible(false);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  If(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    If(f  ==  null)  {  f.setAccessible(false);  }	  	non-compiled	[CE]  ';'  expected	40	None	add
275	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  >=  null)  {  f.setAccessible(false);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  >=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    if(f  >=  null)  {  f.setAccessible(false);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	40	None	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
277	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
279	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
281	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
282	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	67	None	add
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
284	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
285	[BUG]  [BUGGY]  f.setAccessible(true,  null,  unsafeClass,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,Class<CAP#1>,boolean)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  unsafeClass,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  unsafeClass,  false);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,Class<CAP#1>,boolean)	81	None	replace
286	[BUG]  [BUGGY]  f.setAccessible(true,  null,  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  false,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  false,  safeClass);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	81	None	replace
287	[BUG]  [BUGGY]  f.setAccessible(true,  null,  true,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,Class<CAP#1>)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  true,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  true,  unsafeClass);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,Class<CAP#1>)	81	None	replace
288	[BUG]  [BUGGY]  f.setAccessible(false,  null,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  null,  false);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)	81	None	replace
289	[BUG]  [BUGGY]  f.setAccessible(true,  null,  safeClass,  false);  [CE]  cannot  find  symbol  safeClass  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  safeClass,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  safeClass,  false);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	81	None	replace
290	[BUG]  [BUGGY]  f.setAccessible(true,  null,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  true);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)	81	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(null,    false);    f.setAccessible(null,  false);	  	compilable	  [FE]  AssertionFailedError  	129	1	add
292	[BUG]  [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    f.setAccessible(null,  false);	  	compilable	  [FE]  AssertionFailedError  	129	1	add
293	[BUG]  [BUGGY]  f.setAccessible(null,  false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	129	None	add
294	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(null,  false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(null,  false);	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	129	None	add
295	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafe  =  f.get(null);  f.setAccessible(null,  false);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafe  =  f.get(null);  f.setAccessible(null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Object  unsafe  =  f.get(null);  f.setAccessible(null,  false);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	129	None	add
296	[BUG]  [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  false);  final  Object  unsafe  =  f.get(null);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  false);  final  Object  unsafe  =  f.get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    f.setAccessible(null,  false);  final  Object  unsafe  =  f.get(null);	  	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	129	None	add
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(null,    false);    f.setAccessible(null,  true);	  	compilable	  [FE]  AssertionFailedError  	129	1	add
298	[BUG]  [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  true);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  f.setAccessible(null,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    f.setAccessible(null,  true);	  	compilable	  [FE]  AssertionFailedError  	129	1	add
299	[BUG]  [BUGGY]  f.setAccessible(null,  false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	129	None	add
300	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "sun.misc.Unsafe ");	  Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	57	None	replace
301	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "class ");	  Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	57	None	replace
302	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "misc.theUnsafe ");	  Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	57	None	replace
303	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe_class ");	  Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	57	None	replace
304	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(true);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(true);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	135	None	replace
305	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  null);	          Class    <?>    c    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
306	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  false);	          Class    <?>    c    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
307	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafeClass ");	          Class    <?>    c    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  incompatible  types	157	None	replace
308	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass, ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass, ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass, ");	          Class    <?>    c    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
309	[BUG]  [BUGGY]  f.setAccessible(false,  false,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  false);	  f.setAccessible(false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	144	None	replace
310	[BUG]  [BUGGY]  f.setAccessible(false,  true,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  true,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  true,  false);	  f.setAccessible(false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	144	None	replace
311	[BUG]  [BUGGY]  f.setAccessible(false,  true,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  true,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  true,  unsafeClass);	  f.setAccessible(false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)	144	None	replace
312	[BUG]  [BUGGY]  f.setAccessible(null,  false,  true);  [CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  false,  true);	  f.setAccessible(false,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean)	144	None	replace
313	[BUG]  [BUGGY]  f.setAccessible(null,  unsafeClass.isAccessible());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  unsafeClass.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  unsafeClass.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
314	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible()  ||  unsafeClass.isAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible()  ||  unsafeClass.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible()  ||  unsafeClass.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
315	[BUG]  [BUGGY]  f.setAccessible(unsafeClass,  c.isAccessible());  [CE]  cannot  find  symbol  c  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass,  c.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass,  c.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol  c	6	None	replace
316	[BUG]  [BUGGY]  f.setAccessible(nullClass.isAccessible());  [CE]  cannot  find  symbol  nullClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(nullClass.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(nullClass.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol  nullClass	6	None	replace
317	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessibleInstance());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessibleInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessibleInstance());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
318	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);	  if(f    ==    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	133	None	replace
319	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f    ==    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	compilable	  [FE]  AssertionFailedError  	114	2	replace
321	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	compilable	  [FE]  AssertionFailedError  	114	2	replace
322	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
323	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	44	None	replace
324	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
325	[BUG]  [BUGGY]  f  =  f.get(null);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.get(null);	  if(f    ==    null)    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	69	None	replace
326	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "unsafeClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
327	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
328	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
329	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
330	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeclass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeclass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeclass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
331	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
332	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe_class ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
333	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	5	None	replace
334	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
336	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
337	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	3	None	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
339	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
340	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	3	None	add
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
342	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
343	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	137	None	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
345	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
346	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
347	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
348	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
349	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	137	None	add
350	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	replace
351	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass. ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	replace
352	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	replace
353	[BUG]  [BUGGY]  final  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafeClass ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	replace
354	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( ".theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( ".theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( ".theUnsafeClass ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	2	replace
356	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	2	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	1	replace
358	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	1	replace
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	2	replace
360	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	2	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	1	replace
362	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	1	replace
363	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    f.setAccessible(true);    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	94	None	replace
364	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
365	[BUG]  [BUGGY]  Factory.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
366	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
367	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
368	[BUG]  [BUGGY]  if(f!=  null)  {  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(unsafeClass!=  null)  {  f.setAccessible(true);  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
369	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
370	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isConstructor())  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isConstructor())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isConstructor())  {  f.setAccessible(true);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
371	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isInstance())  {  f.setAccessible(true);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
373	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
374	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
376	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
377	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  Factory  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  cannot  find  symbol  Factory	108	None	replace
378	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
379	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  incompatible  types	108	None	replace
380	[BUG]  [BUGGY]  f.setAccessible(true);  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
381	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  F  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  cannot  find  symbol  F	108	None	replace
382	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(constructorId);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  constructorId  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(constructorId);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(constructorId);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol  constructorId	73	None	replace
383	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
384	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(false);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);        f.setAccessible(true);    f.setAccessible(false);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	93	2	add
386	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(false);  f.setAccessible(true);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(false);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setAccessible(false);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	93	2	add
387	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setVisible(false);  f.setVisible(true);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setVisible(false);  f.setVisible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setVisible(false);  f.setVisible(true);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(true);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);        f.setAccessible(true);    f.setAccessible(true);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	93	2	add
389	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(true);  f.setAccessible(true);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(true);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setAccessible(true);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	93	2	add
390	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse);  f.setFalse);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse);  f.setFalse);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setFalse);  f.setFalse);	  	non-compiled	[CE]  not  a  statement	93	None	add
391	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(false);  f.setConstructorId(true);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(false);  f.setConstructorId(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setConstructorId(false);  f.setConstructorId(true);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
392	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(true);  f.setConstructorId(null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(true);  f.setConstructorId(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setConstructorId(true);  f.setConstructorId(null);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
393	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(false);  f.setConstructorId(false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(false);  f.setConstructorId(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setConstructorId(false);  f.setConstructorId(false);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
394	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(false);  f.setConstructorId(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setConstructorId(false);  f.setConstructorId(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setConstructorId(false);  f.setConstructorId(null);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
395	[BUG]  [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  constructorId);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  unsafeClass,  constructorId);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  constructorId	77	None	replace
396	[BUG]  [BUGGY]  f.setAccessible(true,  true,  unsafeClass,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  true,  unsafeClass,  constructorId);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true,  unsafeClass,  constructorId);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  constructorId	77	None	replace
397	[BUG]  [BUGGY]  f.setAccessible(true,  false,  safeClass,  unsafeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  safeClass,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  safeClass,  unsafeClass);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	77	None	replace
398	[BUG]  [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  builder);  [CE]  cannot  find  symbol  builder  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  builder);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  unsafeClass,  builder);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  builder	77	None	replace
399	[BUG]  [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  unsafeClass,  safeClass);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	77	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	32	2	add
401	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	32	2	add
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	32	2	add
403	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	32	2	add
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	32	2	add
405	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	32	2	add
406	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  If(f!=  null)  {  f.setAccessible(false);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  If(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    If(f!=  null)  {  f.setAccessible(false);  }	  	non-compiled	[CE]  ';'  expected	32	None	add
407	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  >=  null)  {  f.setAccessible(false);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  >=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    if(f  >=  null)  {  f.setAccessible(false);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	32	None	add
408	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  >>  null)  {  f.setAccessible(false);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f  >>  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    if(f  >>  null)  {  f.setAccessible(false);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	32	None	add
409	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isInterface())    {    f.setInterface(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
410	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
411	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ".getRawClass());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ".getRawClass());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ".getRawClass());	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
412	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
413	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
414	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
415	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
416	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
417	[BUG]  [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
418	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
419	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
420	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(true);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(true);	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
421	[BUG]  [BUGGY]  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isUnsafe())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
422	[BUG]  [BUGGY]  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isUnsafe())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
423	[BUG]  [BUGGY]  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ", ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isUnsafe())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
424	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
425	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
426	[BUG]  [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	95	None	replace
427	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
428	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	155	None	replace
429	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	155	None	replace
430	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	155	None	replace
431	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	155	None	replace
432	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	155	None	replace
433	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	155	None	replace
434	[BUG]  [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  incompatible  types	145	None	replace
435	[BUG]  [BUGGY]  if(f.isConstructor()  ||  f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor()  ||  f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor()  ||  f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
436	[BUG]  [BUGGY]  if(f.isConstructor())  {  f  =  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor())  {  f  =  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f  =  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
437	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
438	[BUG]  [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setStatic(f.isStatic());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  f.isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	148	None	replace
439	[BUG]  [BUGGY]  f.setAccessible(true);  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
440	[BUG]  [BUGGY]  f.setAccessible(isAccessible());  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
441	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  Factory  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol  Factory	148	None	replace
442	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
443	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
444	[BUG]  [BUGGY]  safeClass.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
445	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
446	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Field  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	replace
447	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getFactory().getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getFactory().getConstructorId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getFactory().getConstructorId();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
448	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeClass();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeClass();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getUnsafeClass();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
449	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
450	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  unsafeClass  =  getConstructorId();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
451	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
452	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(c);	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
453	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(f);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(f);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(f);	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
454	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(constructorId);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(constructorId);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(constructorId);	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
455	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(f.getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(f.getName());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(f.getName());	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
456	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(f.getDeclaredField( "unsafeClass "));  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(f.getDeclaredField( "unsafeClass "));  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(f.getDeclaredField( "unsafeClass "));	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
457	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(unsafeClass);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(unsafeClass);	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
458	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	173	None	replace
459	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	173	None	replace
460	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	173	None	replace
461	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	173	None	replace
462	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f.isInstance())  {  f.setInstance(null);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f.isInstance())  {  f.setInstance(null);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f.isInstance())  {  f.setInstance(null);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
464	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
465	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	7	None	add
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
467	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	7	1	add
468	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	7	None	add
469	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
470	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
472	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	8	1	replace
473	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
474	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f    ==    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	72	None	replace
475	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
476	[BUG]  [BUGGY]  if(f.isInstance()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
477	[BUG]  [BUGGY]  if(f.isInstance())  {  f  =  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f  =  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f  =  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
478	[BUG]  [BUGGY]  f.setAccessible(null);  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null);	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	111	None	replace
479	[BUG]  [BUGGY]  f.setAccessible(unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass);	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	111	None	replace
480	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass);  }	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	111	None	replace
481	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)	111	None	replace
482	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(null);  }	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	111	None	replace
483	[BUG]  [BUGGY]  f.setAccessible(unsafeClass,  null);  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass,  null);	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)	111	None	replace
484	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	116	None	replace
485	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
486	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	116	None	replace
487	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
489	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
491	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
492	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  If(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  If(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    If(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	non-compiled	[CE]  ';'  expected	1	None	add
493	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessibility(f.isAccessible());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessibility(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f!=  null)  {  f.setAccessibility(f.isAccessible());  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
494	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  >=  null)  {  f.setAccessible(f.isAccessible());  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  >=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f  >=  null)  {  f.setAccessible(f.isAccessible());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	1	None	add
495	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  >>  null)  {  f.setAccessible(f.isAccessible());  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f  >>  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f  >>  null)  {  f.setAccessible(f.isAccessible());  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	1	None	add
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
497	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
498	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
499	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
500	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInterface())  {  f.setInterface(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
501	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(f.isUnsafe());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(f.isUnsafe());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setUnsafe(f.isUnsafe());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
502	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAll())  {  f.setAllow(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAll())  {  f.setAllow(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAll())  {  f.setAllow(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
504	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
505	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	99	None	replace
506	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".class);	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  <identifier>  expected	99	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	compilable	  [FE]  AssertionFailedError  	99	1	replace
508	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	compilable	  [FE]  AssertionFailedError  	99	1	replace
509	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "class   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	156	None	replace
510	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "class   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	156	None	replace
511	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "class   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	156	None	replace
512	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "class   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	156	None	replace
513	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  Un  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  Un  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  Un	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "class   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	156	None	replace
514	[BUG]  [BUGGY]  f.setInstance(true);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setInstance(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setInstance(true);	  if(f.isInstance())    {    f.setInstance(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
515	[BUG]  [BUGGY]  if(f.isInstance()  ||  f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance()  ||  f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance()  ||  f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setInstance(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
516	[BUG]  [BUGGY]  If(f.isInstance())  {  f.setInstance(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  If(f.isInstance())  {  f.setInstance(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	If(f.isInstance())  {  f.setInstance(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setInstance(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	170	None	replace
517	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(null);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(null);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setInstance(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
518	[BUG]  [BUGGY]  if(f.isInterface()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
519	[BUG]  [BUGGY]  if(f.isInterface())  {  f  =  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f  =  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f  =  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
520	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	19	None	replace
521	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  unsafeClass);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  unsafeClass);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true,  unsafeClass);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>)	19	None	replace
522	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true,  true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	19	None	replace
523	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ",  unsafeClass);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ",  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theClass ",  unsafeClass);	          Class    <?>    c    =    f.getDeclaredField(   "theClass   ");    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
524	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ",  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theClass ",  null);	          Class    <?>    c    =    f.getDeclaredField(   "theClass   ");    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
525	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass. ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theClass. ");	          Class    <?>    c    =    f.getDeclaredField(   "theClass   ");    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
526	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ",  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ",  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theClass ",  false);	          Class    <?>    c    =    f.getDeclaredField(   "theClass   ");    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
527	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "unsafeClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
528	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.UnsafeClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
529	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "misc.unsafeClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
530	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "safeClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
531	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafe   ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
532	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeclass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeclass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "sun.misc.unsafeclass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
533	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	compilable	  [FE]  AssertionFailedError  	126	1	replace
535	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	compilable	  [FE]  AssertionFailedError  	126	1	replace
536	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
537	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
538	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
539	[BUG]  [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  cannot  find  symbol  safeClass  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	126	None	replace
540	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
541	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(null))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	105	None	replace
542	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(null))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	105	None	replace
543	[BUG]  [BUGGY]  Factory.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(null))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	105	None	replace
544	[BUG]  [BUGGY]  if(f.isAssignableFrom(null))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(null))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(null))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(null))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(null,  true);	  f.setAccessible(null,    false);    	compilable	  [FE]  AssertionFailedError  	130	1	replace
546	[BUG]  [BUGGY]  f.setAccessible(null,  true);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  true);	  f.setAccessible(null,    false);    	compilable	  [FE]  AssertionFailedError  	130	1	replace
547	[BUG]  [BUGGY]  f.setAccessible(true,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true);	  f.setAccessible(null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	130	None	replace
548	[BUG]  [BUGGY]  f.setAccessible(unsafeClass,  false);  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,boolean)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass,  false);	  f.setAccessible(null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,boolean)	130	None	replace
549	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    f.setAccessible(true);    }    	non-compiled	[CE]  incompatible  types	39	None	replace
550	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
551	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);  f.setAccessible(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(false);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
553	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);  f.setAccessible(false);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(false);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
554	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setConstructorId(null);  f.setConstructorId(null);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setConstructorId(null);  f.setConstructorId(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setConstructorId(null);  f.setConstructorId(null);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
555	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setVisible(false);  f.setVisible(false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setVisible(false);  f.setVisible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setVisible(false);  f.setVisible(false);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
557	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);  f.setAccessible(true);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(false);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
559	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);  f.setAccessible(true);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(true);  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(true);  f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	91	2	add
560	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessibility(true);  f.setAccessibility(false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessibility(true);  f.setAccessibility(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setAccessibility(true);  f.setAccessibility(false);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
561	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setConstructorId(true);  f.setConstructorId(false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setConstructorId(true);  f.setConstructorId(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setConstructorId(true);  f.setConstructorId(false);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
562	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    UnsafeAllocatorException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
563	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	154	None	replace
564	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false,  true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	154	None	replace
565	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  unsafeClass  =  getConstructorId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  unsafeClass  =  getConstructorId();	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	75	None	replace
566	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  getConstructorId();	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	75	None	replace
567	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
568	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	54	None	replace
569	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class ");	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
570	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.. ");  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.. ");	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
571	[BUG]  [BUGGY]  ||  f!=  null)  {  f.setAccessible(false);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  ||  f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	||  f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(false);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
572	[BUG]  [BUGGY]  f.setAccessible(true,  false,  this.safeClass);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  this.safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  this.safeClass);	  f.setAccessible(true,    false,    safeClass);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	80	None	replace
573	[BUG]  [BUGGY]  f.setAccessible(true,  false,  UnsafeAllocator.class);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<UnsafeAllocator>)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  UnsafeAllocator.class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  UnsafeAllocator.class);	  f.setAccessible(true,    false,    safeClass);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<UnsafeAllocator>)	80	None	replace
574	[BUG]  [BUGGY]  f.setAccessible(true,  false,  this.unsafeClass);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  this.unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  this.unsafeClass);	  f.setAccessible(true,    false,    safeClass);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	80	None	replace
575	[BUG]  [BUGGY]  ||  f.isAccessible())  {  f.setAccessible(false);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  ||  f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	||  f.isAccessible())  {  f.setAccessible(false);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
576	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setInterface(false);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setInterface(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setInterface(false);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
577	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setAccessible(false);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
578	[BUG]  [BUGGY]  ||  f.isAccessible()  {  f.setAccessible(false);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  ||  f.isAccessible()  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	||  f.isAccessible()  {  f.setAccessible(false);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
579	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
580	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
581	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
582	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
583	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
584	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
585	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    f.setAccessible(false);    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	92	None	replace
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
587	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
589	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
590	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
592	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	compilable	  [FE]  AssertionFailedError  	125	1	replace
593	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
594	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
595	[BUG]  [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	125	None	replace
596	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ",  false);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ",  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ",  false);	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
597	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ".class);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ".class);	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  <identifier>  expected	125	None	replace
598	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	97	1	replace
600	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	97	1	replace
601	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
602	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
603	[BUG]  [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  cannot  find  symbol  safeClass  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	97	None	replace
604	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
605	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.theUnsafeAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "this.theUnsafeAllocator ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
606	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	71	None	replace
607	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	71	None	replace
608	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)	71	None	replace
609	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	71	None	replace
610	[BUG]  [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ", ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isConstructor())    {    f.setConstructor(null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
612	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
614	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
616	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
618	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
619	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessibility(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
620	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
621	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
622	[BUG]  [BUGGY]  final  Object  f  =  f.get(null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  f.get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  f.get(null);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
623	[BUG]  [BUGGY]  Object  f  =  f.get(f);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.get(f);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.get(f);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
624	[BUG]  [BUGGY]  Object  f  =  unsafeClass.get(null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  unsafeClass.get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  unsafeClass.get(null);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
625	[BUG]  [BUGGY]  Object  f  =  f.get(c);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.get(c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.get(c);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
626	[BUG]  [BUGGY]  Object  f  =  f.get(constructorId);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.get(constructorId);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.get(constructorId);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
627	[BUG]  [BUGGY]  Object  f  =  f.get(unsafeClass);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.get(unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.get(unsafeClass);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
629	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
630	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
631	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
633	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
634	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(null);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	83	None	add
635	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
636	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
637	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
638	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
639	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
641	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
643	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
644	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
645	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
647	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
649	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	34	2	add
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
651	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	34	1	add
652	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	142	None	replace
653	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)	142	None	replace
654	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)	142	None	replace
655	[BUG]  [BUGGY]  final  String  constructorId  =  f.getConstructorId();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getConstructorId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getConstructorId();	          final    String    constructorId    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
656	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getName()  +  1;  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	final  String  constructorId  =  f.getName()  +  1;	          final    String    constructorId    =    f.getName();    	compilable	  [FE]  AssertionFailedError  	160	1	replace
657	[BUG]  [BUGGY]  final  String  constructorId  =  f.getName()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getName()  +  1;  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getName()  +  1;	          final    String    constructorId    =    f.getName();    	compilable	  [FE]  AssertionFailedError  	160	1	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.toString();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	final  String  constructorId  =  f.toString();	          final    String    constructorId    =    f.getName();    	compilable	  [FE]  AssertionFailedError  	160	1	replace
659	[BUG]  [BUGGY]  final  String  constructorId  =  f.toString();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.toString();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.toString();	          final    String    constructorId    =    f.getName();    	compilable	  [FE]  AssertionFailedError  	160	1	replace
660	[BUG]  [BUGGY]  final  String  constructorId  =  f.getClass();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getClass();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getClass();	          final    String    constructorId    =    f.getName();    	non-compiled	[CE]  incompatible  types	160	None	replace
661	[BUG]  [BUGGY]  final  String  constructorId  =  f.getFunctionName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getFunctionName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getFunctionName();	          final    String    constructorId    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getName()  + ": ";  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	final  String  constructorId  =  f.getName()  + ": ";	          final    String    constructorId    =    f.getName();    	compilable	  [FE]  AssertionFailedError  	160	1	replace
663	[BUG]  [BUGGY]  final  String  constructorId  =  f.getName()  + ": ";  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getName()  + ": ";  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getName()  + ": ";	          final    String    constructorId    =    f.getName();    	compilable	  [FE]  AssertionFailedError  	160	1	replace
664	[BUG]  [BUGGY]  f.setAccessible(false,  true,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  true,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  true,  null);	  f.setAccessible(false,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)	131	None	replace
665	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,<null>)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass,  null);	  f.setAccessible(false,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,<null>)	131	None	replace
666	[BUG]  [BUGGY]  f.setAccessible(null,  false,  false,  false);  [CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false,  false,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  false,  false,  false);	  f.setAccessible(false,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean,boolean)	131	None	replace
667	[BUG]  [BUGGY]  f.setAccessible(false,  false,  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  null,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  null,  safeClass);	  f.setAccessible(false,    false,    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	131	None	replace
668	[BUG]  [BUGGY]  f.setConstructorId(true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setConstructorId(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setConstructorId(true);	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
669	[BUG]  [BUGGY]  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  	74	None	replace
670	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
671	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessibility(false);  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessibility(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessibility(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
672	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false,  unsafeClass);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false,  unsafeClass);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false,  unsafeClass);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
673	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  constructorId);  [CE]  cannot  find  symbol  constructorId  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  constructorId);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass,  constructorId);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  constructorId	128	None	replace
674	[BUG]  [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,Class<CAP#2>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  unsafeClass,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  unsafeClass,  unsafeClass);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,Class<CAP#2>)	128	None	replace
675	[BUG]  [BUGGY]  f.setAccessible(false,  false,  safeClass,  unsafeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  safeClass,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  safeClass,  unsafeClass);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	128	None	replace
676	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  builder);  [CE]  cannot  find  symbol  builder  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  builder);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass,  builder);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  builder	128	None	replace
677	[BUG]  [BUGGY]  f.setAccessible(false,  true,  unsafeClass,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,Class<CAP#2>)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  true,  unsafeClass,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  true,  unsafeClass,  unsafeClass);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,Class<CAP#2>)	128	None	replace
678	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
679	[BUG]  [BUGGY]  f.setAccessible(true);  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
680	[BUG]  [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  f.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  f.isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	149	None	replace
681	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  incompatible  types	149	None	replace
682	[BUG]  [BUGGY]  f.setAccessible(isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
683	[BUG]  [BUGGY]  if(f  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  return  new  UnsafeAllocator();  }	          if(f!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	102	None	replace
684	[BUG]  [BUGGY]  if(f!=  null  ||  f.isInterface())  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isInterface())  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isInterface())  {  return  new  UnsafeAllocator();  }	          if(f!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
685	[BUG]  [BUGGY]  If(f!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  If(f!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	If(f!=  null)  {  return  new  UnsafeAllocator();  }	          if(f!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	102	None	replace
686	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass. ");	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	47	None	replace
687	[BUG]  [BUGGY]  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafeClass ");	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	47	None	replace
688	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( ".theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( ".theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( ".theUnsafeClass ");	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	47	None	replace
689	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator ");	          final    Field    f    =    f.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	104	None	replace
690	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator. ");	          final    Field    f    =    f.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	104	None	replace
691	[BUG]  [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  safeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  safeClass.getDeclaredField( "theAllocator ");	          final    Field    f    =    f.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	104	None	replace
692	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( ".theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( ".theAllocator ");	          final    Field    f    =    f.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	104	None	replace
693	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	153	None	replace
694	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	153	None	replace
695	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	153	None	replace
696	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)	153	None	replace
697	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
698	[BUG]  [BUGGY]  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  	22	None	replace
699	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(f));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(f));  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(f));	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
700	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(f));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(f));  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(f));	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
701	[BUG]  [BUGGY]  if(f.isConstructor()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	162	1	add
703	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	162	1	add
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	162	1	add
705	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	162	1	add
706	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	162	None	add
707	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	162	None	add
708	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isConstructor())  {  f.setConstructor(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	162	None	add
709	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	162	None	add
710	[BUG]  [BUGGY]  f.setAccessible(true);  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  f.setAccessible(false);    final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	124	None	replace
711	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
712	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
713	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
714	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
715	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
716	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
718	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
719	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(null);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	85	None	add
720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
721	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
722	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
723	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafeAllocator ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafeAllocator ");	  f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
724	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafe ",  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theUnsafe ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafe ",  null);	  f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
725	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafe. ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theUnsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafe. ");	  f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
726	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafeClass ");	  f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
727	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafe ",  unsafeClass);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theUnsafe ",  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafe ",  unsafeClass);	  f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
728	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
730	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
731	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
732	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
733	[BUG]  [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	141	None	replace
734	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
735	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	172	None	replace
736	[BUG]  [BUGGY]  if(f!=  null)  {  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	172	None	replace
737	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	172	None	replace
738	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	172	None	replace
739	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  true);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean)	82	None	replace
740	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  true,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,boolean)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  true,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  true,  false);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,boolean)	82	None	replace
741	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  false,  safeClass);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	82	None	replace
742	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,<null>)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  null);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,<null>)	82	None	replace
743	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,boolean)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  false,  true);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,boolean)	82	None	replace
744	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  c);  [CE]  cannot  find  symbol  c  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  false,  c);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  cannot  find  symbol  c	82	None	replace
745	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isConstructor())  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isConstructor())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isConstructor())  {  f.setAccessible(false);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
746	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isInterface())  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isInterface())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isInterface())  {  f.setAccessible(false);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
747	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isInstance())  {  f.setAccessible(false);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
748	[BUG]  [BUGGY]  f.setAccessible(isAccessible());  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(isAccessible());  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(isAccessible());  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
749	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
750	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
751	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
752	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
753	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
754	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	add
755	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
756	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
757	[BUG]  [BUGGY]  if(f!=  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
758	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "class ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
759	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "detectUnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "detectUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "detectUnsafeClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
760	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
761	[BUG]  [BUGGY]  if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
762	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	92	None	replace
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(true);  f.setAccessible(false);  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
764	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  f.setAccessible(false);  }	  f.setAccessible(false);    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	92	1	replace
765	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  incompatible  types	51	None	replace
766	[BUG]  [BUGGY]  f.setAccessible(false.isAccessible());  f.setAccessibility(false.isAccessible());  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false.isAccessible());  f.setAccessibility(false.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false.isAccessible());  f.setAccessibility(false.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	51	None	replace
767	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	172	None	replace
768	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	172	None	replace
769	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	172	None	replace
770	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
771	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
772	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
773	[BUG]  [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
774	[BUG]  [BUGGY]  f.setAccessible(false,  unsafeClass,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  unsafeClass,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  unsafeClass,  false);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean)	82	None	replace
775	[BUG]  [BUGGY]  f.setAccessible(null,  unsafeClass,  false);  [CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>,boolean)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  unsafeClass,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  unsafeClass,  false);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>,boolean)	82	None	replace
776	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	44	None	replace
777	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)	111	None	replace
778	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	99	None	replace
779	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	99	None	replace
780	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	99	None	replace
781	[BUG]  [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.class. ");	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	99	None	replace
782	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  incompatible  types	107	None	replace
783	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  F  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol  F	107	None	replace
784	[BUG]  [BUGGY]  f.setAccessible(false);  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
785	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setInterface(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setInterface(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setInterface(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
786	[BUG]  [BUGGY]  f  =  f.isInterface()?  f.setInterface(false):  null;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isInterface()?  f.setInterface(false):  null;  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isInterface()?  f.setInterface(false):  null;	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
787	[BUG]  [BUGGY]  if(f!=  null)  {  return  new  UnsafeAllocator(0);  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  return  new  UnsafeAllocator(0);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  return  new  UnsafeAllocator(0);  }	          if(f!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	102	None	replace
788	[BUG]  [BUGGY]  UnsafeAllocator  f  =  f.get(null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  UnsafeAllocator  f  =  f.get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	UnsafeAllocator  f  =  f.get(null);	          if(f!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	102	None	replace
789	[BUG]  [BUGGY]  f.setAccessible(true,  false,  theUnsafeClass);  [CE]  cannot  find  symbol  theUnsafeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  theUnsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  theUnsafeClass);	  f.setAccessible(true,    false,    safeClass);    	non-compiled	[CE]  cannot  find  symbol  theUnsafeClass	80	None	replace
790	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	145	None	replace
791	[BUG]  [BUGGY]  safeClass  =  f.get(null);  [CE]  cannot  find  symbol  safeClass  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  safeClass  =  f.get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	safeClass  =  f.get(null);	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  cannot  find  symbol  safeClass	145	None	replace
792	[BUG]  [BUGGY]  f.setAccessible(null,  false,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean,<null>)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false,  false,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  false,  false,  null);	  f.setAccessible(false,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean,<null>)	131	None	replace
793	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f    ==    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	133	None	replace
794	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f.isInstance())    {    f.setInstance(null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
795	[BUG]  [BUGGY]  f.setAccessible(true,  false,  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  null,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  null,  safeClass);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	78	None	replace
796	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
797	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	32	None	add
798	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	37	None	add
799	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(null);  f.setAccessible(false);  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setAccessible(null);  f.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setAccessible(null);  f.setAccessible(false);	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	91	None	add
800	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setDeclaredField( "theUnsafe   ");  f.setDeclared(false);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setDeclaredField( "theUnsafe   ");  f.setDeclared(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setDeclaredField( "theUnsafe   ");  f.setDeclared(false);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
801	[BUG]  [BUGGY]  if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
802	[BUG]  [BUGGY]  f.setAccessible(safeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(safeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(safeClass.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol  safeClass	54	None	replace
803	[BUG]  [BUGGY]  if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isAccessible())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
804	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	106	None	replace
805	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	106	None	replace
806	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe. ");  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  incompatible  types	106	None	replace
807	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
808	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
809	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
810	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse;  f.setFalse);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse;  f.setFalse);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setFalse;  f.setFalse);	  	non-compiled	[CE]  not  a  statement	93	None	add
811	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse);  f.setFalse(false);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse);  f.setFalse(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setFalse);  f.setFalse(false);	  	non-compiled	[CE]  not  a  statement	93	None	add
812	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse);  f.setFalse;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setFalse);  f.setFalse;  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setFalse);  f.setFalse;	  	non-compiled	[CE]  not  a  statement	93	None	add
813	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	40	None	add
814	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	40	None	add
815	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setAccessible(true,  unsafeClass);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setAccessible(true,  unsafeClass);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setAccessible(true,  unsafeClass);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
816	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccuracy());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccuracy());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccuracy());  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
817	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	55	None	add
818	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(unsafeClass)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
819	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true,  unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true,  unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true,  unsafeClass);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
820	[BUG]  [BUGGY]  f.setAccessible(false,  false,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  true);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	79	None	replace
821	[BUG]  [BUGGY]  f.setAccessible(null,  true,  false);  [CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  true,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  true,  false);	  f.setAccessible(true,    true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,boolean,boolean)	79	None	replace
822	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  final  Object  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  final  Object  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    final  Object  unsafeClass  =  unsafeClass.getDeclaredField( "theUnsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	121	None	add
823	[BUG]  [BUGGY]  Field  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Field  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Field  f  =  safeClass.getDeclaredField( "theUnsafe   ");	  Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	replace
824	[BUG]  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Field  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");	  Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	146	None	replace
825	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass,  null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>)	153	None	replace
826	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	153	None	replace
827	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	46	None	replace
828	[BUG]  [BUGGY]  final  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafe   ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	46	None	replace
829	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  getConstructorId();  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  getConstructorId();  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  getConstructorId();  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
830	[BUG]  [BUGGY]  if(f!=  null)  {  if(f  ==  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f  ==  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
831	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f  =  f.getAccessible();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f  =  f.getAccessible();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f  =  f.getAccessible();	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  incompatible  types	109	None	replace
832	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  this.setAccessible(f.getAccessible());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());  this.setAccessible(f.getAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());  this.setAccessible(f.getAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
833	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafeFunction ");	          final    Field    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	100	None	replace
834	[BUG]  [BUGGY]  f  =  f.setConstructorId(null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setConstructorId(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setConstructorId(null);	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
835	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theunsafeClass ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theunsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theunsafeClass ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
836	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  incompatible  types	148	None	replace
837	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  F  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol  F	148	None	replace
838	[BUG]  [BUGGY]  Object  f  =  getConstructorId().get(null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  getConstructorId().get(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  getConstructorId().get(null);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
839	[BUG]  [BUGGY]  f.setAccessible(safeClass.isAccessible());  [CE]  cannot  find  symbol  safeClass  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(safeClass.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(safeClass.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol  safeClass	6	None	replace
840	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
841	[BUG]  [BUGGY]  if(f.isAssignableFrom(f)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(f)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
842	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe "));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(f.getDeclaredField( "safe "));  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(f.getDeclaredField( "safe "));	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
843	[BUG]  [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeClass ".class);	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  <identifier>  expected	45	None	replace
844	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(null,  c);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(null,  c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(null,  c);	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
845	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(this);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.get(this);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(this);	  final    Object    unsafeClass    =    f.get(null);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	replace
846	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	134	None	add
847	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	134	None	add
848	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(null);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId(null);	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
849	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(f);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(f);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId(f);	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
850	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getUnsafeId();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
852	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
853	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
854	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
855	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
856	[BUG]  [BUGGY]  if(f!=  null  ||  f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setInstance(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
857	[BUG]  [BUGGY]  if(f.isInstance())  {  f  =  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f  =  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f  =  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setInstance(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
858	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());  f.setInstance(f.isInstance());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
859	[BUG]  [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	75	None	replace
860	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	75	None	replace
861	[BUG]  [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    }    	non-compiled	[CE]  'catch'  without  'try'	75	None	replace
862	[BUG]  [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f!=  null)  {  f.setAccessibility(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    }    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
863	[BUG]  [BUGGY]  if(f.isAssignableFrom(null)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(null)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(null)||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(null))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
864	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true,    false);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	18	None	replace
865	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	173	None	replace
866	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllo	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	173	None	replace
867	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	173	None	replace
868	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
869	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
870	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	58	None	add
871	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	58	None	add
872	[BUG]  [BUGGY]  if(f.isInterface())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
873	[BUG]  [BUGGY]  if(null!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
874	[BUG]  [BUGGY]  if(null!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    If(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
875	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
876	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
877	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
878	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ".class);	          Class    <?>    c    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  <identifier>  expected	157	None	replace
879	[BUG]  [BUGGY]  Factory.setAccessible(false);  [CE]  cannot  find  symbol  Factory  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(false);	  if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol  Factory	165	None	replace
880	[BUG]  [BUGGY]  F.setAccessible(false);  [CE]  cannot  find  symbol  F  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(false);	  if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol  F	165	None	replace
881	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
882	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
883	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
884	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
885	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
886	[BUG]  [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
887	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
888	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
889	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    f.setAccessible(true);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	94	None	replace
890	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	2	replace
891	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  f.setAccessible(true);  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(false);    f.setAccessible(true);    	compilable	  [FE]  AssertionFailedError  	94	2	replace
892	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theClass ".class);	          Class    <?>    c    =    f.getDeclaredField(   "theClass   ");    	non-compiled	[CE]  <identifier>  expected	158	None	replace
893	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
894	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
895	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
896	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	137	1	add
897	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	137	None	add
898	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	137	None	add
899	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	63	None	replace
900	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	63	None	replace
901	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>)	142	None	replace
902	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
903	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "class ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
904	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
905	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "declareInstance   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "declareInstance   ");	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
906	[BUG]  [BUGGY]  final  String  constructorId  =  f.getId();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getId();	          final    String    constructorId    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
907	[BUG]  [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  String  constructorId  =  f.getDeclaredField( "constructorId ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  String  constructorId  =  f.getDeclaredField( "constructorId ");	          final    String    constructorId    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
908	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
909	[BUG]  [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
910	[BUG]  [BUGGY]  if(f  ==  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null  ||  f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
911	[BUG]  [BUGGY]  if(f.isInstance())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
912	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
913	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  Unsafe  [CE]  '('  or  '['  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  Unsafe  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  Unsafe	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  '('  or  '['  expected	155	None	replace
914	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
915	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	67	1	add
916	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	67	None	add
917	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
918	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
919	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
920	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	49	None	replace
921	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  F  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  cannot  find  symbol  F	149	None	replace
922	[BUG]  [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  Factory  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  cannot  find  symbol  Factory	149	None	replace
923	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f    ==    null)    {    if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	118	None	replace
924	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	62	None	add
925	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	62	None	add
926	[BUG]  [BUGGY]  f  =  f.setConstructorId(true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setConstructorId(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setConstructorId(true);	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
927	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(true,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(true,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(true,  unsafeClass);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
928	[BUG]  [BUGGY]  f.setAccessible(false,  null,  false,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,Class<CAP#1>)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  null,  false,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  null,  false,  unsafeClass);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,Class<CAP#1>)	81	None	replace
929	[BUG]  [BUGGY]  f.setAccessible(null,  null,  false);  [CE]  no  suitable  method  found  for  setAccessible(<null>,<null>,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  null,  false);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,<null>,boolean)	81	None	replace
930	[BUG]  [BUGGY]  f.setAccessible(false,  null,  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  null,  false,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  null,  false,  safeClass);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	81	None	replace
931	[BUG]  [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator ".class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  unsafeClass.getDeclaredField( "theAllocator ".class);	          final    Field    f    =    f.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  <identifier>  expected	104	None	replace
932	[BUG]  [BUGGY]  if(f  ==  null  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	21	None	replace
933	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	34	None	add
934	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	34	None	add
935	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    f.setAccessible(true);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	39	None	replace
936	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    UnsafeAllocatorException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
937	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  incompatible  types	147	None	replace
938	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  F  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  cannot  find  symbol  F	147	None	replace
939	[BUG]  [BUGGY]  f.setAccessible(false.isAccessible());  f.setVisible(false.isVisible());  [CE]  boolean  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false.isAccessible());  f.setVisible(false.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false.isAccessible());  f.setVisible(false.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	147	None	replace
940	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setFalse(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface())  {  f.setFalse(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setFalse(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
941	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
942	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
944	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
945	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(null);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(null);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	85	None	add
946	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	129	None	add
947	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	129	None	add
948	[BUG]  [BUGGY]  f.setAccessible(null,  false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	129	None	add
949	[BUG]  [BUGGY]  if(f.isConstructor())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f  =  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
950	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  incompatible  types	52	None	replace
951	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  F  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  cannot  find  symbol  F	52	None	replace
952	[BUG]  [BUGGY]  f.setAccessible(false.isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false.isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false.isAccessible());  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	52	None	replace
953	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
954	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
955	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
956	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
957	[BUG]  [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(null!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
958	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  final  String  buildorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	                final    String    constructorId    =    f.getName();    final  String  buildorId  =  f.getName();	  	compilable	  [FE]  AssertionFailedError  	159	2	add
959	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  final  String  buildorId  =  f.getName();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  final  String  buildorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    final  String  buildorId  =  f.getName();	  	compilable	  [FE]  AssertionFailedError  	159	2	add
960	[BUG]  [BUGGY]          final  String  constructorId  =  f.getName();  Object  constructorId  =  f.getName();  [CE]  variable  constructorId  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]          final  String  constructorId  =  f.getName();  Object  constructorId  =  f.getName();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	                final    String    constructorId    =    f.getName();    Object  constructorId  =  f.getName();	  	non-compiled	[CE]  variable  constructorId  is  already  defined  in  method  create()	159	None	add
961	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
962	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
963	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
964	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	7	None	add
965	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
966	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
967	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
968	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
969	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	164	None	add
970	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    if(f!=  null)  {  f.setAccessible(f.getAccessible());  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
971	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
972	[BUG]  [BUGGY]  Factory.isConstructor())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Factory.isConstructor())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Factory.isConstructor())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	168	None	replace
973	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "safeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "safeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "safeClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
974	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "class ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
975	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "nullClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "nullClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "nullClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
976	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.class ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
977	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "null ");	  Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	57	None	replace
978	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "unsafe-class ");	  Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	57	None	replace
979	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	112	None	add
980	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
981	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }	  	compilable	  [FE]  AssertionFailedError  	112	2	add
982	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	112	None	add
983	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	112	None	add
984	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  incompatible  types	150	None	replace
985	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setInstance(f.instance());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());  f.setInstance(f.instance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());  f.setInstance(f.instance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
986	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setInstance(f.getInstance());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());  f.setInstance(f.getInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());  f.setInstance(f.getInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
987	[BUG]  [BUGGY]  F.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  F  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  F.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	F.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol  F	150	None	replace
988	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
989	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
990	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
991	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
992	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	65	None	add
993	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
994	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ".getRawClass());  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
995	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);  [CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "declareInstance ",  null);	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  method  getDeclaredField  in  class  Class<T>  cannot  be  applied  to  given  types;	122	None	replace
996	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "null ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
997	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "null ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField( "null ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "null ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	122	1	replace
998	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.getAccessible());  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
999	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(accessible);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  accessible  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(accessible);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(accessible);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol  accessible	71	None	replace
1000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
1001	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	58	2	add
1002	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	58	None	add
1003	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	34	None	add
1004	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAutoRange(false.isAutoRange());  [CE]  boolean  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setAutoRange(false.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setAutoRange(false.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	149	None	replace
1005	[BUG]  [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  accessible  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(accessible.isAccessible());  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  cannot  find  symbol  accessible	149	None	replace
1006	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setAutoRange(f.isAutoRange());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  incompatible  types	149	None	replace
1007	[BUG]  [BUGGY]  f  =  f.setAccessible(true,  false);  f.setAutoRange(f.isAutoRange());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true,  false);  f.setAutoRange(f.isAutoRange());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true,  false);  f.setAutoRange(f.isAutoRange());	  f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	149	None	replace
1008	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1009	[BUG]  [BUGGY]  f  =  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  	120	None	replace
1010	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(c);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(c);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(c);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol  c	120	None	replace
1011	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(null,  unsafeClass);  }  else  {  Class  <?>  f  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(null,  unsafeClass);  }  else  {  Class  <?>  f  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(null,  unsafeClass);  }  else  {  Class  <?>  f  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1012	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(f  false);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  if(f!=  null)  {  f.setAccessible(f  false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(false);    }    if(f!=  null)  {  f.setAccessible(f  false);  }	  	non-compiled	[CE]  ')'  expected	32	None	add
1013	[BUG]  [BUGGY]  f  =  c.getDeclaredField( "theUnsafe ");  [CE]  cannot  find  symbol  c  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  c.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  c.getDeclaredField( "theUnsafe ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol  c	122	None	replace
1014	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theunsafe ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theunsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theunsafe ");	  f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1015	[BUG]  [BUGGY]  if(f.isConstructor()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
1016	[BUG]  [BUGGY]  Object  f  =  f.isAssignableFrom(unsafeClass)?  f.setAccessible(true);  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isAssignableFrom(unsafeClass)?  f.setAccessible(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isAssignableFrom(unsafeClass)?  f.setAccessible(true);	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	29	None	replace
1017	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass)&&  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(unsafeClass)&&  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass)&&  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
1018	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(f)]  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(f)]  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(f)]  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
1019	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  getConstructorId());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  getConstructorId());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  getConstructorId());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1020	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  c  =  getConstructorId();  f.setAccessible(false);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  c  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  unsafeClass);  }  else  {  Class  <?>  c  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>,Class<CAP#1>)	142	None	replace
1021	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
1022	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(f.isAccessible());  }  else  {  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	49	1	replace
1023	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theunsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theunsafe ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1024	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theunsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  unsafeClass.getDeclaredField(   "theUnsafe     ");  f  =  unsafeClass.getDeclaredField( "theunsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f  =  unsafeClass.getDeclaredField( "theunsafe ");	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1025	[BUG]  [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  accessible  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(accessible.isAccessible());  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  cannot  find  symbol  accessible	107	None	replace
1026	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setConstructorId(f.isConstructor());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setConstructorId(f.isConstructor());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setConstructorId(f.isConstructor());	  f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());    	non-compiled	[CE]  incompatible  types	107	None	replace
1027	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  not  a  statement	95	None	replace
1028	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
1029	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	95	None	replace
1030	[BUG]  [BUGGY]  f.setAccessible(false);  f.setSupported(false.isSupported());  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setSupported(false.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setSupported(false.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	108	None	replace
1031	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f  =  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());  f  =  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());  f  =  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
1032	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setSupported(f.isSupported());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setSupported(f.isSupported());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setSupported(f.isSupported());	  f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());    	non-compiled	[CE]  incompatible  types	108	None	replace
1033	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	37	None	add
1034	[BUG]  [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe   ".getRawClass());    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	98	None	replace
1035	[BUG]  [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  'catch'  without  'try'	145	None	replace
1036	[BUG]  [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe_class ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe_class ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe_class ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  'catch'  without  'try'	145	None	replace
1037	[BUG]  [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  'catch'  without  'try'	145	None	replace
1038	[BUG]  [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe. ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe. ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe. ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  'catch'  without  'try'	145	None	replace
1039	[BUG]  [BUGGY]  final  Object  f  =  safeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  safeClass.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  safeClass.getDeclaredField( "theUnsafe ");	  f.setAccessible(f.isAccessible());    final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	53	None	replace
1040	[BUG]  [BUGGY]  f.setAccessible(unsafeClass,  f.isAccessible());  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,boolean)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass,  f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass,  f.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,boolean)	6	None	replace
1041	[BUG]  [BUGGY]  f  =  f.setAccessible(unsafeClass.isAccessible());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(unsafeClass.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(unsafeClass.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1042	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible()  ||  f.isAccessible());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass.isAccessible()  ||  f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible()  ||  f.isAccessible());	  f.setAccessible(unsafeClass.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1043	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	67	None	add
1044	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  c);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  c);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  c);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol  c	71	None	replace
1045	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Field)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field)	71	None	replace
1046	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	65	None	add
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
1048	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	compilable	  [FE]  AssertionFailedError  	65	2	add
1049	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "null ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "null ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
1050	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.security.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "sun.security.UnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "sun.security.UnsafeClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
1051	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "detecteClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "detecteClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "detecteClass ");	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
1052	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "deprecated ",  null);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafeClass  =  f.getDeclaredField( "deprecated ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.getDeclaredField( "deprecated ",  null);	          final    Object    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	103	None	replace
1053	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe_class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	141	None	replace
1054	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass, ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theClass, ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theClass, ");	          Class    <?>    c    =    f.getDeclaredField(   "theClass   ");    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1055	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafe, ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getDeclaredField( "theUnsafe, ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafe, ");	  f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1056	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  }	  if(f!=    null)    {    f.setAccessible(true);    }    if(f    ==    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1057	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator()  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator()  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator()	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  	155	None	replace
1058	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeFalse   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	125	None	replace
1059	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(f.getId());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  unsafe  =  f.get(f.getId());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(f.getId());	  final    Object    unsafe    =    f.get(null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1060	[BUG]  [BUGGY]  if(f!=  null  ||  f.isUnsafe())  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isUnsafe())  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isUnsafe())  {  return  new  UnsafeAllocator();  }	          if(f!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1061	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theunsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theunsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "theunsafe ");	  f.setAccessible(false);    final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	124	None	replace
1062	[BUG]  [BUGGY]  f  =  f.isAssignableFrom(f)]  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAssignableFrom(f)]  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAssignableFrom(f)]  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(f))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
1063	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,Class<CAP#2>)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  unsafeClass,  false,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  false,  unsafeClass);	  f.setAccessible(true,    unsafeClass,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean,Class<CAP#2>)	82	None	replace
1064	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	5	None	replace
1065	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1066	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(true,  unsafeClass);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setAccessible(true,  unsafeClass);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(true,  unsafeClass);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1067	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccuracy(false.isAccuracy());  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setAccuracy(false.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setAccuracy(false.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	52	None	replace
1068	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setAccuracy(f.isAccuracy());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  incompatible  types	52	None	replace
1069	[BUG]  [BUGGY]  f  =  f.setAccessible(true,  false);  f.setAccuracy(f.isAccuracy());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true,  false);  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true,  false);  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	52	None	replace
1070	[BUG]  [BUGGY]  f  =  f.getAccessible();  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getAccessible();  f.setAccuracy(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getAccessible();  f.setAccuracy(f.isAccuracy());	  f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1071	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    f.setAccessible(false);    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	92	None	replace
1072	[BUG]  [BUGGY]  if(f!=  null)  {  if(unsafeClass  ==  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(unsafeClass  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(unsafeClass  ==  null)  {  f.setAccessible(true);  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
1073	[BUG]  [BUGGY]  if(f!=  null)  {  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(unsafeClass!=  null)  {  f.setAccessible(false);  }	  if(unsafeClass    ==    null)    {    if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
1074	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(f.getInterface());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(f.getInterface());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInterface())  {  f.setInterface(f.getInterface());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
1075	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInstance())  {  f.setInstance(null);  }	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
1076	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  UnsafeClass.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  UnsafeClass.class);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ",  UnsafeClass.class);	          Class    <?>    c    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
1077	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe   ");  if(unsafeClass!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
1078	[BUG]  [BUGGY]  if(f!=  null)  {  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
1079	[BUG]  [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe ");  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe ");  if(unsafeClass!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafe ");  if(unsafeClass!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
1080	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
1081	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	83	2	add
1082	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  If(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  If(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    If(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  ';'  expected	83	None	add
1083	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessibility(true);  }  if(f!=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
1084	[BUG]  [BUGGY]  f  =  f.setAccessible(f.isAccessible());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  incompatible  types	51	None	replace
1085	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccessibility(false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setAccessibility(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setAccessibility(false);	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1086	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setAccessibility(f.isAccessible());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setAccessibility(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setAccessibility(f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  incompatible  types	51	None	replace
1087	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccessibility(false.isAccessible());  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setAccessibility(false.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setAccessibility(false.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	51	None	replace
1088	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccessibility(false,  f.isAccessible());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setAccessibility(false,  f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setAccessibility(false,  f.isAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1089	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1090	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    UnsafeAllocatorException(   "   ");    }    	non-compiled	[CE]  incompatible  types	115	None	replace
1091	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  f.setAccessible(null,  false);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  f.setAccessible(null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  f.setAccessible(null,  false);	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
1092	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Object  unsafe  =  f.getDeclaredField( "theUnsafe ");	  	non-compiled	[CE]  cannot  find  symbol	129	None	add
1093	[BUG]  [BUGGY]  f.setAccessible(null,  false);  final  Field  f  =  f.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(null,  false);  final  Field  f  =  f.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,    false);    final  Field  f  =  f.getDeclaredField( "theUnsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	129	None	add
1094	[BUG]  [BUGGY]  f.setAccessible(false);  f.setStatic(false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setStatic(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setStatic(false);	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1095	[BUG]  [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  accessible  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(accessible.isAccessible());  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  cannot  find  symbol  accessible	148	None	replace
1096	[BUG]  [BUGGY]  f.setAccessible(false,  f.isAccessible());  f.setStatic(false,  f.isStatic());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  f.isAccessible());  f.setStatic(false,  f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  f.isAccessible());  f.setStatic(false,  f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	148	None	replace
1097	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setStatic(f.isStatic());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setStatic(f.isStatic());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setStatic(f.isStatic());	  f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());    	non-compiled	[CE]  incompatible  types	148	None	replace
1098	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.getAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1099	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	63	None	replace
1100	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(false);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isInstance())  {  f.setInstance(false);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	26	None	replace
1101	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(f  false);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  if(f  ==  null)  {  f.setAccessible(f  false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(false);    }    if(f  ==  null)  {  f.setAccessible(f  false);  }	  	non-compiled	[CE]  ')'  expected	40	None	add
1102	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setInstance(false);  f.setInstance(true);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(true);  f.setInstance(false);  f.setInstance(true);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(true);    f.setInstance(false);  f.setInstance(true);	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
1103	[BUG]  [BUGGY]  f.setAccessible(true,  null,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  false,  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  false,  null);	  f.setAccessible(true,    false,    null);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean,<null>)	78	None	replace
1104	[BUG]  [BUGGY]  f.setAccessible(true,  false,  c);  [CE]  cannot  find  symbol  c  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  c);	  f.setAccessible(true,    false,    safeClass);    	non-compiled	[CE]  cannot  find  symbol  c	80	None	replace
1105	[BUG]  [BUGGY]  f.setAccessible(true,  false,  nonNormalized);  [CE]  cannot  find  symbol  nonNormalized  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  false,  nonNormalized);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  nonNormalized);	  f.setAccessible(true,    false,    safeClass);    	non-compiled	[CE]  cannot  find  symbol  nonNormalized	80	None	replace
1106	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  f.setAccessible(f.getAccessible());  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  f.setAccessible(f.getAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  f.setAccessible(f.getAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1107	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  f  =  f.getAccessible();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  f  =  f.getAccessible();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  f  =  f.getAccessible();  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1108	[BUG]  [BUGGY]  f  =  f.isAccessible();  f.setAccessible(f.getAccessible());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAccessible();  f.setAccessible(f.getAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAccessible();  f.setAccessible(f.getAccessible());	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  incompatible  types	109	None	replace
1109	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  Class  <?>  f  =  f.getDeclaredField( "theUnsafe ");  f.setAccessible(f.isAccessible());  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  Class  <?>  f  =  f.getDeclaredField( "theUnsafe ");  f.setAccessible(f.isAccessible());  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(f.getAccessible());  }  else  {  Class  <?>  f  =  f.getDeclaredField( "theUnsafe ");  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1110	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  not  a  statement	106	None	replace
1111	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    f.setAccessible(false);    }    	non-compiled	[CE]  not  a  statement	106	None	replace
1112	[BUG]  [BUGGY]  final  Object  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  f.getDeclaredField( "theUnsafe   ");	  if(f    ==    null)    {    f.setAccessible(false);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	41	None	replace
1113	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,Class<CAP#2>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass,  unsafeClass);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>,Class<CAP#2>)	77	None	replace
1114	[BUG]  [BUGGY]  f.setAccessible(true,  null,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,Class<CAP#1>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(true,  null,  unsafeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  unsafeClass);	  f.setAccessible(true,    false,    unsafeClass);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,Class<CAP#1>)	77	None	replace
1115	[BUG]  [BUGGY]  if(unsafeClass.getDeclaredField( "theUnsafeAllocator ")!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.getDeclaredField( "theUnsafeAllocator ")!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.getDeclaredField( "theUnsafeAllocator ")!=  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
1116	[BUG]  [BUGGY]  if(unsafeClass.getDeclaredField( "theUnsafeAllocator ")  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.getDeclaredField( "theUnsafeAllocator ")  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.getDeclaredField( "theUnsafeAllocator ")  ==  null)  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
1117	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafeAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	97	None	replace
1118	[BUG]  [BUGGY]  f.setAccessible(false);  f.setVisible(false.isVisible());  [CE]  boolean  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setVisible(false.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setVisible(false.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	147	None	replace
1119	[BUG]  [BUGGY]  f.setAccessible(false,  f.isAccessible());  f.setVisible(false,  f.isVisible());  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  f.isAccessible());  f.setVisible(false,  f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  f.isAccessible());  f.setVisible(false,  f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	147	None	replace
1120	[BUG]  [BUGGY]  f.setAccessible(fill.isAccessible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  fill  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(fill.isAccessible());  f.setVisible(f.isVisible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(fill.isAccessible());  f.setVisible(f.isVisible());	  f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());    	non-compiled	[CE]  cannot  find  symbol  fill	147	None	replace
1121	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	132	None	replace
1122	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theunsafe ",  null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theunsafe ",  null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "theunsafe ",  null);	  final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	110	None	replace
1123	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	62	None	add
1124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1125	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f    ==    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1126	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
1127	[BUG]  [BUGGY]  f  =  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  	74	None	replace
1128	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(true,  constructorId);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  constructorId  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setConstructorId(true,  constructorId);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(true,  constructorId);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setConstructorId(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol  constructorId	74	None	replace
1129	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getCurrentConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getCurrentConstructorId();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getCurrentConstructorId();	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
1130	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(f.getName());  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(f.getName());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId(f.getName());	          final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	replace
1131	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( ".theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( ".theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( ".theUnsafe ");	  if(f!=    null)    {    f.setAccessible(true);    }    final    Object    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	123	None	replace
1132	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	50	None	replace
1133	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	50	None	replace
1134	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(f.isAccessible());    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	50	None	replace
1135	[BUG]  [BUGGY]  Object  f  =  f.isInterface()?  f.setInterface(false):  null;  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.isInterface()?  f.setInterface(false):  null;  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.isInterface()?  f.setInterface(false):  null;	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	167	None	replace
1136	[BUG]  [BUGGY]  f  =  f.isInterface()?  f.setInterface(false):  new  IllegalArgumentException( " ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isInterface()?  f.setInterface(false):  new  IllegalArgumentException( " ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isInterface()?  f.setInterface(false):  new  IllegalArgumentException( " ");	  if(f.isInterface())    {    f.setInterface(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
1137	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	162	None	add
1138	[BUG]  [BUGGY]  if(f.isAssignableFrom(c))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  c  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(c))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(c))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(null))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol  c	105	None	replace
1139	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe.   ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe.   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	99	None	replace
1140	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "littleClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "littleClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "littleClass ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
1141	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  unsafeClass  =  f.getDeclaredField( "sun.safe.class ");	          final    Class    <?>    unsafeClass    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	replace
1142	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theunsafe. ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theunsafe. ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theunsafe. ");	  Class    <?>    c    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
1143	[BUG]  [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f  =  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f  =  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  incompatible  types	36	None	replace
1144	[BUG]  [BUGGY]  if(f.isInstance()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance()  ||  f.isAccessible(true))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isInstance())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1145	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setInstance(null);  f.setInstance(null);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setInstance(null);  f.setInstance(null);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setInstance(null);  f.setInstance(null);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
1146	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setVisible(true);  f.setVisible(false);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setVisible(true);  f.setVisible(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setVisible(true);  f.setVisible(false);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
1147	[BUG]  [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setFlag(true);  f.setFlag(false);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);    f.setAccessible(false);  f.setFlag(true);  f.setFlag(false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);        f.setAccessible(false);    f.setFlag(true);  f.setFlag(false);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
1148	[BUG]  [BUGGY]  if(f!=  null)  {  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	59	None	replace
1149	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  c);  }  [CE]  cannot  find  symbol  c  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  c);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  c);  }	  if(f!=    null)    {    f.setAccessible(null);    }    	non-compiled	[CE]  cannot  find  symbol  c	111	None	replace
1150	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  final  Object  f  =  f.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  final  Object  f  =  f.getDeclaredField( "theUnsafe ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    final  Object  f  =  f.getDeclaredField( "theUnsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	134	None	add
1151	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1152	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	96	None	replace
1153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  }  else  {  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	96	1	replace
1154	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  f.setAccessible(false);  }	  f.setAccessible(false);    final    Object    unsafeClass    =    getConstructorId();    f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	96	1	replace
1155	[BUG]  [BUGGY]  final  Class  <?>  f  =  c.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Class  <?>  f  =  c.getDeclaredField( "theUnsafeClass ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  c.getDeclaredField( "theUnsafeClass ");	  final    Class    <?>    f    =    f.getDeclaredField(   "theUnsafeClass   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	45	None	replace
1156	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isFunction())  {  f.setFunction(false);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  if(f.isFunction())  {  f.setFunction(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isFunction())  {  f.setFunction(false);  }	  if(f!=    null)    {    if(f.isAccessible())    {    f.setAccessible(false);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
1157	[BUG]  [BUGGY]  if(f.isInstance()  ||  f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance()  ||  f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance()  ||  f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setInstance(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1158	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(false,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInstance())  {  f.setInstance(false,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(false,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInstance())    {    f.setInstance(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1159	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " "));  }	  	non-compiled	[CE]  	7	None	add
1160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
1161	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( ". ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	7	2	add
1162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())  {  f.setAccessible(true);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    	compilable	  [FE]  AssertionFailedError  	165	1	replace
1163	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(true);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    	compilable	  [FE]  AssertionFailedError  	165	1	replace
1164	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	3	None	add
1165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
1166	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
1167	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator()  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator()  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class   ");  if(c  ==  null)  {  return  new  UnsafeAllocator()	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "class   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  	156	None	replace
1168	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId(null,  c);  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId(null,  c);  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId(null,  c);  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
1169	[BUG]  [BUGGY]  if(f!=  null)  {  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
1170	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass)&&  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(unsafeClass)&&  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass)&&  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAssignableFrom(unsafeClass))    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  	25	None	replace
1171	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  c);  [CE]  cannot  find  symbol  c  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass,  c);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  c	128	None	replace
1172	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  false,  unsafeClass,  safeClass);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass,  safeClass);	  f.setAccessible(false,    false,    unsafeClass);    	non-compiled	[CE]  cannot  find  symbol  safeClass	128	None	replace
1173	[BUG]  [BUGGY]  if(f.isInterface()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isInterface()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface()  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
1174	[BUG]  [BUGGY]  if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	21	None	replace
1175	[BUG]  [BUGGY]  Object  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.getDeclaredField( "theUnsafe   ");	  if(f!=    null    ||    f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	21	None	replace
1176	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	112	None	add
1177	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	112	None	add
1178	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	112	None	add
1179	[BUG]  [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAssignableFrom(f);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAssignableFrom(f);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f))  {  f.setAssignableFrom(f);  }	  if(f.isAccessible())    {    f.setAccessible(false);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
1180	[BUG]  [BUGGY]  if(f.isConstructor()  ||  f.isAccessible(false))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isConstructor()  ||  f.isAccessible(false))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor()  ||  f.isAccessible(false))  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isConstructor())    {    f.setAccessible(false);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1181	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f    ==    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    safeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	133	None	replace
1182	[BUG]  [BUGGY]  final  Field  f  =  safeFunction.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  final  Field  f  =  safeFunction.getDeclaredField( "theAllocator ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Field  f  =  safeFunction.getDeclaredField( "theAllocator ");	          final    Field    f    =    f.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	104	None	replace
1183	[BUG]  [BUGGY]  if(f!=  null)  {  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c!=    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	173	None	replace
1184	[BUG]  [BUGGY]  f.setAccessible(false,  null,  unsafeClass,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,Class<CAP#1>,boolean)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false,  null,  unsafeClass,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  null,  unsafeClass,  false);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,Class<CAP#1>,boolean)	81	None	replace
1185	[BUG]  [BUGGY]  f.setAccessible(unsafeClass,  null,  false);  [CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(unsafeClass,  null,  false);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass,  null,  false);	  f.setAccessible(true,    null,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Class<CAP#1>,<null>,boolean)	81	None	replace
1186	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  getConstructorId());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(null,  getConstructorId());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null,  getConstructorId());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
1187	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(Field)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(null);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(Field)	153	None	replace
1188	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	60	None	add
1189	[BUG]  [BUGGY]  f  =  f.isInterface();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isInterface();  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isInterface();	  if(f.isInterface())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
1190	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  if(unsafe!=  null)  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  if(unsafe!=  null)  {  f.setAccessible(false);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  if(unsafe!=  null)  {  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  'catch'  without  'try'	84	None	replace
1191	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  getConstructorId( "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1192	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  If(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  If(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    If(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  ';'  expected	85	None	add
1193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
1194	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	85	2	add
1195	[BUG]  [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessibility(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=        null)        {        f.setAccessible(true);        }        if(f    ==    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessibility(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
1196	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  f.setAccessible(f.isAccessible());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  f.setAccessible(f.isAccessible());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());  f.setAccessible(f.isAccessible());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
1197	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccuracy());  f.setAccessible(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccuracy());  f.setAccessible(f.isAccuracy());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());        f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccuracy());  f.setAccessible(f.isAccuracy());	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
1198	[BUG]  [BUGGY]  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  safeClass.getDeclaredField( "theUnsafe   ");	  Class    <?>    f    =    f.getDeclaredField(   "theUnsafe       ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	44	None	replace
1199	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  {  null)  {  f.setAccessible(true);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  if(f  {  null)  {  f.setAccessible(true);  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    if(f  {  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  ')'  expected	55	None	add
1200	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  final  Object  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  final  Object  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f    ==    null)    {    f.setAccessible(true);    }    final  Object  f  =  f.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	55	None	add
1201	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnisafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnisafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnisafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(f.isAccessible());    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	116	None	replace
1202	[BUG]  [BUGGY]  Object  f  =  f.get(null,  c);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  Object  f  =  f.get(null,  c);  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.get(null,  c);	  Object    f    =    f.get(null);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	171	None	replace
1203	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
1204	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  return  new  UnsafeAllocator();  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theUnsafe-Class   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	140	None	replace
1205	[BUG]  [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass.isArray())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
1206	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  }	  f.setAccessible(false);    Class    <?>    f    =    unsafeClass.getDeclaredField(   "theAllocator   ");    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	126	None	replace
1207	[BUG]  [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  final  Object  unsafe  =  f.get(null);  final  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(false);    }    else    {    Class    <?>    c    =    f.getDeclaredField(   "theUnsafe   ");    if(c    ==    null)    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  'catch'  without  'try'	172	None	replace
1208	[BUG]  [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   ".   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())        {        f.setAccessible(true);        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
1209	[BUG]  [BUGGY]  f.setAccessible(false);  f.setInstance(false.isInstance());  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f.setAccessible(false);  f.setInstance(false.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);  f.setInstance(false.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	150	None	replace
1210	[BUG]  [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  accessible  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(accessible.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(accessible.isAccessible());  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol  accessible	150	None	replace
1211	[BUG]  [BUGGY]  f  =  f.setAccessible(true);  f.setInstance(f.isInstance());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.setAccessible(true);  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.setAccessible(true);  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  incompatible  types	150	None	replace
1212	[BUG]  [BUGGY]  f  =  f.isAccessible();  f.setInstance(f.isInstance());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.isAccessible();  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.isAccessible();  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  incompatible  types	150	None	replace
1213	[BUG]  [BUGGY]  f  =  f.getAccessible();  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(     "sun.misc.Unsafe     ");  Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");      [BUGGY]  f  =  f.getAccessible();  f.setInstance(f.isInstance());  [BUGGY]      final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getAccessible();  f.setInstance(f.isInstance());	  f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
