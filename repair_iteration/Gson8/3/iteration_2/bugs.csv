bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
2	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }	  f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
4	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
5	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	7	None	replace
6	[BUG]  [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(unsafeClass.isAccessible());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(unsafeClass.isAccessible());	  f.setAccessible(f.isAccessible());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
8	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  throw  new  IllegalStateException( " ");  }	  f.setAccessible(f.isAccessible());    	compilable	  [FE]  AssertionFailedError  	7	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
10	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
11	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	15	None	add
12	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isConstructor())  {  f.setConstructor(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
13	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
14	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInterface())  {  f.setInterface(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
15	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	replace
16	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	replace
17	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	replace
18	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	14	None	replace
19	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
20	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInterface())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
21	[BUG]  [BUGGY]  if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null  ||  f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	17	None	replace
22	[BUG]  [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
23	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	17	None	replace
24	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
25	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
26	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
27	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInterface())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
28	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
29	[BUG]  [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(unsafeClass))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
30	[BUG]  [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(f))  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
31	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
33	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
35	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
36	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	2	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
38	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
39	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  }	  f.setAccessible(false);    	non-compiled	[CE]  incompatible  types	2	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
41	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }	  f.setAccessible(false);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
42	[BUG]  [BUGGY]  final  Object  unsafeClass  =  f.get(null);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  final  Object  unsafeClass  =  f.get(null);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafeClass  =  f.get(null);	      	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	12	None	replace
43	[BUG]  [BUGGY]  final  Object  unsafe  =  f.get(null);  [CE]  variable  unsafe  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  final  Object  unsafe  =  f.get(null);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  unsafe  =  f.get(null);	      	non-compiled	[CE]  variable  unsafe  is  already  defined  in  method  create()	12	None	replace
44	[BUG]  [BUGGY]  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");	      	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	12	None	replace
45	[BUG]  [BUGGY]  final  Class  <?>  f  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  final  Class  <?>  f  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  f.getDeclaredField( "theUnsafeClass ");	      	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	12	None	replace
46	[BUG]  [BUGGY]  final  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  final  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Class  <?>  f  =  f.getDeclaredField( "theUnsafe   ");	      	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	12	None	replace
47	[BUG]  [BUGGY]  Class  <?>  f  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  Class  <?>  f  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  f.getDeclaredField( "theUnsafeClass ");	      	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	12	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());	  	compilable	  [FE]  AssertionFailedError  	6	2	add
49	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessible(f.isAccessible());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setAccessible(f.isAccessible());	  	compilable	  [FE]  AssertionFailedError  	6	2	add
50	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	6	None	add
51	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessibility(f.isAccessible());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setAccessibility(f.isAccessible());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
52	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccuracy(f.isAccuracy());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setAccuracy(f.isAccuracy());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
53	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	6	None	add
54	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	6	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
56	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
57	[BUG]  [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
59	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
61	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
63	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
64	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	4	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
66	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
68	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
69	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	10	None	replace
70	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	10	None	replace
71	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null);  }  else  {  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	10	None	replace
72	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	13	None	replace
73	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	13	None	replace
74	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
75	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	13	None	replace
76	[BUG]  [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(unsafeClass  ==  null)  {  if(f!=  null)  {  f.setAccessible(true);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
77	[BUG]  [BUGGY]  f.setAccessible(true,  false,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(true,  false,  unsafeClass);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  unsafeClass);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)	3	None	replace
78	[BUG]  [BUGGY]  f.setAccessible(true,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(true,  false,  null);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  null);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)	3	None	replace
79	[BUG]  [BUGGY]  f.setAccessible(true,  true,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(true,  true,  false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  true,  false);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	3	None	replace
80	[BUG]  [BUGGY]  f.setAccessible(true,  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(true,  false,  safeClass);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false,  safeClass);	  f.setAccessible(true,    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	3	None	replace
81	[BUG]  [BUGGY]  f.setAccessible(true,  null,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(true,  null,  false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  null,  false);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)	3	None	replace
82	[BUG]  [BUGGY]  f.setAccessible(true,  unsafeClass,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean)  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(true,  unsafeClass,  false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  unsafeClass,  false);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,Class<CAP#1>,boolean)	3	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
84	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    if(f!=  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
86	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  ==  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    if(f  ==  null)  {  f.setAccessible(true);  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
87	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  If(f!=  null)  {  f.setAccessible(true);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  If(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    If(f!=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  ';'  expected	8	None	add
88	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  >=  null)  {  f.setAccessible(true);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  >=  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    if(f  >=  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	add
89	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  >>  null)  {  f.setAccessible(true);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  if(f  >>  null)  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    if(f  >>  null)  {  f.setAccessible(true);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	8	None	add
90	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	8	None	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  f.setAccessible(false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);    f.setAccessible(false);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
92	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccessible(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  f.setAccessible(false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    f.setAccessible(false);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  f.setAccessible(true);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);    f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
94	[BUG]  [BUGGY]  f.setAccessible(false);  f.setAccessible(true);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  f.setAccessible(true);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    f.setAccessible(true);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
95	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
96	[BUG]  [BUGGY]  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    final  Object  unsafeClass  =  getConstructorId();  f.setAccessible(false);	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
97	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeAllocator ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
98	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  [CE]  variable  f  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe ".getRawClass());	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
99	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe. ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
100	[BUG]  [BUGGY]      final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  Field  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        final  Field  f  =  f.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
101	[BUG]  [BUGGY]      final  Class  <?>  unsafeClass  =  getConstructorId();  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  Class  <?>  unsafeClass  =  getConstructorId();  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        final  Class  <?>  unsafeClass  =  getConstructorId();	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
102	[BUG]  [BUGGY]      if(f!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      if(f!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        if(f!=  null)  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	11	None	add
103	[BUG]  [BUGGY]      final  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        final  Object  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
104	[BUG]  [BUGGY]      final  Field  f  =  f.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  Field  f  =  f.getDeclaredField( "theAllocator ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        final  Field  f  =  f.getDeclaredField( "theAllocator ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	11	None	add
105	[BUG]  [BUGGY]  if(f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAssignableFrom(null))  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
106	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  unsafeClass.getDeclaredField( "theUnsafe   ");  f.setAccessible(false);  }	  f.setAccessible(false);    	non-compiled	[CE]  incompatible  types	2	None	replace
107	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setConstructorId(f.isConstructor());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setConstructorId(f.isConstructor());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
108	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setSupported(f.isSupported());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setSupported(f.isSupported());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
109	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setAccessible(f.getAccessible());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setAccessible(f.getAccessible());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
110	[BUG]  [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	replace
111	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null);  }	  if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	9	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
113	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	4	2	add
114	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	4	None	add
115	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  UnsafeAllocatorException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
116	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	replace
117	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
118	[BUG]  [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
119	[BUG]  [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  if(f.isAccessible())  {  f.setAccessible(false);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
120	[BUG]  [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setConstructorId(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
122	[BUG]  [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
123	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	8	None	add
124	[BUG]  [BUGGY]  f.setAccessible(false);  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    final  Object  f  =  unsafeClass.getDeclaredField( "theUnsafe   ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
125	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafeFalse ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
126	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theAllocator ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
127	[BUG]  [BUGGY]  f.setAccessible(false,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false,  false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	3	None	replace
128	[BUG]  [BUGGY]  f.setAccessible(false,  false,  unsafeClass);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false,  false,  unsafeClass);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  unsafeClass);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)	3	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(null,  false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(null,  false);	  f.setAccessible(true,    false);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
130	[BUG]  [BUGGY]  f.setAccessible(null,  false);  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(null,  false);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(null,  false);	  f.setAccessible(true,    false);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
131	[BUG]  [BUGGY]  f.setAccessible(false,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false,  false,  null);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  false,  null);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)	3	None	replace
132	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
133	[BUG]  [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f  ==  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  safeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
135	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
136	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isConstructor())  {  f.setConstructor(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
138	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
139	[BUG]  [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Class  <?>  c  =  f.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
140	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe-Class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
141	[BUG]  [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false);  Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);    Class  <?>  f  =  unsafeClass.getDeclaredField( "theUnsafe_class ");	  	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	1	None	add
142	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	13	None	replace
143	[BUG]  [BUGGY]  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f  =  f.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    f.setAccessible(false);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
144	[BUG]  [BUGGY]  f.setAccessible(false,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(false,  true);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false,  true);	  f.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	3	None	replace
145	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=    null)    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	4	None	add
146	[BUG]  [BUGGY]  Field  f  =  f.getDeclaredField( "theUnsafe   ");  [CE]  variable  f  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  Field  f  =  f.getDeclaredField( "theUnsafe   ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Field  f  =  f.getDeclaredField( "theUnsafe   ");	  if(f!=    null)    {    f.setAccessible(true);    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	9	None	replace
147	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setVisible(f.isVisible());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setVisible(f.isVisible());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
148	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setStatic(f.isStatic());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setStatic(f.isStatic());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
149	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setAutoRange(f.isAutoRange());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setAutoRange(f.isAutoRange());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
150	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  f.setAccessible(f.isAccessible());  f.setInstance(f.isInstance());  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());    f.setInstance(f.isInstance());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
151	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isUnsafe())  {  f.setUnsafe(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
152	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(f.isInstance())  {  f.setInstance(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
153	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(<null>)  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(null);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(<null>)	14	None	replace
154	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false,  false);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    Class    <?>    unsafeClass    =    getConstructorId();    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	14	None	replace
155	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
156	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(f.isAccessible());  }  else  {  Class  <?>  c  =  f.getDeclaredField( "class ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  f.setAccessible(f.isAccessible());    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
157	[BUG]  [BUGGY]      Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        Class  <?>  c  =  f.getDeclaredField( "theUnsafeClass ");	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
158	[BUG]  [BUGGY]      Class  <?>  c  =  f.getDeclaredField( "theClass ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      Class  <?>  c  =  f.getDeclaredField( "theClass ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        Class  <?>  c  =  f.getDeclaredField( "theClass ");	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  String  constructorId  =  f.getName();  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	        final  String  constructorId  =  f.getName();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
160	[BUG]  [BUGGY]      final  String  constructorId  =  f.getName();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  String  constructorId  =  f.getName();  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        final  String  constructorId  =  f.getName();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
161	[BUG]  [BUGGY]      final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]      final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	        final  Class  <?>  unsafeClass  =  f.getDeclaredField( "theUnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
163	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())  {  f.setAccessible(false);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
165	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isAccessible())  {  f.setAccessible(false);  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(false);  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
166	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
167	[BUG]  [BUGGY]  if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInterface())  {  f.setInterface(false);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
168	[BUG]  [BUGGY]  if(f.isConstructor())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isConstructor())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f.setAccessible(false);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
169	[BUG]  [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isConstructor())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
170	[BUG]  [BUGGY]  if(f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isInstance())  {  f.setInstance(true);  }  else  {  return  new  UnsafeAllocator();  }	  if(f.isAccessible())    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
171	[BUG]  [BUGGY]  Object  f  =  f.get(null);  [CE]  variable  f  is  already  defined  in  method  create()  [FE]                  AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  Object  f  =  f.get(null);  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	Object  f  =  f.get(null);	  if(f!=    null)    {    f.setAccessible(true);    }    else    {    return    new    UnsafeAllocator();    }    	non-compiled	[CE]  variable  f  is  already  defined  in  method  create()	10	None	replace
172	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c  ==  null)  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
173	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName(   "sun.misc.Unsafe   ");  Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");    [BUGGY]  if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }  [BUGGY]    final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(false);  }  else  {  Class  <?>  c  =  f.getDeclaredField( "theUnsafe ");  if(c!=  null)  {  return  new  UnsafeAllocator();  }	  f.setAccessible(false);    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
