bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  f.setAccessible(false);  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(false);	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
2	[BUG]  [BUGGY]  f.setAccessible(false);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  f.setAccessible(false);  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(false);	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
3	[BUG]  [BUGGY]  f.setAccessible(true,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  f.setAccessible(true,  false);  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(true,  false);	f.setAccessible(true);  	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	6	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	2	replace
5	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	2	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  f.setAccessible(f.isAccessible());  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	f.setAccessible(f.isAccessible());	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
7	[BUG]  [BUGGY]  f.setAccessible(f.isAccessible());  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  f.setAccessible(f.isAccessible());  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	f.setAccessible(f.isAccessible());	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f!=  null)  {  f.setAccessible(true);  }	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	2	replace
9	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	2	replace
10	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]              AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	f.setAccessible(true);  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	6	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]    [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	  	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
12	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]    [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	  	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
13	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  f.setAccessible(false);  }	f.setAccessible(true);  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	6	None	replace
14	[BUG]  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f!=  null)  {  f.setAccessible(true);  }  else  {  Class  <?>  unsafeClass  =  getConstructorId();  return  new  UnsafeAllocator();  }	f.setAccessible(true);  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	6	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	add	if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
16	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	f.setAccessible(true);  	compilable	  [FE]  AssertionFailedError  	6	1	replace
17	[BUG]  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  [BUGGY]  if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }  [BUGGY]  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  };  }  catch  (Exception  ignored)  {  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	41	41	2	replace	if(f.isAccessible())  {  f.setAccessible(true);  }  else  {  return  new  UnsafeAllocator();  }	f.setAccessible(true);  	non-compiled	[CE]  UnsafeAllocator  is  abstract;  cannot  be  instantiated	6	None	replace
