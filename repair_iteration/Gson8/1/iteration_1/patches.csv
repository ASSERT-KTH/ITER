bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
2	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
4	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
6	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
8	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
10	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
11	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
12	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
13	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
15	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
17	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
19	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
21	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
23	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
24	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
25	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
26	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
27	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
29	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
31	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
33	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
34	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
35	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
36	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
37	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe "));	  	non-compiled	[CE]  	5	None	add
38	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
39	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
40	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	5	None	add
41	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
43	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
45	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
47	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
49	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "null ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
51	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "null ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
53	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
55	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
57	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
58	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".class);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
60	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
61	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	17	None	replace
62	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
63	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
64	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
65	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
67	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
69	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
71	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
73	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
75	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
76	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	add
77	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	add
78	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	add
79	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	24	None	add
80	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
81	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
82	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
83	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
85	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
86	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Object  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
87	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
88	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <  T>  unsafeClass  =  c.getSuperclass();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c.getSuperclass();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
89	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
90	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
91	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <  T>  unsafeClass  =  c.getSuperclass();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c.getSuperclass();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
92	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)super.create();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                                AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)super.create();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)super.create();	      	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	13	None	replace
93	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
94	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
95	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
96	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
98	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
100	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
102	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
103	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ".class);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
105	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
106	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
107	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
108	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
109	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
111	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
112	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
113	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
114	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
115	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
116	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));	  	non-compiled	[CE]  	1	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
118	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
119	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ".class);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
121	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
122	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	23	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
124	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
125	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
126	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
127	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
128	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
129	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));	  	non-compiled	[CE]  	16	None	add
130	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
131	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
132	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
133	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
134	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
135	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
136	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
137	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ".);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	9	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
139	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
141	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
143	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
144	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Object  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
145	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  final  Field  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
146	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  UnsafeAllocator  f  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
147	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	18	None	add
148	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
150	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	19	1	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
152	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "null.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
154	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "null.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
156	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
158	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
160	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
162	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
164	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
166	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
168	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
170	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
172	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
174	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
176	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
178	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	23	1	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
180	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
181	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator   ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	11	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
183	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
184	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null);  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	21	None	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
186	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
187	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));	  	non-compiled	[CE]  	9	None	add
188	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getRawClass();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
189	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  static  UnsafeAllocator  create()  {      try  {    [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId();  [BUGGY]    Field  f  =  unsafeClass.getDeclaredField(   "theUnsafe   ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(   "allocateInstance   ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(   "unchecked   ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getConstructorId();	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
