bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
2	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
4	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
5	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ".class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	non-compiled	[CE]  <identifier>  expected	128	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
7	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ");  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
9	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
10	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	non-compiled	[CE]  <identifier>  expected	162	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
12	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
13	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	162	None	replace
14	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ",  false);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ",  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass ",  false);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	162	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
16	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
18	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
19	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ".getRawClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ".getRawClass());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ".getRawClass());	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
20	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	140	None	add
21	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAccess ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAccess ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	140	None	add
22	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	140	None	add
23	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAccess ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAccess   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAccess ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	140	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
25	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
26	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	6	None	replace
27	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	185	None	add
28	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe_Class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe_Class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	185	None	add
29	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	185	None	add
30	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ".class);	  	non-compiled	[CE]  <identifier>  expected	185	None	add
31	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "unsafe ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    UnsafeAllocator    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	147	None	replace
32	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    UnsafeAllocator    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	147	None	replace
33	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    UnsafeAllocator    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	147	None	replace
34	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  new  Class[]  {  }  );  [CE]  no  suitable  method  found  for  forName(String,Class[])  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  new  Class[]  {  }  );  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  new  Class[]  {  }  );	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,Class[])	119	None	replace
35	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ").class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ").class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ").class);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ".class);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
36	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
37	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
38	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
39	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
40	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
41	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ".);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ".);	  	non-compiled	[CE]  <identifier>  expected	149	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe       ");    	compilable	  [FE]  AssertionFailedError  	136	1	replace
43	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe       ");    	compilable	  [FE]  AssertionFailedError  	136	1	replace
44	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	163	None	add
45	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe_class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	163	None	add
46	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	163	None	add
47	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	163	None	add
48	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
49	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
50	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
51	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
52	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".misc.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	148	1	replace
54	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".misc.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	148	1	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
56	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
57	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	non-compiled	[CE]  <identifier>  expected	108	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
59	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
60	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	30	None	add
61	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	30	None	add
62	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	30	None	add
63	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	30	None	add
64	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
65	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
66	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
67	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
68	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getUnsafeClass();	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
69	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getConstructorId(null);	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
70	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getConstructorId().getSuperclass();	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
71	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  getFunctionId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getFunctionId();	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
72	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getConstructorId(false);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  getConstructorId(false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getConstructorId(false);	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
74	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
76	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.ArrayList ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
77	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	121	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
79	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
80	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
82	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
84	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
86	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
88	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "null. ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
90	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "null. ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
92	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".class ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
94	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".class ");	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	compilable	  [FE]  AssertionFailedError  	154	1	replace
95	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	179	None	add
96	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	179	None	add
97	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".theunsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".theunsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".theunsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	179	None	add
98	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theunsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	179	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
100	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
102	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
103	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
104	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	4	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class, ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class, ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
106	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class, ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class, ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class, ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	4	1	replace
107	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	165	None	add
108	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".getUnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".getUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ".getUnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	165	None	add
109	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	165	None	add
110	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ".);	  	non-compiled	[CE]  <identifier>  expected	165	None	add
111	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	169	None	add
112	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.jdk.internal.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.jdk.internal.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.jdk.internal.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	169	None	add
113	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	169	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	183	1	replace
115	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	183	1	replace
116	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	84	None	add
117	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe-class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe-class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	84	None	add
118	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	84	None	add
119	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	84	None	add
120	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	non-compiled	[CE]  <identifier>  expected	65	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
122	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
123	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	65	None	replace
124	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	70	None	add
125	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	70	None	add
126	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	70	None	add
127	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	70	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
129	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
131	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.declaration.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.declaration.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
133	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.declaration.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.declaration.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.declaration.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.type.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.type.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
135	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.type.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.type.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.type.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
136	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	167	None	add
137	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.hibernate.unsafe.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.hibernate.unsafe.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	167	None	add
138	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	167	None	add
139	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.hibernate.unsafe.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.hibernate.unsafe.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.hibernate.unsafe.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	167	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	180	1	replace
141	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "theunsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	180	1	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "node.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "node.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	180	1	replace
143	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "node.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "node.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "node.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	180	1	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
145	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
147	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
149	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
151	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
153	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeClass ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
155	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
157	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	67	1	replace
158	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	177	None	add
159	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.mockito.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.mockito.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.mockito.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	177	None	add
160	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	177	None	add
161	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    Class  <?>  unsafeClass  =  Class.forName( "null.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	153	None	add
162	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	153	None	add
163	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "null.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	153	None	add
164	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( "null.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( "null.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    Class  <?>  unsafeClass  =  Class.forName( "null.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	153	None	add
165	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( "null.class "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null.class   ");  Class  <?>  unsafeClass  =  Class.forName( "null.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    Class  <?>  unsafeClass  =  Class.forName( "null.class "));	  	non-compiled	[CE]  	153	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	26	1	replace
167	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "Unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	26	1	replace
168	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	add
169	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	add
170	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	add
171	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
173	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
174	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	non-compiled	[CE]  <identifier>  expected	33	None	replace
175	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	33	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
177	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
179	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe_Class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
181	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	41	1	replace
183	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	41	1	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "false ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "false ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	41	1	replace
185	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "false ");  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "false ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "false ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	41	1	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ".java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	94	1	replace
187	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ".java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	94	1	replace
188	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ".java.util.ArrayList       ");    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ".java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	94	1	replace
190	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ".java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	94	1	replace
191	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	182	None	add
192	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.mockito.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.mockito.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	182	None	add
193	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	182	None	add
194	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.mockito.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	182	None	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
196	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( ".class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
198	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( ".class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
200	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "class ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	compilable	  [FE]  AssertionFailedError  	127	1	replace
201	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "unsafe.class ");  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   ".class   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
202	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	97	None	add
203	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	97	None	add
204	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	97	None	add
205	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	97	None	add
206	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	35	None	replace
207	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getUnsafeClass();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
208	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c.getConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c.getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c.getConstructorId();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
209	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getConstructorId(null);	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
210	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getConstructorId().getSuperclass();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
211	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId(),  constructorId);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId(),  constructorId);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getConstructorId(),  constructorId);	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  ';'  expected	189	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
213	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
215	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
216	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	164	None	replace
217	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".getRawClass());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".getRawClass());	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
218	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".getSimpleName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".getSimpleName());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".getSimpleName());	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
219	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  null  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  null  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c  ==  null?  null  :  c.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
220	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  this.safeClass.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  this.safeClass.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  this.safeClass.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
221	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  class.getSuperclass();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  class.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  class.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
222	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  super.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  super.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  super.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
223	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  System.getProperty( "org.hibernate.class.superclass ");  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  System.getProperty( "org.hibernate.class.superclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  System.getProperty( "org.hibernate.class.superclass ");	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
224	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ", "org.misc.UnsafeAllocator ");  [CE]  no  suitable  method  found  for  forName(String,String)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ", "org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ", "org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,String)	103	None	replace
225	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ".class);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
226	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ").class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ").class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ").class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ".class);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
227	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	72	None	add
228	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	72	None	add
229	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	72	None	add
230	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	72	None	add
231	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	151	None	add
232	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	151	None	add
233	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	151	None	add
234	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	151	None	add
235	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".theUnsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".theUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".theUnsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	151	None	add
236	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	173	None	add
237	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.ClassLoader ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.ClassLoader ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	173	None	add
238	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	173	None	add
239	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.ClassLoader ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.ClassLoader ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	173	None	add
240	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.ClassLoader   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ".class);	  	non-compiled	[CE]  <identifier>  expected	173	None	add
241	[BUG]  [BUGGY]  final  Field  f  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  f  =  getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  f  =  getConstructorId();	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
242	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getUnsafeClass();	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
243	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getConstructorId().getSuperclass();	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
244	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getConstructorId(null);	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
245	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getConstructorId().getDeclaredField( "theUnsafe   ");  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  unsafeClass  =  getConstructorId().getDeclaredField( "theUnsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getConstructorId().getDeclaredField( "theUnsafe   ");	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
246	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
248	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "Unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	113	1	replace
250	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe       ");    	compilable	  [FE]  AssertionFailedError  	113	1	replace
251	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	non-compiled	[CE]  <identifier>  expected	36	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "safe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
253	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "safe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
254	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	36	None	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	109	1	replace
256	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	109	1	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	109	1	replace
258	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	109	1	replace
259	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	157	None	add
260	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	157	None	add
261	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	157	None	add
262	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	157	None	add
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "getUnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
264	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "getUnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getConstructorId ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "getConstructorId ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
266	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getConstructorId ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getConstructorId ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "getConstructorId ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "setUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "setUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
268	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "setUnsafeClass ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "setUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "setUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "getUnsafe   ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
270	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafe   ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "getUnsafe   ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
272	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAccess ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
274	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeaccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeaccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
276	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeaccess ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeaccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeaccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
277	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
278	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
279	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
280	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
281	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	159	None	add
282	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeInstance ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeInstance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeInstance ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	159	None	add
283	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	159	None	add
284	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	159	None	add
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    	compilable	  [FE]  AssertionFailedError  	156	1	replace
286	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    	compilable	  [FE]  AssertionFailedError  	156	1	replace
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "deprecated. ");	  Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    	compilable	  [FE]  AssertionFailedError  	156	1	replace
288	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "deprecated. ");	  Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    	compilable	  [FE]  AssertionFailedError  	156	1	replace
289	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "deprecated ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    	non-compiled	[CE]  <identifier>  expected	156	None	replace
290	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	156	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
292	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
294	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
295	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	add
296	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeallocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeallocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	add
297	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	add
298	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	add
299	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
300	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.security.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.security.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
301	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
302	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.security.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.security.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.security.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	9	None	add
303	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( "null ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null   ");    Class  <?>  unsafeClass  =  Class.forName( "null ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	50	None	add
304	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  final  Class  <?>  unsafeClass  =  Class.forName( "null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  final  Class  <?>  unsafeClass  =  Class.forName( "null ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null   ");    final  Class  <?>  unsafeClass  =  Class.forName( "null ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	50	None	add
305	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( ".null ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( ".null ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null   ");    Class  <?>  unsafeClass  =  Class.forName( ".null ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	50	None	add
306	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( "null ".);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( "null ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null   ");    Class  <?>  unsafeClass  =  Class.forName( "null ".);	  	non-compiled	[CE]  <identifier>  expected	50	None	add
307	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( "null "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "null   ");  Class  <?>  unsafeClass  =  Class.forName( "null "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "null   ");    Class  <?>  unsafeClass  =  Class.forName( "null "));	  	non-compiled	[CE]  	50	None	add
308	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
309	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
310	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
311	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
313	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
315	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
316	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	85	None	replace
317	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  false);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  false);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	85	None	replace
318	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	non-compiled	[CE]  <identifier>  expected	85	None	replace
319	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  true);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  true);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class ",  true);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	85	None	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	98	1	replace
321	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	98	1	replace
322	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getUnsafeClass();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
323	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId(null);	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
324	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  this.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  this.getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  this.getConstructorId();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	87	None	replace
325	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
326	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getFactory();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getFactory();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getFactory();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
328	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
329	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
331	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
333	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Class ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    	compilable	  [FE]  AssertionFailedError  	8	1	replace
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	81	1	replace
335	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	81	1	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "null ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "null ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
337	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "null ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "null ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "null ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.reflect.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.reflect.unsafe.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
339	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.reflect.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.reflect.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.reflect.unsafe.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
341	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".com.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	25	1	replace
342	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	106	None	replace
343	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
344	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	add
345	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	add
346	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	add
347	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	add
348	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	104	None	add
349	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	104	None	add
350	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	104	None	add
351	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	104	None	add
352	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	104	None	add
353	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  true);  [CE]  no  suitable  method  found  for  forName(String,boolean,boolean)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  true);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  true);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean,boolean)	122	None	replace
354	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  true);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  true);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  true);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	122	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  null);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	compilable	  [FE]  AssertionFailedError  	122	1	replace
356	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  null);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  null);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	compilable	  [FE]  AssertionFailedError  	122	1	replace
357	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  false);  [CE]  no  suitable  method  found  for  forName(String,boolean,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  false);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean,boolean)	122	None	replace
358	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  unsafeClass);  [CE]  no  suitable  method  found  for  forName(String,<null>,Class<CAP#1>)  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  unsafeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  unsafeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>,Class<CAP#1>)	184	None	replace
359	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ",  c);  [CE]  cannot  find  symbol  c  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ",  c);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe   ",  c);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	184	None	replace
360	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class,  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ".class,  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ",    null);    	non-compiled	[CE]  <identifier>  expected	184	None	replace
361	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  false);  [CE]  no  suitable  method  found  for  forName(String,<null>,boolean)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  false);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>,boolean)	184	None	replace
362	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  safeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  null,  safeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	184	None	replace
363	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
364	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
365	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
366	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
367	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "safe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	54	None	add
368	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "safe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	54	None	add
369	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	54	None	add
370	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	54	None	add
371	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	54	None	add
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ",java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	96	1	replace
373	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ",java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	96	1	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ";java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ",java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	96	1	replace
375	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ";java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ",java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	96	1	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	135	1	replace
377	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	135	1	replace
378	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	add
379	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.UnsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.UnsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	add
380	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	158	1	replace
382	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	158	1	replace
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
384	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
385	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	170	None	replace
386	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	170	None	replace
387	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ",  false);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ",  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList ",  false);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	170	None	replace
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
389	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
391	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
392	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
393	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	10	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeallocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
395	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeallocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.unsafeallocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
396	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe_class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	46	None	add
397	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	46	None	add
398	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe_class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafe_class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	46	None	add
399	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe_class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	46	None	add
400	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe_class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe_class "));	  	non-compiled	[CE]  	46	None	add
401	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	99	None	add
402	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	99	None	add
403	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	99	None	add
404	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	68	None	add
405	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	68	None	add
406	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe-class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafe-class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	68	None	add
407	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	68	None	add
408	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	44	None	add
409	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));	  	non-compiled	[CE]  	44	None	add
410	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	44	None	add
411	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	44	None	add
412	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	44	None	add
413	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getUnsafeClass();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
414	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getConstructorId(null);	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
415	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getSimpleConstructorId();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getSimpleConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getSimpleConstructorId();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
416	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getConstructorId().getSuperclass();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
417	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getFactory();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getFactory();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getFactory();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
418	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
420	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
422	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	82	1	replace
423	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	171	None	add
424	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	171	None	add
425	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	171	None	add
426	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator.. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	171	None	add
427	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ".);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ".);	  	non-compiled	[CE]  <identifier>  expected	171	None	add
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
429	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
431	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.List ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
432	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	178	None	replace
433	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	178	None	replace
434	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ",  false);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ",  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList ",  false);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	178	None	replace
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
436	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Object ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Object ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
438	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Object ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Object ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Object ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	compilable	  [FE]  AssertionFailedError  	11	1	replace
440	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	compilable	  [FE]  AssertionFailedError  	11	1	replace
441	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	11	None	replace
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
443	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "invalid_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "invalid_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
445	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "invalid_class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "invalid_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "invalid_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
446	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
447	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe_class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
448	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ".getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ".getRawClass());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe_class ".getRawClass());	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
449	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ");  [CE]  no  suitable  method  found  for  forName(String,String)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,String)	34	None	replace
450	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ");  [CE]  no  suitable  method  found  for  forName(String,String)  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,String)	34	None	replace
451	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ").class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ").class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ").class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
452	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().withUTC().getRawClass();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().withUTC().getRawClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().withUTC().getRawClass();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
453	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId(),  c.getRawClass();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId(),  c.getRawClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId(),  c.getRawClass();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  ';'  expected	188	None	replace
454	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().newInstance();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().newInstance();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().newInstance();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
455	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getRootClass();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getRootClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().getRootClass();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
456	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().getSuperclass();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
457	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)c.create();  [CE]  cannot  find  symbol  c  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)c.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)c.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  c	92	None	replace
458	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)unsafeClass.create();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)unsafeClass.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)unsafeClass.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
459	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)this.safeClass.create();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)this.safeClass.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)this.safeClass.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	92	None	replace
460	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)constructor.create();  [CE]  cannot  find  symbol  constructor  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)constructor.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)constructor.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  constructor	92	None	replace
461	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)super.getConstructorId();  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)super.getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)super.getConstructorId();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	92	None	replace
462	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)f.create();  [CE]  cannot  find  symbol  f  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)f.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)f.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  f	92	None	replace
463	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ").class;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ").class;  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ").class;	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ".class);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
465	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
467	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
469	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
470	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	non-compiled	[CE]  <identifier>  expected	75	None	replace
471	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	add
472	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	add
473	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafeClass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafeClass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	add
474	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeClass. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	add
475	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ".);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeClass ".);	  	non-compiled	[CE]  <identifier>  expected	42	None	add
476	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	56	None	add
477	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	56	None	add
478	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	56	None	add
479	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".this.unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".this.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".this.unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	56	None	add
480	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	56	None	add
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
482	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
484	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe-class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
485	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	69	None	replace
486	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ".getRawClass());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ".getRawClass());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ".getRawClass());	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
488	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe-class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
490	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".org.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
491	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
492	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ".class);	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
494	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
496	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
498	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeclass ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
499	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	non-compiled	[CE]  <identifier>  expected	139	None	replace
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
501	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeClass ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
502	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	52	None	add
503	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	52	None	add
504	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));	  	non-compiled	[CE]  	52	None	add
505	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	52	None	add
506	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe.class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	52	None	add
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".unsafe   ");    	compilable	  [FE]  AssertionFailedError  	114	1	replace
508	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".unsafe   ");    	compilable	  [FE]  AssertionFailedError  	114	1	replace
509	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	110	None	add
510	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".misc.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	110	None	add
511	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	110	None	add
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	76	1	replace
513	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	76	1	replace
514	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ".class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	non-compiled	[CE]  <identifier>  expected	133	None	replace
515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
516	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
517	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	176	None	replace
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
519	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.List ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
520	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	176	None	replace
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "commons.reflect.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
522	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "commons.reflect.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "commons.reflect.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
523	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	105	None	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
525	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
526	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ".getRawClass());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ".getRawClass());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator ".getRawClass());	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	115	1	replace
528	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	115	1	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	115	1	replace
530	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.class ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	115	1	replace
531	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.safe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.safe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    	compilable	  [FE]  AssertionFailedError  	55	1	replace
532	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.safe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.safe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.safe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    	compilable	  [FE]  AssertionFailedError  	55	1	replace
533	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	non-compiled	[CE]  <identifier>  expected	13	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	compilable	  [FE]  AssertionFailedError  	13	1	replace
535	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	compilable	  [FE]  AssertionFailedError  	13	1	replace
536	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	175	None	add
537	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.reflect.unsafe.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.apache.commons.reflect.unsafe.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	175	None	add
538	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	175	None	add
539	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.reflect.unsafe.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.reflect.unsafe.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	175	None	add
540	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
541	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
542	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
543	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
544	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe "));	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   "));    	non-compiled	[CE]  	116	None	replace
545	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   "));    	non-compiled	[CE]  	116	None	replace
546	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	64	1	replace
547	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe.class ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	64	1	replace
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	77	1	replace
549	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	77	1	replace
550	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
551	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "[UnsafeAllocator] ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "[UnsafeAllocator] ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
553	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "[UnsafeAllocator] ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "[UnsafeAllocator] ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "[UnsafeAllocator] ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ",UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
555	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ",UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ",UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ";UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
557	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ";UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
558	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  null  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  null  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c  ==  null?  null  :  c.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
559	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  class.getSuperclass();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  class.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  class.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
560	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  this.safeClass.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  this.safeClass.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  this.safeClass.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
561	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  super.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  super.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  super.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
562	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  null.getSuperclass()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  null.getSuperclass()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c  ==  null?  null.getSuperclass()  :  c.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
563	[BUG]  [BUGGY]  Object  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getUnsafeClass();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
564	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getConstructorId(null);	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
565	[BUG]  [BUGGY]  Class  unsafeClass  =  getConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  unsafeClass  =  getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  unsafeClass  =  getConstructorId();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
566	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(c);  [CE]  cannot  find  symbol  c  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  getConstructorId(c);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getConstructorId(c);	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  c	144	None	replace
567	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId(false);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  getConstructorId(false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getConstructorId(false);	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
568	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	186	1	replace
569	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	186	1	replace
570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	186	1	replace
571	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	186	1	replace
572	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe_Class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	non-compiled	[CE]  <identifier>  expected	186	None	replace
573	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
574	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
575	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
576	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
577	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ".);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	16	None	add
578	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	16	None	add
579	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getUnsafeClass();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getUnsafeClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getUnsafeClass();	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
580	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId(null);	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
581	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getFactory();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getFactory();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getFactory();	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
582	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getFactoryId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getFactoryId();	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
583	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	74	None	add
584	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	74	None	add
585	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".com.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	74	None	add
586	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	74	None	add
587	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ".);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	74	None	add
588	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	74	None	add
589	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
590	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafetag ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafetag ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
592	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafetag ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafetag ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafetag ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
593	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
595	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeallocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
596	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	117	None	add
597	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	117	None	add
598	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	117	None	add
599	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "java.util.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",java.util.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	117	None	add
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	107	1	replace
601	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	107	1	replace
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	107	1	replace
603	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	107	1	replace
604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeInstance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeInstance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
605	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeInstance ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeInstance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeInstance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
606	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
607	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
608	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ".class);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	non-compiled	[CE]  <identifier>  expected	160	None	replace
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
610	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstance. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Instance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Instance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
612	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Instance ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Instance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Instance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.instance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.instance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
614	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.instance ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.instance ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.instance ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.method.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.method.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	143	1	replace
616	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.method.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.method.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.method.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	143	1	replace
617	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	130	None	replace
618	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
620	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
622	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
623	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	93	None	replace
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	131	1	replace
625	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	131	1	replace
626	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	131	1	replace
627	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	131	1	replace
628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
629	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
630	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
631	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe.class ");  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
633	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
634	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
635	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
636	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	155	None	add
637	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	155	None	add
638	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( "deprecated.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    Class  <?>  unsafeClass  =  Class.forName( "deprecated.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	155	None	add
639	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	155	None	add
640	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".deprecated.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "deprecated.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".deprecated.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "deprecated.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".deprecated.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	155	None	add
641	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
642	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.Loader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.Loader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
644	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.Loader ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.Loader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.Loader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
645	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.classLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.classLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
646	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.classLoader ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.classLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.classLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
647	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
648	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.ClassLoader ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
649	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	non-compiled	[CE]  <identifier>  expected	174	None	replace
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
651	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
652	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
654	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
655	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	66	None	add
656	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	66	None	add
657	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".misc.unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	66	None	add
658	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	66	None	add
659	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));	  	non-compiled	[CE]  	66	None	add
660	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	66	None	add
661	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   "));    	non-compiled	[CE]  	187	None	replace
662	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   "));    	non-compiled	[CE]  	187	None	replace
663	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	32	None	add
664	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe_Class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.mockito.unsafe.Unsafe_Class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	32	None	add
665	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	32	None	add
666	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class ".class);	  	non-compiled	[CE]  <identifier>  expected	32	None	add
667	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe_Class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	32	None	add
668	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	79	1	replace
669	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	79	1	replace
670	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	non-compiled	[CE]  <identifier>  expected	79	None	replace
671	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ".class);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	non-compiled	[CE]  <identifier>  expected	79	None	replace
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	79	1	replace
673	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe.class ");  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	79	1	replace
674	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   "));    	non-compiled	[CE]  	129	None	replace
675	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class "));	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   "));    	non-compiled	[CE]  	129	None	replace
676	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   "));    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	129	None	replace
677	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
678	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
679	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
680	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafe.. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafe.. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
681	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ".   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
682	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
683	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]              AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
685	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.path ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
687	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
688	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  unsafeClass);  [CE]  no  suitable  method  found  for  forName(String,<null>,Class<CAP#1>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  unsafeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  unsafeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>,Class<CAP#1>)	61	None	replace
689	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  safeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  safeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  safeClass	61	None	replace
690	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  new  Class[]  {  null  }  );  [CE]  no  suitable  method  found  for  forName(String,Class[])  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  new  Class[]  {  null  }  );  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  new  Class[]  {  null  }  );	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,Class[])	61	None	replace
691	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  false);  [CE]  no  suitable  method  found  for  forName(String,<null>,boolean)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null,  false);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>,boolean)	61	None	replace
692	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  new  Class[]  {  }  );  [CE]  no  suitable  method  found  for  forName(String,Class[])  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  new  Class[]  {  }  );  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  new  Class[]  {  }  );	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,Class[])	61	None	replace
693	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  c,  null);  [CE]  cannot  find  symbol  c  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  c,  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  c,  null);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  c	61	None	replace
694	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeclass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	48	None	add
695	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	48	None	add
696	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafeclass ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( ".unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    Class  <?>  unsafeClass  =  Class.forName( ".unsafeclass ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	48	None	add
697	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeclass. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	48	None	add
698	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeclass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeclass "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeclass "));	  	non-compiled	[CE]  	48	None	add
699	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
700	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
701	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	168	None	replace
702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
703	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.List ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
705	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
706	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Arrays ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Arrays ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
707	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Arrays ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Arrays ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Arrays ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
708	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
709	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
710	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	non-compiled	[CE]  <identifier>  expected	124	None	replace
711	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	124	None	replace
712	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
713	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.List ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
714	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
715	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
716	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
717	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	5	None	add
718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.core.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.core.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
719	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.core.unsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.core.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.core.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
721	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
722	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	95	1	replace
723	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( ".java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	95	1	replace
724	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
725	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ".class);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
726	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
727	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeclass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
729	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafeclass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
730	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  null);	  final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	118	None	replace
731	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false);  [CE]  no  suitable  method  found  for  forName(String,boolean)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false);	  final    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean)	118	None	replace
732	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	142	None	add
733	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	142	None	add
734	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	142	None	add
735	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".theUnsafe ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( ".theUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    Class  <?>  unsafeClass  =  Class.forName( ".theUnsafe ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	142	None	add
736	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ".class);	  	non-compiled	[CE]  <identifier>  expected	142	None	add
737	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
739	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
740	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	31	None	replace
741	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
742	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	31	1	replace
743	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
744	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.misc.unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
745	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
746	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class. ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	3	None	add
747	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getConstructorId(null);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  getConstructorId(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getConstructorId(null);	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
748	[BUG]  [BUGGY]  UnsafeAllocator  f  =  this.getConstructorId();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  this.getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  this.getConstructorId();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	146	None	replace
749	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getConstructorFunction();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  getConstructorFunction();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getConstructorFunction();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
750	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getConstructorInstance();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  getConstructorInstance();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getConstructorInstance();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
751	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  getFunctionId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getFunctionId();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
752	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe "));	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   "));    	non-compiled	[CE]  	37	None	replace
753	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	non-compiled	[CE]  <identifier>  expected	126	None	replace
754	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	add
755	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.hibernate.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.hibernate.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.hibernate.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	add
756	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	add
757	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.hibernate.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]          AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.hibernate.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.hibernate.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	add
758	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	123	None	add
759	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.jdk.internal.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ".org.apache.jdk.internal.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ".org.apache.jdk.internal.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	123	None	add
760	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    final  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	123	None	add
761	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	17	None	replace
762	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	non-compiled	[CE]  <identifier>  expected	78	None	replace
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	78	1	replace
764	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	78	1	replace
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
766	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
767	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.   ");	  	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	104	None	add
768	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	104	None	add
769	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.undef.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.undef.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
770	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.undef.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.undef.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.undef.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
771	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
772	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe-class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
773	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.sun.security.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.sun.security.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
774	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.sun.security.ArrayList ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.sun.security.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.sun.security.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
775	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	110	None	add
776	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
777	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ObjectList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
778	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
779	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
780	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.Locale ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.Locale ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
781	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.Locale ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.Locale ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.Locale ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
782	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	66	None	add
783	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  Class.class);  [CE]  no  suitable  method  found  for  forName(String,Class<Class>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  Class.class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ",  Class.class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,Class<Class>)	34	None	replace
784	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	44	None	add
785	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	106	1	replace
786	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	106	1	replace
787	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	70	None	add
788	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "safe.class "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "safe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "safe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "safe.class "));	  	non-compiled	[CE]  	54	None	add
789	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Object  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");  Object  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    Object  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ArrayList ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	175	None	add
790	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
791	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getFactoryId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getFactoryId();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
792	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");	  	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	149	None	add
793	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Object  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Object  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Object  unsafeClass  =  Class.forName( "com.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
795	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
796	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
797	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	71	1	replace
798	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
799	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
800	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
801	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
802	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c!=  null?  null  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c!=  null?  null  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c!=  null?  null  :  c.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
803	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  getConstructorId()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  getConstructorId()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c  ==  null?  getConstructorId()  :  c.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
804	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c!=  null?  getConstructorId()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c!=  null?  getConstructorId()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c!=  null?  getConstructorId()  :  c.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ".);    	compilable	  [FE]  AssertionFailedError  	137	1	replace
806	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ".);    	compilable	  [FE]  AssertionFailedError  	137	1	replace
807	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getNativeType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getNativeType(UNKNOWN_TYPE);	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	87	None	replace
808	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getFactoryId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getFactoryId();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
809	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getSimpleConstructorId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getSimpleConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getSimpleConstructorId();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
810	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe_class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	non-compiled	[CE]  <identifier>  expected	164	None	replace
811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
812	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe_class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	164	1	replace
813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
814	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
815	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ".class);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe-class ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	non-compiled	[CE]  <identifier>  expected	69	None	replace
816	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "null-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
817	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null-class ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "null-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
818	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.class   ");  final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    final  Class  <?>  unsafeClass  =  Class.forName( ".unsafe.class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	52	None	add
819	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ",  Class.class);  [CE]  no  suitable  method  found  for  forName(String,Class<Class>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ",  Class.class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe   ",  Class.class);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,Class<Class>)	58	None	replace
820	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe ".);	  	non-compiled	[CE]  <identifier>  expected	142	None	add
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
822	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
823	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "detectUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "detectUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
824	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "detectUnsafeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "detectUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "detectUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "goog.getUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "goog.getUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
826	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "goog.getUnsafeClass ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "goog.getUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "goog.getUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
827	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator.   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	171	None	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "none.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "none.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
829	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "none.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "none.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "none.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "detectUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "detectUnsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
831	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "detectUnsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "detectUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "detectUnsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
832	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  UnsafeClass  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  UnsafeClass  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    UnsafeClass  <?>  unsafeClass  =  Class.forName( "unsafe-class   ");	  	non-compiled	[CE]  cannot  find  symbol	68	None	add
833	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "getUnsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
834	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafe.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "getUnsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "getUnsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
835	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe-Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe-Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
836	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe-Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe-Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe-Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	33	1	replace
837	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
838	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
839	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe. ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	53	1	replace
840	[BUG]  [BUGGY]  Object  unsafeClass  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  getFactoryId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getFactoryId();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
841	[BUG]  [BUGGY]  Object  unsafeClass  =  getConstructorId().getObject();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  getConstructorId().getObject();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  getConstructorId().getObject();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
843	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
844	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "org.misc.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
846	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
847	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
848	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	65	1	replace
849	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeInstance.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safeInstance.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    	compilable	  [FE]  AssertionFailedError  	55	1	replace
850	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeInstance.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safeInstance.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safeInstance.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "safe.class   ");    	compilable	  [FE]  AssertionFailedError  	55	1	replace
851	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe.   ");    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
852	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getUnsafeConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  unsafeClass  =  getUnsafeConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getUnsafeConstructorId();	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
853	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safe.class "));	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   "));    	non-compiled	[CE]  	129	None	replace
854	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  newInstance.class);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  newInstance.class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  newInstance.class);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ".class);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
855	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	119	None	replace
856	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  Class.class);  [CE]  no  suitable  method  found  for  forName(String,Class<Class>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  Class.class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList   ",  Class.class);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ".class);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,Class<Class>)	119	None	replace
857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
858	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ObjectList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
860	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.List ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.List ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.List ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
861	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
862	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ObjectList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
863	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	72	None	add
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
865	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
866	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
867	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe_class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe_class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe_class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe_class   ");    	compilable	  [FE]  AssertionFailedError  	47	1	replace
868	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAccess ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	non-compiled	[CE]  <identifier>  expected	141	None	replace
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
870	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.UnsafeAllocator ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	15	1	replace
871	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
872	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe_Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	6	1	replace
873	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	1	None	add
874	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c!=  null?  null  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  c!=  null?  null  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c!=  null?  null  :  c.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
875	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  getConstructorId()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  getConstructorId()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c  ==  null?  getConstructorId()  :  c.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
876	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  getSuperclass()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  c  ==  null?  getSuperclass()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c  ==  null?  getSuperclass()  :  c.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
877	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().loadClass(null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().loadClass(null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().loadClass(null);	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
878	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getRawclass();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().getRawclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().getRawclass();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
879	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "safe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	41	1	replace
880	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe ");  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "safe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "safe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe       ");    	compilable	  [FE]  AssertionFailedError  	41	1	replace
881	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
882	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeClass. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
883	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  UnsafeClass  <?>  unsafeClass  =  Class.forName( "unsafe.   ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  UnsafeClass  <?>  unsafeClass  =  Class.forName( "unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    UnsafeClass  <?>  unsafeClass  =  Class.forName( "unsafe.   ");	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
884	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Object  unsafeClass  =  Class.forName( "unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Object  unsafeClass  =  Class.forName( "unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Object  unsafeClass  =  Class.forName( "unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
885	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ",unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ",unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ",unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	59	None	add
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( ";org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
887	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";org.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( ";org.misc.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( ";org.misc.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   ",org.misc.UnsafeAllocator       ");    	compilable	  [FE]  AssertionFailedError  	181	1	replace
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
889	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	2	1	replace
890	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe   ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
891	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");  Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	30	None	add
892	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	158	1	replace
893	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	158	1	replace
894	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
895	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ObjectList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
896	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
897	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.reflect.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.reflect.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	176	1	replace
898	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
899	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getUnsafeConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getUnsafeConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getUnsafeConstructorId();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
900	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getFactoryId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getFactoryId();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
901	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
902	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	63	1	replace
903	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
904	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
905	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
906	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
907	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
908	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	75	1	replace
909	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null ".class);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "null ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "null ".class);	  Class    <?>    unsafeClass    =    Class.forName(   "null.class   ");    	non-compiled	[CE]  <identifier>  expected	154	None	replace
910	[BUG]  [BUGGY]  final  Object  unsafeClass  =  getFactoryId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  getFactoryId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  getFactoryId();	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
911	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class, ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	61	None	replace
912	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  newInstance);  [CE]  cannot  find  symbol  newInstance  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  newInstance);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  newInstance);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  cannot  find  symbol  newInstance	61	None	replace
913	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  class);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  class);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
914	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theUnsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
915	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeclass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafeclass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafeclass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeclass   ");    	compilable	  [FE]  AssertionFailedError  	49	1	replace
916	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getConstructorFactory();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  getConstructorFactory();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getConstructorFactory();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
917	[BUG]  [BUGGY]  UnsafeAllocator  f  =  getFactory();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  getFactory();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  getFactory();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
918	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeAllocator   ");    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
919	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
920	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	108	1	replace
921	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	183	1	replace
922	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	183	1	replace
923	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getNativeObjectType(UNKNOWN_TYPE);	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	89	None	replace
924	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.UnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.UnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.UnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	161	None	add
925	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".);	  	non-compiled	[CE]  <identifier>  expected	18	None	add
926	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)getConstructorId();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)getConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)getConstructorId();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
927	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)null.create();  [CE]  <null>  cannot  be  dereferenced  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)null.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)null.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  <null>  cannot  be  dereferenced	92	None	replace
928	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.security.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
929	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.security.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.security.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.security.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
930	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAccess ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
931	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAccess ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.UnsafeAccess ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	29	1	replace
932	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    	non-compiled	[CE]  <identifier>  expected	82	None	replace
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
934	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeInstances ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    	compilable	  [FE]  AssertionFailedError  	160	1	replace
935	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
936	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
937	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "nullClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "nullClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
938	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "nullClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "nullClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "nullClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	43	1	replace
939	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	22	None	add
940	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.internal. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.internal. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
941	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.internal. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.internal. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.internal. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
942	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
943	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.unsafe.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
944	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ",java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	96	1	replace
945	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "ArrayList ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   ",java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	96	1	replace
946	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeAllocator   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeAllocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	99	None	add
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	77	1	replace
948	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".com.misc.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	77	1	replace
949	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafellocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafellocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
950	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafellocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafellocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafellocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
951	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafealllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafealllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
952	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafealllocator ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafealllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafealllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
953	[BUG]  [BUGGY]  Object  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  Class.forName( "org.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe       ");    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
954	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
955	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.misc.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	12	1	replace
956	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	28	None	add
957	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
958	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ObjectList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ObjectList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.ObjectList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
960	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "safeUnsafe ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe       ");    	compilable	  [FE]  AssertionFailedError  	36	1	replace
961	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Object  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Object  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    Object  unsafeClass  =  Class.forName( "org.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
962	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getUnsafeConstructorId();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getUnsafeConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getUnsafeConstructorId();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
963	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  getConstructorId().getRawClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  getConstructorId().getRawClass();	  final    Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
964	[BUG]  [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [CE]  type  UnsafeAllocator  does  not  take  parameters  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.UnsafeAllocator       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	non-compiled	[CE]  type  UnsafeAllocator  does  not  take  parameters	109	None	replace
965	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ")org.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ")org.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ")org.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	20	None	add
966	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeInstance   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeInstance   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeInstance   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeInstance   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeInstance   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	159	None	add
967	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
968	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
969	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
970	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeList ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.UnsafeList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	121	1	replace
971	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.jdk.internal.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.jdk.internal.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.jdk.internal.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	169	None	add
972	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
973	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	64	1	replace
974	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "org.mockito.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	64	1	replace
975	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "commons.mockito.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "commons.mockito.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
976	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "commons.mockito.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "commons.mockito.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "commons.mockito.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
977	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
978	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.mockito.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	178	1	replace
979	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ").class);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ").class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ").class);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator   ".class);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
980	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.jdk.internal.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.jdk.internal.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.jdk.internal.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.apache.jdk.internal.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	123	None	add
981	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theunsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "theunsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
982	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theunsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theunsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theunsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	69	1	replace
983	[BUG]  [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	static  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "testUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "testUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
985	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "testUnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "testUnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "testUnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	166	1	replace
986	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "org.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   ".org.misc.Unsafe   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
987	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getUnsafeConstructorId();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
988	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getCurrentConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getCurrentConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getCurrentConstructorId();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
989	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeClassId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  getUnsafeClassId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  getUnsafeClassId();	  final    Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
990	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
991	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
992	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	172	None	replace
993	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
994	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	172	1	replace
995	[BUG]  [BUGGY]  final  Object  unsafeClass  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  findConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  findConstructorId();	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
996	[BUG]  [BUGGY]  final  Object  unsafeClass  =  createConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Object  unsafeClass  =  createConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Object  unsafeClass  =  createConstructorId();	  final    Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
997	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
998	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	152	1	replace
999	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe-class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe-class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe-class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	84	None	add
1000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1001	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.unsafe.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	79	1	replace
1002	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().invoke(null,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().invoke(null,  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().invoke(null,  null);	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1003	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().computeClass(c);  [CE]  cannot  find  symbol  c  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().computeClass(c);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().computeClass(c);	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol  c	188	None	replace
1004	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().withUTC();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getConstructorId().withUTC();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getConstructorId().withUTC();	  Class    <?>    unsafeClass    =    getConstructorId().getRawClass();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1005	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null),  unsafeClass);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null),  unsafeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  null),  unsafeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  	61	None	replace
1006	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  newInstance());  [CE]  method  newInstance  in  class  UnsafeAllocator  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  newInstance());  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ",  newInstance());	  Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   ",    null);    	non-compiled	[CE]  method  newInstance  in  class  UnsafeAllocator  cannot  be  applied  to  given  types;	61	None	replace
1007	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeinfo.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeinfo.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
1008	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeinfo.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeinfo.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeinfo.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    	compilable	  [FE]  AssertionFailedError  	102	1	replace
1009	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
1010	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.mockito.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	162	1	replace
1011	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
1012	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.ClassLoader. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.ClassLoader   ");    	compilable	  [FE]  AssertionFailedError  	174	1	replace
1013	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
1014	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
1015	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
1016	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	21	1	replace
1017	[BUG]  [BUGGY]  final  Field  unsafeClass  =  getFunctionId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Field  unsafeClass  =  getFunctionId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Field  unsafeClass  =  getFunctionId();	  final    Field    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1018	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  findConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  findConstructorId();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
1019	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId().getRawClass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  getConstructorId().getRawClass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  getConstructorId().getRawClass();	  Class    <    T>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
1020	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
1021	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe. ");	  Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	57	1	replace
1022	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	14	None	add
1023	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.Class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafe.Class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.Class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Class   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafe.Class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	7	None	add
1024	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	18	None	add
1025	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,String,<null>)  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ", "org.mockito.unsafe.Unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe   ",    null);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,String,<null>)	184	None	replace
1026	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	93	1	replace
1027	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList. ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(       "java.util.ArrayList       ");    Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList       ");    	compilable	  [FE]  AssertionFailedError  	93	1	replace
1028	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  unsafeClass);  [CE]  no  suitable  method  found  for  forName(String,boolean,Class<CAP#1>)  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  unsafeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  unsafeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,boolean,Class<CAP#1>)	122	None	replace
1029	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  safeClass);  [CE]  cannot  find  symbol  safeClass  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  safeClass);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ",  false,  safeClass);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ",    false);    	non-compiled	[CE]  cannot  find  symbol  safeClass	122	None	replace
1030	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.mockito.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.apache.commons.mockito.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.mockito.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.mockito.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.apache.commons.mockito.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	177	None	add
1031	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Unsafe ",  null);	  final    Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.Unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	71	None	replace
1032	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
1033	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.hibernate.unsafe.ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.hibernate.unsafe.ArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.hibernate.unsafe.ArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.unsafe.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	168	1	replace
1034	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
1035	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "unsafe   ");    	compilable	  [FE]  AssertionFailedError  	45	1	replace
1036	[BUG]  [BUGGY]  UnsafeAllocator  f  =  createConstructorId();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  createConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  createConstructorId();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1037	[BUG]  [BUGGY]  UnsafeAllocator  f  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  UnsafeAllocator  f  =  findConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	UnsafeAllocator  f  =  findConstructorId();	  UnsafeAllocator    f    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1038	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( "unsafeClass "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( "unsafeClass "));	  	non-compiled	[CE]  	42	None	add
1039	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",unsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",unsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ",unsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	42	None	add
1040	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ",this.unsafe.class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "this.unsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( ",this.unsafe.class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "this.unsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( ",this.unsafe.class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	56	None	add
1041	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ",unsafe-class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe-class   ");  Class  <?>  unsafeClass  =  Class.forName( ",unsafe-class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe-class   ");    Class  <?>  unsafeClass  =  Class.forName( ",unsafe-class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	68	None	add
1042	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
1043	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	27	1	replace
1044	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",getUnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "getUnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",getUnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "getUnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ",getUnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	165	None	add
1045	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ").class);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ").class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ").class);	  Class    <?>    unsafeClass    =    Class.forName(   "java.util.ArrayList   ".class);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
1046	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ")org.hibernate.ArrayList   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.hibernate.ArrayList   ");  Class  <?>  unsafeClass  =  Class.forName( ")org.hibernate.ArrayList   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.hibernate.ArrayList   ");    Class  <?>  unsafeClass  =  Class.forName( ")org.hibernate.ArrayList   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	120	None	add
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "testInstance.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "testInstance.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	180	1	replace
1048	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "testInstance.class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "testInstance.class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "testInstance.class ");	  Class    <?>    unsafeClass    =    Class.forName(   "theunsafe.class   ");    	compilable	  [FE]  AssertionFailedError  	180	1	replace
1049	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
1050	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class.unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.Class.unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
1051	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
1052	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.UnsafeClass ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.class.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    	compilable	  [FE]  AssertionFailedError  	150	1	replace
1053	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
1054	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.UnsafeAccess ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeAccess   ");    	compilable	  [FE]  AssertionFailedError  	141	1	replace
1055	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.UnsafeArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.UnsafeArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
1056	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.UnsafeArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.UnsafeArrayList ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.UnsafeArrayList ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
1057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
1058	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList. ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.jdk.internal.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	124	1	replace
1059	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.Unsafe_Class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.Unsafe_Class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.Unsafe_Class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	185	None	add
1060	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class "));	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   "));    	non-compiled	[CE]  	129	None	replace
1061	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class "));	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class   "));    	non-compiled	[CE]  	129	None	replace
1062	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  this.c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  this.c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  this.c.getSuperclass();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1063	[BUG]  [BUGGY]  final  Class  <  T>  unsafeClass  =  c.newInstance();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <  T>  unsafeClass  =  c.newInstance();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <  T>  unsafeClass  =  c.newInstance();	  final    Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1064	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
1065	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "this.unsafe.class. ");	  Class    <?>    unsafeClass    =    Class.forName(       "unsafe.class       ");    Class    <?>    unsafeClass    =    Class.forName(   "unsafe.class.   ");    	compilable	  [FE]  AssertionFailedError  	128	1	replace
1066	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  class.forName( "unsafe.   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "unsafe.   ");  Class  <?>  unsafeClass  =  class.forName( "unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "unsafe.   ");    Class  <?>  unsafeClass  =  class.forName( "unsafe.   ");	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1067	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
1068	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.apache.commons.jdk.internal.ArrayList. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.apache.commons.jdk.internal.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	170	1	replace
1069	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ".class);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ".class);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ".class);	  Class    <?>    unsafeClass    =    Class.forName(       "com.misc.Unsafe       ");    final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.Unsafe   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1070	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "misc.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe "));	  	non-compiled	[CE]  	110	None	add
1071	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getUnsafeConstructorId();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getUnsafeConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getUnsafeConstructorId();	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1072	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  getUnsafeClassId();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  getUnsafeClassId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  getUnsafeClassId();	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1073	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  findConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  findConstructorId();	  Class    <?>    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1074	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	143	1	replace
1075	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.UnsafeAllocator ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.UnsafeAllocator ");	  Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe   ");    	compilable	  [FE]  AssertionFailedError  	143	1	replace
1076	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
1077	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
1078	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
1079	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.ClassLoader ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.ClassLoader ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator.ClassLoader ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator.   ");    	compilable	  [FE]  AssertionFailedError  	105	1	replace
1080	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe ".);	  Class    <?>    unsafeClass    =    Class.forName(       "misc.Unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ".);    	non-compiled	[CE]  <identifier>  expected	137	None	replace
1081	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.Class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
1082	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "unsafe.Class ");	  final    Class    <?>    unsafeClass    =    Class.forName(   "misc.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	111	1	replace
1083	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	186	1	replace
1084	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-Class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-Class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-Class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.Unsafe_Class   ");    	compilable	  [FE]  AssertionFailedError  	186	1	replace
1085	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ")com.misc.unsafe.   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.   ");  Class  <?>  unsafeClass  =  Class.forName( ")com.misc.unsafe.   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.   ");    Class  <?>  unsafeClass  =  Class.forName( ")com.misc.unsafe.   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	149	None	add
1086	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "theUnsafe.class   ");  Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "theUnsafe.class   ");    Class  <?>  unsafeClass  =  Class.forName( "theUnsafe.class "));	  	non-compiled	[CE]  	151	None	add
1087	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafeallocator   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.unsafeallocator   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafeallocator   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeallocator   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.unsafeallocator   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	101	None	add
1088	[BUG]  [BUGGY]  Object  unsafeClass  =  findConstructorId();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  findConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  findConstructorId();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
1089	[BUG]  [BUGGY]  Object  unsafeClass  =  createConstructorId();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Object  unsafeClass  =  createConstructorId();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Object  unsafeClass  =  createConstructorId();	  Object    unsafeClass    =    getConstructorId();    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
1090	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeClass   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.misc.UnsafeClass   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeClass   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.misc.UnsafeClass   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	138	None	add
1091	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	183	1	replace
1092	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Unsafe ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.hibernate.unsafe.Unsafe ");	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	compilable	  [FE]  AssertionFailedError  	183	1	replace
1093	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ",  null);  [CE]  no  suitable  method  found  for  forName(String,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ",  null);  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.mockito.unsafe.Unsafe ",  null);	  Class    <?>    unsafeClass    =    Class.forName(   "com.mockito.unsafe.Unsafe   ");    	non-compiled	[CE]  no  suitable  method  found  for  forName(String,<null>)	183	None	replace
1094	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
1095	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator. ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator. ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.security.UnsafeAllocator. ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.security.UnsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	10	1	replace
1096	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe "));	  Class    <?>    unsafeClass    =    Class.forName(       "misc.unsafe       ");    Class    <?>    unsafeClass    =    Class.forName(   "misc.unsafe   "));    	non-compiled	[CE]  	116	None	replace
1097	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
1098	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe-class ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe-class ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe.unsafe-class ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe.unsafe   ");    	compilable	  [FE]  AssertionFailedError  	17	1	replace
1099	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.Unsafe_Class   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");  Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.Unsafe_Class   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class    <?>    unsafeClass    =    Class.forName(   "org.mockito.unsafe.Unsafe_Class   ");    Class  <?>  unsafeClass  =  Class.forName( ",org.mockito.unsafe.Unsafe_Class   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	32	None	add
1100	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  new  Class  <  T>()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  new  Class  <  T>()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c  ==  null?  new  Class  <  T>()  :  c.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1101	[BUG]  [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  getSuperclass()  :  c.getSuperclass();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <  T>  unsafeClass  =  c  ==  null?  getSuperclass()  :  c.getSuperclass();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <  T>  unsafeClass  =  c  ==  null?  getSuperclass()  :  c.getSuperclass();	  Class    <    T>    unsafeClass    =    c.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
1103	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.UnsafeClass ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.UnsafeClass ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.UnsafeClass ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.UnsafeClass   ");    	compilable	  [FE]  AssertionFailedError  	139	1	replace
1104	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)safeClass.create();  [CE]  cannot  find  symbol  safeClass  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =(Class  <?>)safeClass.create();  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final  Class  <?>  unsafeClass  =(Class  <?>)safeClass.create();	  final    Class    <?>    unsafeClass    =(Class    <?>)super.create();    	non-compiled	[CE]  cannot  find  symbol  safeClass	92	None	replace
1105	[BUG]  [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.Unsafe   ");  [CE]  variable  unsafeClass  is  already  defined  in  method  create()  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  final  Class  <?>  unsafeClass  =  Class.forName(   "com.misc.unsafe.Unsafe   ");  final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.Unsafe   ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	final    Class    <?>    unsafeClass    =    Class.forName(   "com.misc.unsafe.Unsafe   ");    final  Class  <?>  unsafeClass  =  Class.forName( ",com.misc.unsafe.Unsafe   ");	  	non-compiled	[CE]  variable  unsafeClass  is  already  defined  in  method  create()	72	None	add
1106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class, ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class, ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
1107	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class, ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class, ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe-class, ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafe-class   ");    	compilable	  [FE]  AssertionFailedError  	85	1	replace
1108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator_ ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator_ ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	98	1	replace
1109	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator_ ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  UnsafeAllocator  create()  {      try  {      [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator_ ");  [BUGGY]      Field  f  =  unsafeClass.getDeclaredField(     "theUnsafe     ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod(     "allocateInstance     ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings(     "unchecked     ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafeAllocator_ ");	  Class    <?>    unsafeClass    =    Class.forName(   "org.misc.unsafeAllocator   ");    	compilable	  [FE]  AssertionFailedError  	98	1	replace
