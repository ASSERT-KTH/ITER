bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
2	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
4	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
6	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
8	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
10	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "misc.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
12	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.misc.UnsafeAllocator ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
13	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  unsafeClass  [FE]                AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]    [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	  	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	non-compiled	[CE]  cannot  find  symbol  unsafeClass	2	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
15	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
17	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "unsafe.class ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
19	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
21	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "org.mockito.unsafe.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
23	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "java.util.ArrayList ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	add	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
25	[BUG]  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  UnsafeAllocator  create()  {      try  {  [BUGGY]  Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");  [BUGGY]  Field  f  =  unsafeClass.getDeclaredField( "theUnsafe ");  f.setAccessible(true);  final  Object  unsafe  =  f.get(null);  final  Method  allocateInstance  =  unsafeClass.getMethod( "allocateInstance ",  Class.class);  return  new  UnsafeAllocator()  {  @Override  @SuppressWarnings( "unchecked ")  public  <T>  T  newInstance(Class<T>  c)  throws  Exception  {  return  (T)  allocateInstance.invoke(unsafe,  c);  }  [CLASS]  UnsafeAllocator  1  2  3  4  [METHOD]  create  [RETURN_TYPE]  UnsafeAllocator  [VARIABLES]  Field  f  boolean  Class  c  unsafeClass  Object  unsafe  Method  allocateInstance  getConstructorId  newInstance  Exception  ignored  int  constructorId  	projects/Gson8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java	0.8164965809277261	39	39	2	replace	Class  <?>  unsafeClass  =  Class.forName( "com.misc.unsafe.Unsafe ");	Class<?>  unsafeClass  =  Class.forName( "sun.misc.Unsafe ");  	compilable	  [FE]  AssertionFailedError  	2	1	replace
