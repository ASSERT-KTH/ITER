bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
3	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
4	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserError( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.eof ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ",  stream.getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ",  stream.getLineno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.eof ",  stream.getLineno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]    [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	  	jsdocBuilder.build(null);  	compilable	  [FE]  AssertionFailedError  	1	2	replace
7	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]    [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	  	jsdocBuilder.build(null);  	compilable	  [FE]  AssertionFailedError  	1	2	replace
8	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
10	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:    [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	jsdocBuilder.build(null);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
