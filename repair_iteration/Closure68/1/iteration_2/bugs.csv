bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
2	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source   ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source   ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.source   ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	8	2	replace
4	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	8	2	replace
5	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
6	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
7	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ",    stream.getLineno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ",    stream.getLineno());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  AssertionFailedError  	1	2	replace
10	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  AssertionFailedError  	1	2	replace
11	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
12	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	3	2	replace
15	[BUG]  [BUGGY]  parser.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	3	2	replace
16	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserError( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.eof ".,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  parser.addParserError( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParserError( "msg.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	        parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
19	[BUG]  [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	  	compilable	  [FE]  AssertionFailedError  	6	2	add
20	[BUG]  [BUGGY]      parser.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      parser.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        parser.addParserError( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
21	[BUG]  [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
22	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
23	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
24	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.not.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserError( "msg.not.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.not.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
25	[BUG]  [BUGGY]      State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION;  [CE]  cannot  assign  a  value  to  final  variable  SEARCHING_ANNOTATION  [FE]    AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION;  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  SEARCHING_ANNOTATION	6	None	add
26	[BUG]  [BUGGY]      State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION();  [CE]  cannot  assign  a  value  to  final  variable  SEARCHING_ANNOTATION  [FE]      AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION();  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION();	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  SEARCHING_ANNOTATION	6	None	add
27	[BUG]  [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno()   ",  stream.getCharno());  [CE]  no  suitable  method  found  for  addParserWarning(String,String,int)  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno()   ",  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno()   ",  stream.getCharno());	  	non-compiled	[CE]  no  suitable  method  found  for  addParserWarning(String,String,int)	6	None	add
28	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
30	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.invalid.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.invalid.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.invalid.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
31	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
32	[BUG]  [BUGGY]      State  stream  =  state.SEARCHING_ANNOTATION;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      State  stream  =  state.SEARCHING_ANNOTATION;  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        State  stream  =  state.SEARCHING_ANNOTATION;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
33	[BUG]  [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]      AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]      parser.addParserWarning( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	        parser.addParserWarning( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	6	None	add
34	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof. ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof. ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
35	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
36	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:      [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());  [BUGGY]    parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
