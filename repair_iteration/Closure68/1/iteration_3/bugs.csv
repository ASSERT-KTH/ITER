bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	5	2	replace
3	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	5	2	replace
4	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.of ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.error.of ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.error.of ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
5	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
6	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.error.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.error.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
7	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.lineno ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.error.lineno ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.error.lineno ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
8	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
10	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.source       ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
11	[BUG]  [BUGGY]  parser.addParserError( "msg.not.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.not.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.not.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.not.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
12	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.not.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.not.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.not.eof ".,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.not.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  <identifier>  expected	24	None	replace
13	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
18	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "lineno,  stream.getLineno(),  stream.getCharno());  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "lineno,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  unclosed  string  literal	31	None	replace
19	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	10	2	replace
21	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  RuntimeException  	10	2	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  AssertionFailedError  	10	2	replace
23	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	compilable	  [FE]  AssertionFailedError  	10	2	replace
24	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno: "  +  lineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno: "  +  lineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ", "lineno: "  +  lineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.eof   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	add	parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    parser.addParserWarning( "msg.eof   ",  stream.getLineno(),  stream.getCharno());	  	compilable	  [FE]  RuntimeException  	14	2	add
26	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.eof   ",  stream.getLineno(),  stream.getCharno());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.eof   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    parser.addParserWarning( "msg.eof   ",  stream.getLineno(),  stream.getCharno());	  	compilable	  [FE]  RuntimeException  	14	2	add
27	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
28	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
29	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
30	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    stream,    sourceName.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source "),  stream.getLineno(),  stream.getCharno());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source "),  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source "),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
32	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ".getLineno(),  stream.getCharno());  [CE]  [FE]      RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ".getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.key ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.key ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.key ",  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
34	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
35	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.error.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.error.line ",  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
36	[BUG]  [BUGGY]  parser.addParserWarning( "msg.EOF.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.EOF.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.EOF.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
37	[BUG]  [BUGGY]  parser.addParserWarning( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]      RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
38	[BUG]  [BUGGY]  parser.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
39	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  EOF.getSEARCHING_ANNOTATION();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  EOF.getSEARCHING_ANNOTATION();  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  EOF.getSEARCHING_ANNOTATION();	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  ')'  expected	26	None	replace
40	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  this.state.getSEARCHING_ANNOTATION();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  this.state.getSEARCHING_ANNOTATION();  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  this.state.getSEARCHING_ANNOTATION();	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  ')'  expected	26	None	replace
41	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  +  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  +  1;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  +  1;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  ')'  expected	26	None	replace
42	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  stream.getSEARCHING_ANNOTATION();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  stream.getSEARCHING_ANNOTATION();  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  stream.getSEARCHING_ANNOTATION();	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  ')'  expected	26	None	replace
43	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION(),  stream.getLineno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION(),  stream.getLineno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION(),  stream.getLineno());	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
44	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  ||  state.getSEARCHING_ANNOTATION();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  ||  state.getSEARCHING_ANNOTATION();  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  ||  state.getSEARCHING_ANNOTATION();	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  ')'  expected	26	None	replace
45	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  lineno,  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  lineno,  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  lineno,  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
46	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
47	[BUG]  [BUGGY]          parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]          parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	                parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	  	non-compiled	[CE]  	18	None	add
48	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.error.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.error.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.error.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
49	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.error.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.error.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.error.line ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
50	[BUG]  [BUGGY]  parser.addParserWarning( "msg.eof.   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.eof.   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.eof.   ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
51	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_NEWLINE;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_NEWLINE;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_NEWLINE;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
53	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_ANNOTATION;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_ANNOTATION;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
54	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION?  SEARCHING_NEWLINE  :  state.SEARCHING_ANNOTATION;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION?  SEARCHING_NEWLINE  :  state.SEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION?  SEARCHING_NEWLINE  :  state.SEARCHING_ANNOTATION;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
55	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_EOL;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_EOL;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_EOL;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
56	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION?  SEARCHING_NEWLINE  :  State.SEARCHING_ANNOTATION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION?  SEARCHING_NEWLINE  :  State.SEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION?  SEARCHING_NEWLINE  :  State.SEARCHING_ANNOTATION;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
57	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_LINE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_LINE;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state.SEARCHING_LINE;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
58	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.invalid.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.invalid.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.invalid.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	30	None	replace
59	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.invalid.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.invalid.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.invalid.eof ".,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.invalid.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	30	None	replace
60	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.source ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.source ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.source   ",    stream,    sourceName.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
61	[BUG]  [BUGGY]  parser.addParserError( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.eof ".,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
62	[BUG]  [BUGGY]  parser.addParserError( "msg.lineno.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.lineno.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.lineno.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
63	[BUG]  [BUGGY]  parser.addParserError( "msg.eof. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.eof. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.eof. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
64	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  source.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source ",  source.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  source.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  source.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  source.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  stream,  source.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
66	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    state.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
67	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	9	None	add
68	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
69	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  lineno.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  lineno.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream,  lineno.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
70	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream,  state.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
71	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream,  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
72	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ",    stream,    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
73	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.error.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
74	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
75	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
76	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION();  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION();  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION();	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
77	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  +  1;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  +  1;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
78	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  this.state.getSEARCHING_ANNOTATION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  this.state.getSEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  this.state.getSEARCHING_ANNOTATION;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
79	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  EOF;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  EOF;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  EOF;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
80	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    parser.addParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	3	None	add
81	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  ParserParser.addParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]      RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  ParserParser.addParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    ParserParser.addParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	3	None	add
82	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  ParserParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]        RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  ParserParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    ParserParserWarning( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	3	None	add
83	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.lineno.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.lineno.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.lineno.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
84	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addError( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addError( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
85	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
86	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.charno ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
87	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno: "  +  lineno,  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno: "  +  lineno,  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ", "lineno: "  +  lineno,  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
88	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  lineno,  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
89	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  sourceName,  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
90	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  charno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  charno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  charno,  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
91	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  String.valueOf(stream.getLineno()),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  String.valueOf(stream.getLineno()),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  String.valueOf(stream.getLineno()),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
92	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  string,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ",  string,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ",  string,  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
93	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    parser.addParserWarning( "msg.eof ".,  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	14	None	add
94	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  orphaned  case	25	None	replace
95	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  stream.getSEARCHING_ANNOTATION;  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  stream.getSEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  stream.getSEARCHING_ANNOTATION;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  orphaned  case	25	None	replace
96	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  EOF.getSEARCHING_ANNOTATION;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  EOF.getSEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  EOF.getSEARCHING_ANNOTATION;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  orphaned  case	25	None	replace
97	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	22	None	replace
98	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.debug ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.debug ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.debug ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	22	None	replace
99	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  sourceName.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  sourceName.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream,  sourceName.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	22	None	replace
100	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	10	None	replace
101	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	10	None	replace
102	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getCharno());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.eof ", "lineno ",  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	10	None	replace
103	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.error.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.error.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.error.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	29	None	replace
104	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.internal.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.internal.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.internal.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	34	None	replace
105	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.error. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.error. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.error. ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
106	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.java.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.java.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.java.line ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
107	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.eof. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.eof. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.eof. ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
108	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
109	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
110	[BUG]  [BUGGY]          parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]          parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	                parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    parser.addParserWarning( "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	18	None	add
111	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  -  1;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  -  1;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION()  -  1;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  	26	None	replace
112	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
113	[BUG]  [BUGGY]  parser.addParserError( "msg.lineof.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.lineof.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.lineof.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
114	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  stream,  sourceName.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
115	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
116	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
117	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	8	None	replace
118	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.eof ", "lineno ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	8	None	replace
119	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.description.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.description.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.description.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	8	None	replace
120	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.debug ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.debug ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.debug ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
121	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.deprecated.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.deprecated.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.deprecated.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
122	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  stream,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
123	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  ParserParser  parser  =  new  ParserParser( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  ParserParser  parser  =  new  ParserParser( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    ParserParser  parser  =  new  ParserParser( "msg.unexpected.source   ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	3	None	add
124	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	20	None	replace
125	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	20	None	replace
126	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.description.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.description.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.description.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	20	None	replace
127	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	31	None	replace
128	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.string.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.string.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.string.eof ", "  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	31	None	replace
129	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	31	None	replace
130	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
131	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
132	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  lineno,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  lineno,  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  lineno,  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
133	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
134	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
135	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state!=  State.SEARCHING_NEWLINE;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state!=  State.SEARCHING_NEWLINE;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state!=  State.SEARCHING_NEWLINE;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
136	[BUG]  [BUGGY]  State  stream  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  State.SEARCHING_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  State.SEARCHING_ANNOTATION;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
137	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE);	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
138	[BUG]  [BUGGY]  State  stream  =  NEXT_IS_ANNOTATION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  NEXT_IS_ANNOTATION;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  NEXT_IS_ANNOTATION;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
139	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  +  1;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  +  1;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
140	[BUG]  [BUGGY]  JsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  JsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	JsdocBuilder.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
141	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ".name,  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ".name,  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ".name,  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
142	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
143	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.character ", "stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.character ", "stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.character ", "stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
144	[BUG]  [BUGGY]  parser.addParserWarning( "msg.original.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.original.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.original.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
145	[BUG]  [BUGGY]  parser.addParserWarning( "msg.boolean.eOL ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]      RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.boolean.eOL ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.boolean.eOL ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
146	[BUG]  [BUGGY]  parser.addParserWarning( "msg.boolean.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]        RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.boolean.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.boolean.eof ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
147	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  lineno,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  lineno,  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  stream,  lineno,  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
148	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  state.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.source ",  stream,  state.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.source ",  stream,  state.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
149	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.boolean.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.boolean.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.boolean.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
150	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.type ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.error.type ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.error.type ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	          parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	20	None	replace
151	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	8	None	replace
152	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.extended.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.extended.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.extended.eof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
153	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ".getLine(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ".getLine(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ".getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
154	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "lineno  of  type   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]      RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "lineno  of  type   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ", "lineno  of  type   ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
155	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]        RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
156	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.character ", "lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.character ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.character ", "lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
157	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  dataArea,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  dataArea,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.eof ",  stream,  dataArea,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
158	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",    stream,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
159	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
160	[BUG]  [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParser( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParser( "msg.unexpected.typeof ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParser(   "msg.unexpected.eof   ".,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
161	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  lineno,  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ",  stream,  lineno,  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ",  stream,  lineno,  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
162	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParser( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParser( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
163	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	if(hasParsedFileOverviewDocInfo())  {  parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
164	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	if(hasParsedFileOverviewDocInfo())  {  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
165	[BUG]  [BUGGY]  if(isBracketedParam)  {  parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  if(isBracketedParam)  {  parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	if(isBracketedParam)  {  parser.addParserWarning( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
166	[BUG]  [BUGGY]  if(isBracketedParam)  {  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  if(isBracketedParam)  {  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	if(isBracketedParam)  {  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	          parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	19	None	replace
167	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.character ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.character ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.character ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
168	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ");  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.type ");  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.type ");  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ");    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
169	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.function ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.function ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.function ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
170	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.flow ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.flow ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.flow ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
171	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.exp.name ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.eof.exp.name ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.eof.exp.name ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.eof.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
172	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()  ==  EOF;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()  ==  EOF;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()  ==  EOF;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
173	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()!=  EOF;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()!=  EOF;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()!=  EOF;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
174	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()  ==  null;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()  ==  null;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION  ||  state.getSEARCHING_ANNOTATION()  ==  null;	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
175	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.character ", "Stream  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.character ", "Stream  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.character ", "Stream  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	31	None	replace
176	[BUG]  [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ", "  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserWarning( "msg.unexpected.source ", "  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserWarning( "msg.unexpected.source ", "  sourceName,  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
177	[BUG]  [BUGGY]          parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  parser.addParserWarning( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]          parser.addParserWarning(   "msg.unexpected.eof   ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  parser.addParserWarning( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	                parser.addParserWarning(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    parser.addParserWarning( "msg.unexpected.eof ".,  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);	  	non-compiled	[CE]  	18	None	add
178	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION(fileOverviewJSDocInfo);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION(fileOverviewJSDocInfo);  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION(fileOverviewJSDocInfo);	          State.SEARCHING_ANNOTATION    =    state.getSEARCHING_ANNOTATION();    	non-compiled	[CE]  	26	None	replace
179	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
180	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.character ", "Stream  stream.getLineno()  = ",  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning( "msg.unexpected.character ", "Stream  stream.getLineno()  = ",  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning( "msg.unexpected.character ", "Stream  stream.getLineno()  = ",  stream.getCharno());	          parser.addParserWarning(   "msg.unexpected.eof   ",   "    stream.getLineno()       ",    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
181	[BUG]  [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]    RuntimeException    [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserWarning(   "msg.eof   ",  stream.getLineno(),  stream.getCharno());  parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserWarning(   "msg.eof   ",    stream.getLineno(),    stream.getCharno());    parser.addParserWarning( "msg.unexpected.eof ",  stream.getLineno(),  stream.getCharno());	  	non-compiled	[CE]  	14	None	add
182	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_EOC;  [CE]  [FE]        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_EOC;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_EOC;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
183	[BUG]  [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_EOL;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_EOL;  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	State  stream  =  state.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_EOL;	          State    stream    =    state.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	32	None	replace
184	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ", "  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
185	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  sourceName.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  parser.addParserError( "msg.unexpected.eof ",  stream,  sourceName.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	parser.addParserError( "msg.unexpected.eof ",  stream,  sourceName.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
186	[BUG]  [BUGGY]  jsdocBuilder.addParserError( "msg.not.eof. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:        [BUGGY]  jsdocBuilder.addParserError( "msg.not.eof. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      parser.addParserWarning(     "msg.unexpected.eof     ",  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	886	886	1	replace	jsdocBuilder.addParserError( "msg.not.eof. ",  stream.getLineno(),  stream.getCharno());	  jsdocBuilder.addParserError(   "msg.not.eof   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	24	None	replace
